
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009858  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08009a28  08009a28  0000aa28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a224  0800a224  0000c214  2**0
                  CONTENTS
  4 .ARM          00000008  0800a224  0800a224  0000b224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a22c  0800a22c  0000c214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a22c  0800a22c  0000b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a230  0800a230  0000b230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800a234  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000214  0800a448  0000c214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800a448  0000c548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad3  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225e  00000000  00000000  00018d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0001af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000766  00000000  00000000  0001b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c63  00000000  00000000  0001c0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceeb  00000000  00000000  0003ed09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd69a  00000000  00000000  0004bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011928e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d64  00000000  00000000  001192d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a10 	.word	0x08009a10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	08009a10 	.word	0x08009a10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <CAN_transmit_stdid>:
    return HAL_CAN_AddTxMessage(phcan, &TxHeader, msg, pTXmailBox);
}

HAL_StatusTypeDef CAN_transmit_stdid(CAN_HandleTypeDef *phcan, uint32_t* pTXmailBox,
                                    uint32_t motor_id, const uint8_t *msg, uint8_t packet_len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
    if (packet_len > 8){
 8001032:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001036:	2b08      	cmp	r3, #8
 8001038:	d902      	bls.n	8001040 <CAN_transmit_stdid+0x1c>
        //Paket len max is 8 bytes
        packet_len = 8;
 800103a:	2308      	movs	r3, #8
 800103c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    }
    uint16_t stdid = motor_id & 0x7FF;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	b29b      	uxth	r3, r3
 8001044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001048:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    CAN_TxHeaderTypeDef TxHeader;
    TxHeader.StdId = stdid;
 800104a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800104c:	617b      	str	r3, [r7, #20]
    TxHeader.ExtId = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = packet_len;
 800105a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24

    return HAL_CAN_AddTxMessage(phcan, &TxHeader, msg, pTXmailBox);
 8001060:	f107 0114 	add.w	r1, r7, #20
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f001 ff26 	bl	8002eba <HAL_CAN_AddTxMessage>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3730      	adds	r7, #48	@ 0x30
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <CUBEMARS_enable_motion_ctrl>:
    buffer_fill_int32(tx_buf, pos_for_motor);
    return CAN_transmit_extid(phcan, pTXmailBox, CAN_PACKET_SET_POS, TEST_MOTOR_ID, tx_buf, sizeof(tx_buf));
}

HAL_StatusTypeDef CUBEMARS_enable_motion_ctrl(CAN_HandleTypeDef *phcan, uint32_t* pTxmailBox)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    uint8_t tx_buf[8];
    tx_buf[0] = 0xFF;
 8001082:	23ff      	movs	r3, #255	@ 0xff
 8001084:	723b      	strb	r3, [r7, #8]
    tx_buf[1] = 0xFF;
 8001086:	23ff      	movs	r3, #255	@ 0xff
 8001088:	727b      	strb	r3, [r7, #9]
    tx_buf[2] = 0xFF;
 800108a:	23ff      	movs	r3, #255	@ 0xff
 800108c:	72bb      	strb	r3, [r7, #10]
    tx_buf[3] = 0xFF;
 800108e:	23ff      	movs	r3, #255	@ 0xff
 8001090:	72fb      	strb	r3, [r7, #11]
    tx_buf[4] = 0xFF;
 8001092:	23ff      	movs	r3, #255	@ 0xff
 8001094:	733b      	strb	r3, [r7, #12]
    tx_buf[5] = 0xFF;
 8001096:	23ff      	movs	r3, #255	@ 0xff
 8001098:	737b      	strb	r3, [r7, #13]
    tx_buf[6] = 0xFF;
 800109a:	23ff      	movs	r3, #255	@ 0xff
 800109c:	73bb      	strb	r3, [r7, #14]
    tx_buf[7] = 0xFC;
 800109e:	23fc      	movs	r3, #252	@ 0xfc
 80010a0:	73fb      	strb	r3, [r7, #15]
    

    return CAN_transmit_stdid(phcan, pTxmailBox, TEST_MOTOR_ID, tx_buf, sizeof(tx_buf));
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2208      	movs	r2, #8
 80010a8:	9200      	str	r2, [sp, #0]
 80010aa:	2201      	movs	r2, #1
 80010ac:	6839      	ldr	r1, [r7, #0]
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffb8 	bl	8001024 <CAN_transmit_stdid>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <CUBEMARS_disable_motion_ctrl>:

HAL_StatusTypeDef CUBEMARS_disable_motion_ctrl(CAN_HandleTypeDef *phcan, uint32_t* pTxmailBox)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
    uint8_t tx_buf[8];
    tx_buf[0] = 0xFF;
 80010c8:	23ff      	movs	r3, #255	@ 0xff
 80010ca:	723b      	strb	r3, [r7, #8]
    tx_buf[1] = 0xFF;
 80010cc:	23ff      	movs	r3, #255	@ 0xff
 80010ce:	727b      	strb	r3, [r7, #9]
    tx_buf[2] = 0xFF;
 80010d0:	23ff      	movs	r3, #255	@ 0xff
 80010d2:	72bb      	strb	r3, [r7, #10]
    tx_buf[3] = 0xFF;
 80010d4:	23ff      	movs	r3, #255	@ 0xff
 80010d6:	72fb      	strb	r3, [r7, #11]
    tx_buf[4] = 0xFF;
 80010d8:	23ff      	movs	r3, #255	@ 0xff
 80010da:	733b      	strb	r3, [r7, #12]
    tx_buf[5] = 0xFF;
 80010dc:	23ff      	movs	r3, #255	@ 0xff
 80010de:	737b      	strb	r3, [r7, #13]
    tx_buf[6] = 0xFF;
 80010e0:	23ff      	movs	r3, #255	@ 0xff
 80010e2:	73bb      	strb	r3, [r7, #14]
    tx_buf[7] = 0xFD;
 80010e4:	23fd      	movs	r3, #253	@ 0xfd
 80010e6:	73fb      	strb	r3, [r7, #15]

    return CAN_transmit_stdid(phcan, pTxmailBox, TEST_MOTOR_ID, tx_buf, sizeof(tx_buf));
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2208      	movs	r2, #8
 80010ee:	9200      	str	r2, [sp, #0]
 80010f0:	2201      	movs	r2, #1
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff95 	bl	8001024 <CAN_transmit_stdid>
 80010fa:	4603      	mov	r3, r0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <float_to_int>:

    return CAN_transmit_stdid(phcan, pTxmailBox, TEST_MOTOR_ID, tx_buf, sizeof(tx_buf));
}

static int float_to_int(float x, float x_min, float x_max, unsigned int bits)
{  
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	ed87 0a03 	vstr	s0, [r7, #12]
 800110e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001112:	ed87 1a01 	vstr	s2, [r7, #4]
 8001116:	6038      	str	r0, [r7, #0]
/// Converts a float to an int, given range and number of bits ///  
    float span = x_max - x_min;  
 8001118:	ed97 7a01 	vldr	s14, [r7, #4]
 800111c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001124:	edc7 7a05 	vstr	s15, [r7, #20]
    if(x < x_min) x = x_min; 
 8001128:	ed97 7a03 	vldr	s14, [r7, #12]
 800112c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d502      	bpl.n	8001140 <float_to_int+0x3c>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e00a      	b.n	8001156 <float_to_int+0x52>
    else if(x > x_max) x = x_max; 
 8001140:	ed97 7a03 	vldr	s14, [r7, #12]
 8001144:	edd7 7a01 	vldr	s15, [r7, #4]
 8001148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd01      	ble.n	8001156 <float_to_int+0x52>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]
    return (int) ((x- x_min)*((float)((1<<bits)/span))); 
 8001156:	ed97 7a03 	vldr	s14, [r7, #12]
 800115a:	edd7 7a02 	vldr	s15, [r7, #8]
 800115e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001162:	2201      	movs	r2, #1
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001172:	edd7 6a05 	vldr	s13, [r7, #20]
 8001176:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001182:	ee17 3a90 	vmov	r3, s15
} 
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <CUBEMARS_set_motion_ctrl_parameters>:
    
}

HAL_StatusTypeDef CUBEMARS_set_motion_ctrl_parameters(CAN_HandleTypeDef *phcan, uint32_t* pTxMailBox,
                float pos, float rpm, float kp, float kd, float torque)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b092      	sub	sp, #72	@ 0x48
 8001198:	af02      	add	r7, sp, #8
 800119a:	61f8      	str	r0, [r7, #28]
 800119c:	61b9      	str	r1, [r7, #24]
 800119e:	ed87 0a05 	vstr	s0, [r7, #20]
 80011a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80011a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80011aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80011ae:	ed87 2a01 	vstr	s4, [r7, #4]
    //Check if all parameters are legal
    if(
 80011b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80011ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	dc4c      	bgt.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
        pos > MAX_POS || pos < MIN_POS ||
 80011c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c8:	eeba 7a09 	vmov.f32	s14, #169	@ 0xc1480000 -12.5
 80011cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d4:	d443      	bmi.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
 80011d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011da:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	dc3a      	bgt.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
        rpm > MAX_RPM || rpm < MIN_RPM ||
 80011e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ec:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 80011f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d431      	bmi.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
 80011fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fe:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800134c <CUBEMARS_set_motion_ctrl_parameters+0x1b8>
 8001202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	dc28      	bgt.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
        kp > MAX_KP || kp < MIN_KD_KP ||
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	d421      	bmi.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
 800121a:	edd7 7a02 	vldr	s15, [r7, #8]
 800121e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	dc18      	bgt.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
        kd > MAX_KD || kd < MIN_KD_KP ||
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	d411      	bmi.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
 800123a:	edd7 7a01 	vldr	s15, [r7, #4]
 800123e:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001350 <CUBEMARS_set_motion_ctrl_parameters+0x1bc>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	dc08      	bgt.n	800125e <CUBEMARS_set_motion_ctrl_parameters+0xca>
        torque > MAX_TORQUE || torque < MIN_TORQUE
 800124c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001250:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001354 <CUBEMARS_set_motion_ctrl_parameters+0x1c0>
 8001254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d501      	bpl.n	8001262 <CUBEMARS_set_motion_ctrl_parameters+0xce>
    ){
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06f      	b.n	8001342 <CUBEMARS_set_motion_ctrl_parameters+0x1ae>
    }

    uint8_t tx_buf[8];
    int32_t pos_int = float_to_int(pos, MIN_POS, MAX_POS, 16);
 8001262:	2010      	movs	r0, #16
 8001264:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 8001268:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 800126c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001270:	f7ff ff48 	bl	8001104 <float_to_int>
 8001274:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int32_t rpm_int = float_to_int(rpm, MIN_RPM, MAX_RPM, 12);
 8001276:	200c      	movs	r0, #12
 8001278:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 800127c:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8001280:	ed97 0a04 	vldr	s0, [r7, #16]
 8001284:	f7ff ff3e 	bl	8001104 <float_to_int>
 8001288:	63b8      	str	r0, [r7, #56]	@ 0x38
    int32_t kp_int = float_to_int(kp, MIN_KD_KP, MAX_KP, 12);
 800128a:	200c      	movs	r0, #12
 800128c:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 800134c <CUBEMARS_set_motion_ctrl_parameters+0x1b8>
 8001290:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001358 <CUBEMARS_set_motion_ctrl_parameters+0x1c4>
 8001294:	ed97 0a03 	vldr	s0, [r7, #12]
 8001298:	f7ff ff34 	bl	8001104 <float_to_int>
 800129c:	6378      	str	r0, [r7, #52]	@ 0x34
    int32_t kd_int = float_to_int(kd, MIN_KD_KP, MAX_KD, 12);
 800129e:	200c      	movs	r0, #12
 80012a0:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80012a4:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8001358 <CUBEMARS_set_motion_ctrl_parameters+0x1c4>
 80012a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ac:	f7ff ff2a 	bl	8001104 <float_to_int>
 80012b0:	6338      	str	r0, [r7, #48]	@ 0x30
    int32_t torque_int = float_to_int(torque, MIN_TORQUE, MAX_TORQUE, 12);
 80012b2:	200c      	movs	r0, #12
 80012b4:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8001350 <CUBEMARS_set_motion_ctrl_parameters+0x1bc>
 80012b8:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001354 <CUBEMARS_set_motion_ctrl_parameters+0x1c0>
 80012bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80012c0:	f7ff ff20 	bl	8001104 <float_to_int>
 80012c4:	62f8      	str	r0, [r7, #44]	@ 0x2c

    tx_buf[0] = (pos_int >> 8) & 0xFF;
 80012c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012c8:	121b      	asrs	r3, r3, #8
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    tx_buf[1] = pos_int & 0xFF;
 80012d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    tx_buf[2] = (rpm_int >> 8) & 0xFF;
 80012d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012da:	121b      	asrs	r3, r3, #8
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    tx_buf[3] = ((rpm_int & 0xF) << 4) | ((kp_int >> 8) & 0xF); 
 80012e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ea:	121b      	asrs	r3, r3, #8
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tx_buf[4] = (kp_int & 0xFF);
 80012fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    tx_buf[5] = (kd_int >> 4) & 0xFF;
 8001306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001308:	111b      	asrs	r3, r3, #4
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    tx_buf[6] = ((kd_int & 0xF) << 4) | (torque_int >> 8);
 8001310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b25a      	sxtb	r2, r3
 8001316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001318:	121b      	asrs	r3, r3, #8
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    tx_buf[7] = torque_int & 0xFF;
 8001326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    return CAN_transmit_stdid(phcan, pTxMailBox, TEST_MOTOR_ID, tx_buf, sizeof(tx_buf));
 800132e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001332:	2208      	movs	r2, #8
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	69b9      	ldr	r1, [r7, #24]
 800133a:	69f8      	ldr	r0, [r7, #28]
 800133c:	f7ff fe72 	bl	8001024 <CAN_transmit_stdid>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3740      	adds	r7, #64	@ 0x40
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	43fa0000 	.word	0x43fa0000
 8001350:	42080000 	.word	0x42080000
 8001354:	c2080000 	.word	0xc2080000
 8001358:	00000000 	.word	0x00000000

0800135c <can_motor_init>:

motor_t motors[5]; //By default we assume 5 motors will be connected to the chain


void can_motor_init()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof motors ; i ++){
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	e037      	b.n	80013d8 <can_motor_init+0x7c>
		motors[i].id = i + 1;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	3301      	adds	r3, #1
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	491d      	ldr	r1, [pc, #116]	@ (80013e8 <can_motor_init+0x8c>)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	4602      	mov	r2, r0
 8001380:	701a      	strb	r2, [r3, #0]
		motors[i].master_id = CAN_master_id;
 8001382:	4919      	ldr	r1, [pc, #100]	@ (80013e8 <can_motor_init+0x8c>)
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	3302      	adds	r3, #2
 8001392:	22fd      	movs	r2, #253	@ 0xfd
 8001394:	801a      	strh	r2, [r3, #0]
		motors[i].motor_mode = MIT_MODE;
 8001396:	4914      	ldr	r1, [pc, #80]	@ (80013e8 <can_motor_init+0x8c>)
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	330b      	adds	r3, #11
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

		can_enable_motor(motors[i].id, motors[i].master_id);
 80013aa:	490f      	ldr	r1, [pc, #60]	@ (80013e8 <can_motor_init+0x8c>)
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	7818      	ldrb	r0, [r3, #0]
 80013ba:	490b      	ldr	r1, [pc, #44]	@ (80013e8 <can_motor_init+0x8c>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3302      	adds	r3, #2
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f000 fadf 	bl	8001990 <can_enable_motor>
	for (int i = 0; i < sizeof motors ; i ++){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2bb3      	cmp	r3, #179	@ 0xb3
 80013dc:	d9c4      	bls.n	8001368 <can_motor_init+0xc>
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000324 	.word	0x20000324

080013ec <HAL_CAN_RxFifo0MsgPendingCallback>:




void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80013ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f0:	b08c      	sub	sp, #48	@ 0x30
 80013f2:	af08      	add	r7, sp, #32
 80013f4:	6078      	str	r0, [r7, #4]

  HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rs_can_rx_header, recv_msg);
 80013f6:	4b3a      	ldr	r3, [pc, #232]	@ (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80013f8:	4a3a      	ldr	r2, [pc, #232]	@ (80014e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f001 fe2c 	bl	800305a <HAL_CAN_GetRxMessage>
  uint8_t motor_id = rs_can_rx_header.ExtId & 0xFF;
 8001402:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  snprintf(uart_msg, sizeof uart_msg, "Motor #%d Feedback Received:\n", motor_id);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4a37      	ldr	r2, [pc, #220]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800140c:	2164      	movs	r1, #100	@ 0x64
 800140e:	4837      	ldr	r0, [pc, #220]	@ (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001410:	f005 fc2a 	bl	8006c68 <sniprintf>
  HAL_UART_Transmit(&huart2, recv_msg, strlen(recv_msg), HAL_MAX_DELAY);
 8001414:	4832      	ldr	r0, [pc, #200]	@ (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001416:	f7fe ff4b 	bl	80002b0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	492f      	ldr	r1, [pc, #188]	@ (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001424:	4832      	ldr	r0, [pc, #200]	@ (80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8001426:	f003 fa87 	bl	8004938 <HAL_UART_Transmit>
  can_unpack_motor_feedback(&motors[(motor_id) - 1], recv_msg);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	1e5a      	subs	r2, r3, #1
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4a2f      	ldr	r2, [pc, #188]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001438:	4413      	add	r3, r2
 800143a:	4929      	ldr	r1, [pc, #164]	@ (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fbc3 	bl	8001bc8 <can_unpack_motor_feedback>
  snprintf(uart_msg, sizeof(uart_msg), "RS Feedback:\r\n temp=%.1f, pos=%.3f, rpm=%.3f, torq=%.3f\n\r",
		  motors[motor_id - 1].temperature, motors[motor_id - 1].pos, motors[motor_id - 1].rpm,
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	492b      	ldr	r1, [pc, #172]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	330c      	adds	r3, #12
 8001454:	681b      	ldr	r3, [r3, #0]
  snprintf(uart_msg, sizeof(uart_msg), "RS Feedback:\r\n temp=%.1f, pos=%.3f, rpm=%.3f, torq=%.3f\n\r",
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f896 	bl	8000588 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
		  motors[motor_id - 1].temperature, motors[motor_id - 1].pos, motors[motor_id - 1].rpm,
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	4923      	ldr	r1, [pc, #140]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3310      	adds	r3, #16
 8001472:	681b      	ldr	r3, [r3, #0]
  snprintf(uart_msg, sizeof(uart_msg), "RS Feedback:\r\n temp=%.1f, pos=%.3f, rpm=%.3f, torq=%.3f\n\r",
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f887 	bl	8000588 <__aeabi_f2d>
 800147a:	4680      	mov	r8, r0
 800147c:	4689      	mov	r9, r1
		  motors[motor_id - 1].temperature, motors[motor_id - 1].pos, motors[motor_id - 1].rpm,
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	491c      	ldr	r1, [pc, #112]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3314      	adds	r3, #20
 8001490:	681b      	ldr	r3, [r3, #0]
  snprintf(uart_msg, sizeof(uart_msg), "RS Feedback:\r\n temp=%.1f, pos=%.3f, rpm=%.3f, torq=%.3f\n\r",
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f878 	bl	8000588 <__aeabi_f2d>
 8001498:	4682      	mov	sl, r0
 800149a:	468b      	mov	fp, r1
		  motors[motor_id - 1].torq);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	1e5a      	subs	r2, r3, #1
 80014a0:	4914      	ldr	r1, [pc, #80]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3320      	adds	r3, #32
 80014ae:	681b      	ldr	r3, [r3, #0]
  snprintf(uart_msg, sizeof(uart_msg), "RS Feedback:\r\n temp=%.1f, pos=%.3f, rpm=%.3f, torq=%.3f\n\r",
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f869 	bl	8000588 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014be:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80014c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014c6:	e9cd 4500 	strd	r4, r5, [sp]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80014cc:	2164      	movs	r1, #100	@ 0x64
 80014ce:	4807      	ldr	r0, [pc, #28]	@ (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80014d0:	f005 fbca 	bl	8006c68 <sniprintf>
//  can_receive_flag = 1;
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014de:	bf00      	nop
 80014e0:	200002b4 	.word	0x200002b4
 80014e4:	200003d8 	.word	0x200003d8
 80014e8:	08009a28 	.word	0x08009a28
 80014ec:	200002bc 	.word	0x200002bc
 80014f0:	20000268 	.word	0x20000268
 80014f4:	20000324 	.word	0x20000324
 80014f8:	08009a48 	.word	0x08009a48

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b09a      	sub	sp, #104	@ 0x68
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001502:	f001 fb05 	bl	8002b10 <HAL_Init>

  /* USER CODE BEGIN Init */
  can_receive_flag = 0;
 8001506:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <main+0x100>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150c:	f000 f884 	bl	8001618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001510:	f000 f950 	bl	80017b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001514:	f000 f924 	bl	8001760 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001518:	f000 f8ec 	bl	80016f4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK){
 800151c:	4838      	ldr	r0, [pc, #224]	@ (8001600 <main+0x104>)
 800151e:	f001 fc88 	bl	8002e32 <HAL_CAN_Start>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <main+0x30>
     return 1;
 8001528:	2301      	movs	r3, #1
 800152a:	e063      	b.n	80015f4 <main+0xf8>
   }
   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800152c:	2102      	movs	r1, #2
 800152e:	4834      	ldr	r0, [pc, #208]	@ (8001600 <main+0x104>)
 8001530:	f001 feb5 	bl	800329e <HAL_CAN_ActivateNotification>
     since we have turned on thee RX fifo0 intr, RXfifo msg pending callback will be called once incoming data was stored in the RX FIFO0
     count will increment
   */
//   can_enable_motor(RS_test_motor_id, CAN_master_id);
//   HAL_Delay(1000);
   can_motor_init();
 8001534:	f7ff ff12 	bl	800135c <can_motor_init>
   HAL_Delay(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f001 fb5b 	bl	8002bf4 <HAL_Delay>
   can_mit_control_set(motors[0].id, 0, 0, 10, 0, 5);
 800153e:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <main+0x108>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	eeb1 2a04 	vmov.f32	s4, #20	@ 0x40a00000  5.0
 8001546:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8001608 <main+0x10c>
 800154a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800154e:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8001608 <main+0x10c>
 8001552:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001608 <main+0x10c>
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fa4c 	bl	80019f4 <can_mit_control_set>
   can_mit_control_set(motors[1].id, 0, 0, 2, 0, 5);
 800155c:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <main+0x108>)
 800155e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001562:	eeb1 2a04 	vmov.f32	s4, #20	@ 0x40a00000  5.0
 8001566:	eddf 1a28 	vldr	s3, [pc, #160]	@ 8001608 <main+0x10c>
 800156a:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800156e:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001608 <main+0x10c>
 8001572:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001608 <main+0x10c>
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fa3c 	bl	80019f4 <can_mit_control_set>
	      //     HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
	      //   }
	      //     CUBEMARS_enable_motion_ctrl(&hcan1, &TxMailbox);
	      //   cur_pos = -cur_pos;
	      // }
	      snprintf(uart_msg, sizeof(uart_msg), "uart-cmd$: ");
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <main+0x110>)
 8001580:	2164      	movs	r1, #100	@ 0x64
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fb70 	bl	8006c68 <sniprintf>
	      HAL_UART_Transmit(&huart2, uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe90 	bl	80002b0 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	1d39      	adds	r1, r7, #4
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	481d      	ldr	r0, [pc, #116]	@ (8001610 <main+0x114>)
 800159c:	f003 f9cc 	bl	8004938 <HAL_UART_Transmit>
	      if(uart_get_new_line(&huart2, uart_msg, sizeof(uart_msg))!=HAL_OK){
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2264      	movs	r2, #100	@ 0x64
 80015a4:	4619      	mov	r1, r3
 80015a6:	481a      	ldr	r0, [pc, #104]	@ (8001610 <main+0x114>)
 80015a8:	f000 fd64 	bl	8002074 <uart_get_new_line>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d014      	beq.n	80015dc <main+0xe0>
	        snprintf(uart_msg, sizeof(uart_msg), "UART error\r\n");
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4a17      	ldr	r2, [pc, #92]	@ (8001614 <main+0x118>)
 80015b6:	2164      	movs	r1, #100	@ 0x64
 80015b8:	4618      	mov	r0, r3
 80015ba:	f005 fb55 	bl	8006c68 <sniprintf>
	        HAL_UART_Transmit(&huart2, uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fe75 	bl	80002b0 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	1d39      	adds	r1, r7, #4
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	480f      	ldr	r0, [pc, #60]	@ (8001610 <main+0x114>)
 80015d2:	f003 f9b1 	bl	8004938 <HAL_UART_Transmit>
	        return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e00b      	b.n	80015f4 <main+0xf8>
	      }
	      uart_parse_cmd(&huart2, uart_msg, strlen(uart_msg));
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fe66 	bl	80002b0 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4808      	ldr	r0, [pc, #32]	@ (8001610 <main+0x114>)
 80015ee:	f000 fd75 	bl	80020dc <uart_parse_cmd>
	      snprintf(uart_msg, sizeof(uart_msg), "uart-cmd$: ");
 80015f2:	e7c3      	b.n	800157c <main+0x80>


  }
  /* USER CODE END 3 */
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3768      	adds	r7, #104	@ 0x68
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000320 	.word	0x20000320
 8001600:	20000240 	.word	0x20000240
 8001604:	20000324 	.word	0x20000324
 8001608:	00000000 	.word	0x00000000
 800160c:	08009a84 	.word	0x08009a84
 8001610:	20000268 	.word	0x20000268
 8001614:	08009a90 	.word	0x08009a90

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b094      	sub	sp, #80	@ 0x50
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	2234      	movs	r2, #52	@ 0x34
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f005 fbb5 	bl	8006d96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <SystemClock_Config+0xd4>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <SystemClock_Config+0xd4>)
 8001646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164a:	6413      	str	r3, [r2, #64]	@ 0x40
 800164c:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <SystemClock_Config+0xd4>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001658:	2300      	movs	r3, #0
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <SystemClock_Config+0xd8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001664:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <SystemClock_Config+0xd8>)
 8001666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <SystemClock_Config+0xd8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001680:	2310      	movs	r3, #16
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001684:	2302      	movs	r3, #2
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001688:	2300      	movs	r3, #0
 800168a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800168c:	2310      	movs	r3, #16
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001690:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001694:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001696:	2304      	movs	r3, #4
 8001698:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800169a:	2302      	movs	r3, #2
 800169c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800169e:	2302      	movs	r3, #2
 80016a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 fe58 	bl	800435c <HAL_RCC_OscConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016b2:	f000 f8ed 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	230f      	movs	r3, #15
 80016b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ba:	2302      	movs	r3, #2
 80016bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	2102      	movs	r1, #2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 faf8 	bl	8003cc8 <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80016de:	f000 f8d7 	bl	8001890 <Error_Handler>
  }
}
 80016e2:	bf00      	nop
 80016e4:	3750      	adds	r7, #80	@ 0x50
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000

080016f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_CAN1_Init+0x64>)
 80016fa:	4a18      	ldr	r2, [pc, #96]	@ (800175c <MX_CAN1_Init+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001700:	2202      	movs	r2, #2
 8001702:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <MX_CAN1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001712:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8001716:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_CAN1_Init+0x64>)
 800171a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800171e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <MX_CAN1_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <MX_CAN1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	@ (8001758 <MX_CAN1_Init+0x64>)
 8001746:	f001 fa79 	bl	8002c3c <HAL_CAN_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001750:	f000 f89e 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000240 	.word	0x20000240
 800175c:	40006400 	.word	0x40006400

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f003 f87e 	bl	8004898 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f875 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000268 	.word	0x20000268
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <MX_GPIO_Init+0xd0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001884 <MX_GPIO_Init+0xd0>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <MX_GPIO_Init+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <MX_GPIO_Init+0xd0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <MX_GPIO_Init+0xd0>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <MX_GPIO_Init+0xd0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a1e      	ldr	r2, [pc, #120]	@ (8001884 <MX_GPIO_Init+0xd0>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <MX_GPIO_Init+0xd0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <MX_GPIO_Init+0xd0>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <MX_GPIO_Init+0xd0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2120      	movs	r1, #32
 800183e:	4812      	ldr	r0, [pc, #72]	@ (8001888 <MX_GPIO_Init+0xd4>)
 8001840:	f002 fa28 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	480c      	ldr	r0, [pc, #48]	@ (800188c <MX_GPIO_Init+0xd8>)
 800185c:	f002 f886 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001860:	2320      	movs	r3, #32
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4804      	ldr	r0, [pc, #16]	@ (8001888 <MX_GPIO_Init+0xd4>)
 8001878:	f002 f878 	bl	800396c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	@ 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020800 	.word	0x40020800

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <Error_Handler+0x8>

0800189c <float_to_uint>:
 #define txCanIdEx (*((exCanIdInfo*)&(rs_can_tx_header.ExtId)))
 #define rxCanIdEx (*((exCanIdInfo*)&(rs_can_rx_header.ExtId)))

//Helper Function Definitions
static int float_to_uint(float x, float x_min, float x_max, unsigned int bits)
{  
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80018a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80018aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80018ae:	6038      	str	r0, [r7, #0]
/// Converts a float to an int, given range and number of bits ///  
    float span = x_max - x_min;  
 80018b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80018b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018bc:	edc7 7a05 	vstr	s15, [r7, #20]
    if(x < x_min) x = x_min; 
 80018c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d502      	bpl.n	80018d8 <float_to_uint+0x3c>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e00a      	b.n	80018ee <float_to_uint+0x52>
    else if(x > x_max) x = x_max; 
 80018d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80018dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	dd01      	ble.n	80018ee <float_to_uint+0x52>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
    return (int) ((x- x_min)*((float)((1<<bits)/span))); 
 80018ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fa:	2201      	movs	r2, #1
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800190a:	edd7 6a05 	vldr	s13, [r7, #20]
 800190e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191a:	ee17 3a90 	vmov	r3, s15
} 
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <uint_to_float>:

static float uint_to_float(int x_int, float x_min, float x_max, int bits)
{
 800192a:	b480      	push	{r7}
 800192c:	b087      	sub	sp, #28
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	ed87 0a02 	vstr	s0, [r7, #8]
 8001936:	edc7 0a01 	vstr	s1, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
 /// converts unsigned int to float, given range and number of bits ///
    float span = x_max- x_min;
 800193c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001948:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195a:	edd7 7a05 	vldr	s15, [r7, #20]
 800195e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001962:	2201      	movs	r2, #1
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001978:	edd7 7a04 	vldr	s15, [r7, #16]
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001980:	eeb0 0a67 	vmov.f32	s0, s15
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <can_enable_motor>:

//Comm Type 3
HAL_StatusTypeDef can_enable_motor(uint8_t id, uint16_t master_id)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	460a      	mov	r2, r1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	4613      	mov	r3, r2
 800199e:	80bb      	strh	r3, [r7, #4]
    char msg[8];
    txCanIdEx.mode = 3;
 80019a0:	4a10      	ldr	r2, [pc, #64]	@ (80019e4 <can_enable_motor+0x54>)
 80019a2:	78d3      	ldrb	r3, [r2, #3]
 80019a4:	2103      	movs	r1, #3
 80019a6:	f361 0304 	bfi	r3, r1, #0, #5
 80019aa:	70d3      	strb	r3, [r2, #3]
    txCanIdEx.id = id;
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <can_enable_motor+0x54>)
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	7013      	strb	r3, [r2, #0]
    txCanIdEx.res = 0;
 80019b2:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <can_enable_motor+0x54>)
 80019b4:	78d3      	ldrb	r3, [r2, #3]
 80019b6:	f36f 1347 	bfc	r3, #5, #3
 80019ba:	70d3      	strb	r3, [r2, #3]
    txCanIdEx.data = master_id; 
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <can_enable_motor+0x54>)
 80019be:	88ba      	ldrh	r2, [r7, #4]
 80019c0:	f8a3 2001 	strh.w	r2, [r3, #1]
    // txCanIdEx.data = 0; //For some reason we have this on the datasheet
    rs_can_tx_header.DLC = 8;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <can_enable_motor+0x58>)
 80019c6:	2208      	movs	r2, #8
 80019c8:	611a      	str	r2, [r3, #16]

    return HAL_CAN_AddTxMessage(&hcan1, &rs_can_tx_header, (const uint8_t*)msg, &TxMailbox);   
 80019ca:	f107 0208 	add.w	r2, r7, #8
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <can_enable_motor+0x5c>)
 80019d0:	4905      	ldr	r1, [pc, #20]	@ (80019e8 <can_enable_motor+0x58>)
 80019d2:	4807      	ldr	r0, [pc, #28]	@ (80019f0 <can_enable_motor+0x60>)
 80019d4:	f001 fa71 	bl	8002eba <HAL_CAN_AddTxMessage>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000004 	.word	0x20000004
 80019e8:	20000000 	.word	0x20000000
 80019ec:	200002b0 	.word	0x200002b0
 80019f0:	20000240 	.word	0x20000240

080019f4 <can_mit_control_set>:

//Comm Type 1
HAL_StatusTypeDef can_mit_control_set(uint8_t id, float torque, float MechPosition, float speed, float kp, float kd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a00:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a04:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a08:	edc7 1a01 	vstr	s3, [r7, #4]
 8001a0c:	ed87 2a00 	vstr	s4, [r7]
 8001a10:	75fb      	strb	r3, [r7, #23]
    uint8_t msg[8];
    //set txID
    txCanIdEx.mode = 1;
 8001a12:	4a47      	ldr	r2, [pc, #284]	@ (8001b30 <can_mit_control_set+0x13c>)
 8001a14:	78d3      	ldrb	r3, [r2, #3]
 8001a16:	2101      	movs	r1, #1
 8001a18:	f361 0304 	bfi	r3, r1, #0, #5
 8001a1c:	70d3      	strb	r3, [r2, #3]
    txCanIdEx.id = id;
 8001a1e:	4a44      	ldr	r2, [pc, #272]	@ (8001b30 <can_mit_control_set+0x13c>)
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	7013      	strb	r3, [r2, #0]
    txCanIdEx.data = float_to_uint(torque, T_MIN, T_MAX, 16);
 8001a24:	2010      	movs	r0, #16
 8001a26:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8001b34 <can_mit_control_set+0x140>
 8001a2a:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8001b38 <can_mit_control_set+0x144>
 8001a2e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a32:	f7ff ff33 	bl	800189c <float_to_uint>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b3d      	ldr	r3, [pc, #244]	@ (8001b30 <can_mit_control_set+0x13c>)
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	f8a3 2001 	strh.w	r2, [r3, #1]
    txCanIdEx.res = 0;
 8001a40:	4a3b      	ldr	r2, [pc, #236]	@ (8001b30 <can_mit_control_set+0x13c>)
 8001a42:	78d3      	ldrb	r3, [r2, #3]
 8001a44:	f36f 1347 	bfc	r3, #5, #3
 8001a48:	70d3      	strb	r3, [r2, #3]

    rs_can_tx_header.DLC = 8;
 8001a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b3c <can_mit_control_set+0x148>)
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	611a      	str	r2, [r3, #16]

    msg[0] = float_to_uint(MechPosition, P_MIN, P_MAX, 16) >> 8;
 8001a50:	2010      	movs	r0, #16
 8001a52:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 8001b40 <can_mit_control_set+0x14c>
 8001a56:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8001b44 <can_mit_control_set+0x150>
 8001a5a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a5e:	f7ff ff1d 	bl	800189c <float_to_uint>
 8001a62:	4603      	mov	r3, r0
 8001a64:	121b      	asrs	r3, r3, #8
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	763b      	strb	r3, [r7, #24]
    msg[1] = float_to_uint(MechPosition, P_MIN, P_MAX, 16) & 0xFF;
 8001a6a:	2010      	movs	r0, #16
 8001a6c:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8001b40 <can_mit_control_set+0x14c>
 8001a70:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001b44 <can_mit_control_set+0x150>
 8001a74:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a78:	f7ff ff10 	bl	800189c <float_to_uint>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	767b      	strb	r3, [r7, #25]
    msg[2] = float_to_uint(speed, V_MIN, V_MAX, 16) >> 8;
 8001a82:	2010      	movs	r0, #16
 8001a84:	eeb3 1a04 	vmov.f32	s2, #52	@ 0x41a00000  20.0
 8001a88:	eefb 0a04 	vmov.f32	s1, #180	@ 0xc1a00000 -20.0
 8001a8c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a90:	f7ff ff04 	bl	800189c <float_to_uint>
 8001a94:	4603      	mov	r3, r0
 8001a96:	121b      	asrs	r3, r3, #8
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	76bb      	strb	r3, [r7, #26]
    msg[3] = float_to_uint(speed, V_MIN, V_MAX, 16) & 0xFF;
 8001a9c:	2010      	movs	r0, #16
 8001a9e:	eeb3 1a04 	vmov.f32	s2, #52	@ 0x41a00000  20.0
 8001aa2:	eefb 0a04 	vmov.f32	s1, #180	@ 0xc1a00000 -20.0
 8001aa6:	ed97 0a02 	vldr	s0, [r7, #8]
 8001aaa:	f7ff fef7 	bl	800189c <float_to_uint>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	76fb      	strb	r3, [r7, #27]
    msg[4] = float_to_uint(kp, KP_MIN, KP_MAX, 16) >> 8;
 8001ab4:	2010      	movs	r0, #16
 8001ab6:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8001b48 <can_mit_control_set+0x154>
 8001aba:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8001b4c <can_mit_control_set+0x158>
 8001abe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ac2:	f7ff feeb 	bl	800189c <float_to_uint>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	121b      	asrs	r3, r3, #8
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	773b      	strb	r3, [r7, #28]
    msg[5] = float_to_uint(kp, KP_MIN, KP_MAX, 16) & 0xFF;
 8001ace:	2010      	movs	r0, #16
 8001ad0:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 8001b48 <can_mit_control_set+0x154>
 8001ad4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001b4c <can_mit_control_set+0x158>
 8001ad8:	ed97 0a01 	vldr	s0, [r7, #4]
 8001adc:	f7ff fede 	bl	800189c <float_to_uint>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	777b      	strb	r3, [r7, #29]
    msg[6] = float_to_uint(kd, KD_MIN, KD_MAX, 16) >> 8;
 8001ae6:	2010      	movs	r0, #16
 8001ae8:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8001b50 <can_mit_control_set+0x15c>
 8001aec:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8001b4c <can_mit_control_set+0x158>
 8001af0:	ed97 0a00 	vldr	s0, [r7]
 8001af4:	f7ff fed2 	bl	800189c <float_to_uint>
 8001af8:	4603      	mov	r3, r0
 8001afa:	121b      	asrs	r3, r3, #8
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	77bb      	strb	r3, [r7, #30]
    msg[7] = float_to_uint(kd, KD_MIN, KD_MAX, 16) & 0xFF;
 8001b00:	2010      	movs	r0, #16
 8001b02:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001b50 <can_mit_control_set+0x15c>
 8001b06:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001b4c <can_mit_control_set+0x158>
 8001b0a:	ed97 0a00 	vldr	s0, [r7]
 8001b0e:	f7ff fec5 	bl	800189c <float_to_uint>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	77fb      	strb	r3, [r7, #31]
    return HAL_CAN_AddTxMessage(&hcan1, &rs_can_tx_header, msg, &TxMailbox);
 8001b18:	f107 0218 	add.w	r2, r7, #24
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <can_mit_control_set+0x160>)
 8001b1e:	4907      	ldr	r1, [pc, #28]	@ (8001b3c <can_mit_control_set+0x148>)
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <can_mit_control_set+0x164>)
 8001b22:	f001 f9ca 	bl	8002eba <HAL_CAN_AddTxMessage>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000004 	.word	0x20000004
 8001b34:	42700000 	.word	0x42700000
 8001b38:	c2700000 	.word	0xc2700000
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	41491eb8 	.word	0x41491eb8
 8001b44:	c1491eb8 	.word	0xc1491eb8
 8001b48:	459c4000 	.word	0x459c4000
 8001b4c:	00000000 	.word	0x00000000
 8001b50:	42c80000 	.word	0x42c80000
 8001b54:	200002b0 	.word	0x200002b0
 8001b58:	20000240 	.word	0x20000240

08001b5c <can_disable_motor>:

//Comm Type 4
HAL_StatusTypeDef can_disable_motor(uint8_t id, uint16_t master_id)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	460a      	mov	r2, r1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	80bb      	strh	r3, [r7, #4]
    txCanIdEx.mode = 4;
 8001b6c:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <can_disable_motor+0x5c>)
 8001b6e:	78d3      	ldrb	r3, [r2, #3]
 8001b70:	2104      	movs	r1, #4
 8001b72:	f361 0304 	bfi	r3, r1, #0, #5
 8001b76:	70d3      	strb	r3, [r2, #3]
    txCanIdEx.id = id;
 8001b78:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb8 <can_disable_motor+0x5c>)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	7013      	strb	r3, [r2, #0]
    txCanIdEx.data = master_id;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <can_disable_motor+0x5c>)
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	f8a3 2001 	strh.w	r2, [r3, #1]
    txCanIdEx.res = 0;
 8001b86:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <can_disable_motor+0x5c>)
 8001b88:	78d3      	ldrb	r3, [r2, #3]
 8001b8a:	f36f 1347 	bfc	r3, #5, #3
 8001b8e:	70d3      	strb	r3, [r2, #3]

    uint8_t msg[8] = {0x0};
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]

    rs_can_tx_header.DLC = 8;
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <can_disable_motor+0x60>)
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	611a      	str	r2, [r3, #16]

    return HAL_CAN_AddTxMessage(&hcan1, &rs_can_tx_header, msg, &TxMailbox);
 8001b9e:	f107 0208 	add.w	r2, r7, #8
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <can_disable_motor+0x64>)
 8001ba4:	4905      	ldr	r1, [pc, #20]	@ (8001bbc <can_disable_motor+0x60>)
 8001ba6:	4807      	ldr	r0, [pc, #28]	@ (8001bc4 <can_disable_motor+0x68>)
 8001ba8:	f001 f987 	bl	8002eba <HAL_CAN_AddTxMessage>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	200002b0 	.word	0x200002b0
 8001bc4:	20000240 	.word	0x20000240

08001bc8 <can_unpack_motor_feedback>:
    return HAL_CAN_AddTxMessage(&hcan1, &rs_can_tx_header, msg, &TxMailbox);
}

//Comm Type 2 -> Rx side. Called when verified Can Msg mode 0x2 in the Callback function  
HAL_StatusTypeDef can_unpack_motor_feedback(motor_t* motor, uint8_t* recv_buf) //may need to revise 
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
    if ((rxCanIdEx.data & MOTOR_FEEDBACK_MASK_ID) >> MOTOR_FEEDBACK_ID_OFFSET != motor -> id){
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <can_unpack_motor_feedback+0xf4>)
 8001bd4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d001      	beq.n	8001bea <can_unpack_motor_feedback+0x22>
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e063      	b.n	8001cb2 <can_unpack_motor_feedback+0xea>
    }
    //update error status
    motor -> motor_errors.driver_fault = (rxCanIdEx.data & MOTOR_ERROR_MASK_DRIVER_FAULT)>>MOTOR_ERROR_OFFSET_DRIVER_FAULT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	725a      	strb	r2, [r3, #9]
    motor -> motor_errors.uncalibrated = (rxCanIdEx.data & MOTOR_ERROR_MASK_UNCALIBRATED) >> MOTOR_ERROR_OFFSET_UNCALIBRATED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	715a      	strb	r2, [r3, #5]
    motor -> motor_errors.stall_overload = (rxCanIdEx.data & MOTOR_ERROR_MASK_STALL_OVERLOAD) >> MOTOR_ERROR_OFFSET_STALL_OVERLOAD;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	719a      	strb	r2, [r3, #6]
    motor -> motor_errors.encoder_fault = (rxCanIdEx.data & MOTOR_ERROR_MASK_ENCODER_FAULT) >> MOTOR_ERROR_OFFSET_ENCODER_FAULT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	71da      	strb	r2, [r3, #7]
    motor -> motor_errors.overheat = (rxCanIdEx.data & MOTOR_ERROR_MASK_OVERHEAT) >> MOTOR_ERROR_OFFSET_OVERHEAT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	721a      	strb	r2, [r3, #8]
    motor -> motor_errors.undervoltage = (rxCanIdEx.data & MOTOR_ERROR_MASK_UNDERVOLTAGE) >> MOTOR_ERROR_OFFSET_UNDERVOLTAGE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	729a      	strb	r2, [r3, #10]

    motor -> pos = uint_to_float(recv_buf[1] << 8 | recv_buf[0], P_MIN, P_MAX, 16);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001cc0 <can_unpack_motor_feedback+0xf8>
 8001c22:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001cc4 <can_unpack_motor_feedback+0xfc>
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fe7f 	bl	800192a <uint_to_float>
 8001c2c:	eef0 7a40 	vmov.f32	s15, s0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	edc3 7a04 	vstr	s15, [r3, #16]
    motor -> rpm = uint_to_float(recv_buf[3] << 8 | recv_buf[2], V_MIN, V_MAX, 16);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3303      	adds	r3, #3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	3202      	adds	r2, #2
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	2110      	movs	r1, #16
 8001c48:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001c4c:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fe6a 	bl	800192a <uint_to_float>
 8001c56:	eef0 7a40 	vmov.f32	s15, s0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edc3 7a05 	vstr	s15, [r3, #20]
    motor -> torq = uint_to_float(recv_buf[5] << 8 | recv_buf[4], T_MIN, T_MAX, 16);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3305      	adds	r3, #5
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	3204      	adds	r2, #4
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	2110      	movs	r1, #16
 8001c72:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8001cc8 <can_unpack_motor_feedback+0x100>
 8001c76:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001ccc <can_unpack_motor_feedback+0x104>
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe55 	bl	800192a <uint_to_float>
 8001c80:	eef0 7a40 	vmov.f32	s15, s0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	edc3 7a08 	vstr	s15, [r3, #32]
    motor -> temperature = (float)(recv_buf[7] << 8 | recv_buf[6]) / 10.0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	3206      	adds	r2, #6
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edc3 7a03 	vstr	s15, [r3, #12]
    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200003dc 	.word	0x200003dc
 8001cc0:	41491eb8 	.word	0x41491eb8
 8001cc4:	c1491eb8 	.word	0xc1491eb8
 8001cc8:	42700000 	.word	0x42700000
 8001ccc:	c2700000 	.word	0xc2700000

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d0e:	2007      	movs	r0, #7
 8001d10:	f001 fdea 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_CAN_MspInit+0x94>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d134      	bne.n	8001dac <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <HAL_CAN_MspInit+0x98>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001db8 <HAL_CAN_MspInit+0x98>)
 8001d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_CAN_MspInit+0x98>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_CAN_MspInit+0x98>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <HAL_CAN_MspInit+0x98>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_CAN_MspInit+0x98>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d8c:	2309      	movs	r3, #9
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4809      	ldr	r0, [pc, #36]	@ (8001dbc <HAL_CAN_MspInit+0x9c>)
 8001d98:	f001 fde8 	bl	800396c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2014      	movs	r0, #20
 8001da2:	f001 fdac 	bl	80038fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001da6:	2014      	movs	r0, #20
 8001da8:	f001 fdc5 	bl	8003936 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	@ 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40006400 	.word	0x40006400
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_UART_MspInit+0x84>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12b      	bne.n	8001e3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_UART_MspInit+0x88>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	4a17      	ldr	r2, [pc, #92]	@ (8001e48 <HAL_UART_MspInit+0x88>)
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_UART_MspInit+0x88>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_UART_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a10      	ldr	r2, [pc, #64]	@ (8001e48 <HAL_UART_MspInit+0x88>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <HAL_UART_MspInit+0x88>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <HAL_UART_MspInit+0x8c>)
 8001e36:	f001 fd99 	bl	800396c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	@ 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40004400 	.word	0x40004400
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <NMI_Handler+0x4>

08001e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <MemManage_Handler+0x4>

08001e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea6:	f000 fe85 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <CAN1_RX0_IRQHandler+0x10>)
 8001eb6:	f001 fa18 	bl	80032ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000240 	.word	0x20000240

08001ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return 1;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_kill>:

int _kill(int pid, int sig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ede:	f005 f82d 	bl	8006f3c <__errno>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2216      	movs	r2, #22
 8001ee6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_exit>:

void _exit (int status)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ffe7 	bl	8001ed4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f06:	bf00      	nop
 8001f08:	e7fd      	b.n	8001f06 <_exit+0x12>

08001f0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e00a      	b.n	8001f32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f1c:	f3af 8000 	nop.w
 8001f20:	4601      	mov	r1, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	b2ca      	uxtb	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbf0      	blt.n	8001f1c <_read+0x12>
  }

  return len;
 8001f3a:	687b      	ldr	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e009      	b.n	8001f6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	60ba      	str	r2, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbf1      	blt.n	8001f56 <_write+0x12>
  }
  return len;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_close>:

int _close(int file)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa4:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_isatty>:

int _isatty(int file)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fbc:	2301      	movs	r3, #1
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f004 ff92 	bl	8006f3c <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20020000 	.word	0x20020000
 8002044:	00000400 	.word	0x00000400
 8002048:	200003f4 	.word	0x200003f4
 800204c:	20000548 	.word	0x20000548

08002050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <SystemInit+0x20>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <SystemInit+0x20>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <uart_get_new_line>:
    {"kd" , 0.0},
    {"torq", 0.0}
};

HAL_StatusTypeDef uart_get_new_line(UART_HandleTypeDef* phuart, char* msg_buf, int buf_maxlen)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    int n = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
    char ch;
    while (n < buf_maxlen - 1){
 8002084:	e01a      	b.n	80020bc <uart_get_new_line+0x48>
        if (HAL_UART_Receive(phuart, (uint8_t*)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {return HAL_ERROR;}
 8002086:	f107 0113 	add.w	r1, r7, #19
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	2201      	movs	r2, #1
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f002 fcdc 	bl	8004a4e <HAL_UART_Receive>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <uart_get_new_line+0x2c>
 800209c:	2301      	movs	r3, #1
 800209e:	e018      	b.n	80020d2 <uart_get_new_line+0x5e>
        msg_buf[n] = ch;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	4413      	add	r3, r2
 80020a6:	7cfa      	ldrb	r2, [r7, #19]
 80020a8:	701a      	strb	r2, [r3, #0]
        n ++;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
        if (ch == '\n' || ch == '\r'){
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b0a      	cmp	r3, #10
 80020b4:	d007      	beq.n	80020c6 <uart_get_new_line+0x52>
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	2b0d      	cmp	r3, #13
 80020ba:	d004      	beq.n	80020c6 <uart_get_new_line+0x52>
    while (n < buf_maxlen - 1){
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbdf      	blt.n	8002086 <uart_get_new_line+0x12>
            break;
        }
    }

    msg_buf[n] = '\0';
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <uart_parse_cmd>:
         send -> send MIT parameters to the motor
         set <pos> <rpm> <kp> <kd> <torq> -> all floats
*/

void uart_parse_cmd(UART_HandleTypeDef* phuart, char* msg, int msg_len)
{
 80020dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e0:	ed2d 8b02 	vpush	{d8}
 80020e4:	b0b4      	sub	sp, #208	@ 0xd0
 80020e6:	af0a      	add	r7, sp, #40	@ 0x28
 80020e8:	6178      	str	r0, [r7, #20]
 80020ea:	6139      	str	r1, [r7, #16]
 80020ec:	60fa      	str	r2, [r7, #12]
    char copy[100];
    strncpy(copy, msg, msg_len);
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 fe67 	bl	8006dca <strncpy>
    copy[msg_len] = '\0';
 80020fc:	f107 0218 	add.w	r2, r7, #24
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
    char* token = strtok(copy, " ");
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	49c2      	ldr	r1, [pc, #776]	@ (8002418 <uart_parse_cmd+0x33c>)
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fe6e 	bl	8006df0 <strtok>
 8002114:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (!token){
 8002118:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800211c:	2b00      	cmp	r3, #0
 800211e:	d116      	bne.n	800214e <uart_parse_cmd+0x72>
        snprintf(copy, sizeof(copy), "ERROR: empty cmd\n\r");
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	4abd      	ldr	r2, [pc, #756]	@ (800241c <uart_parse_cmd+0x340>)
 8002126:	2164      	movs	r1, #100	@ 0x64
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fd9d 	bl	8006c68 <sniprintf>
        HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f8bc 	bl	80002b0 <strlen>
 8002138:	4603      	mov	r3, r0
 800213a:	b29a      	uxth	r2, r3
 800213c:	f107 0118 	add.w	r1, r7, #24
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f002 fbf7 	bl	8004938 <HAL_UART_Transmit>
        return;
 800214a:	f000 bc99 	b.w	8002a80 <uart_parse_cmd+0x9a4>
    }

    if (!strncmp(token, "cubemars", strlen(token))){
 800214e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002152:	f7fe f8ad 	bl	80002b0 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	49b1      	ldr	r1, [pc, #708]	@ (8002420 <uart_parse_cmd+0x344>)
 800215c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002160:	f004 fe21 	bl	8006da6 <strncmp>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 8282 	bne.w	8002670 <uart_parse_cmd+0x594>
        //cubemars motor
        token = strtok(NULL, " \n\r");
 800216c:	49ad      	ldr	r1, [pc, #692]	@ (8002424 <uart_parse_cmd+0x348>)
 800216e:	2000      	movs	r0, #0
 8002170:	f004 fe3e 	bl	8006df0 <strtok>
 8002174:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
        if (!strncmp(token, "demo", strlen(token))){
 8002178:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800217c:	f7fe f898 	bl	80002b0 <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	49a8      	ldr	r1, [pc, #672]	@ (8002428 <uart_parse_cmd+0x34c>)
 8002186:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800218a:	f004 fe0c 	bl	8006da6 <strncmp>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8475 	beq.w	8002a80 <uart_parse_cmd+0x9a4>
            //exe demo
        }
        else if (!strncmp(token, "start", strlen(token))){
 8002196:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800219a:	f7fe f889 	bl	80002b0 <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	49a2      	ldr	r1, [pc, #648]	@ (800242c <uart_parse_cmd+0x350>)
 80021a4:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80021a8:	f004 fdfd 	bl	8006da6 <strncmp>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11a      	bne.n	80021e8 <uart_parse_cmd+0x10c>
            snprintf(copy, sizeof(copy), "Enable Cubemars MIT control\n\r");
 80021b2:	f107 0318 	add.w	r3, r7, #24
 80021b6:	4a9e      	ldr	r2, [pc, #632]	@ (8002430 <uart_parse_cmd+0x354>)
 80021b8:	2164      	movs	r1, #100	@ 0x64
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 fd54 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80021c0:	f107 0318 	add.w	r3, r7, #24
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f873 	bl	80002b0 <strlen>
 80021ca:	4603      	mov	r3, r0
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f107 0118 	add.w	r1, r7, #24
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f002 fbae 	bl	8004938 <HAL_UART_Transmit>
            CUBEMARS_enable_motion_ctrl(&hcan1, &TxMailbox);
 80021dc:	4995      	ldr	r1, [pc, #596]	@ (8002434 <uart_parse_cmd+0x358>)
 80021de:	4896      	ldr	r0, [pc, #600]	@ (8002438 <uart_parse_cmd+0x35c>)
 80021e0:	f7fe ff4a 	bl	8001078 <CUBEMARS_enable_motion_ctrl>
 80021e4:	f000 bc4c 	b.w	8002a80 <uart_parse_cmd+0x9a4>
        }
        else if (!strncmp(token, "read", strlen(token))){
 80021e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80021ec:	f7fe f860 	bl	80002b0 <strlen>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	4991      	ldr	r1, [pc, #580]	@ (800243c <uart_parse_cmd+0x360>)
 80021f6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80021fa:	f004 fdd4 	bl	8006da6 <strncmp>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d179      	bne.n	80022f8 <uart_parse_cmd+0x21c>
            snprintf(copy, sizeof(copy), "Requested Cubemars parameters\n\r");
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	4a8d      	ldr	r2, [pc, #564]	@ (8002440 <uart_parse_cmd+0x364>)
 800220a:	2164      	movs	r1, #100	@ 0x64
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fd2b 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f84a 	bl	80002b0 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	f107 0118 	add.w	r1, r7, #24
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	6978      	ldr	r0, [r7, #20]
 800222a:	f002 fb85 	bl	8004938 <HAL_UART_Transmit>
            CUBEMARS_enable_motion_ctrl(&hcan1, &TxMailbox);
 800222e:	4981      	ldr	r1, [pc, #516]	@ (8002434 <uart_parse_cmd+0x358>)
 8002230:	4881      	ldr	r0, [pc, #516]	@ (8002438 <uart_parse_cmd+0x35c>)
 8002232:	f7fe ff21 	bl	8001078 <CUBEMARS_enable_motion_ctrl>
            uint32_t timeout = 1000;
 8002236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            while(!can_receive_flag){
 800223e:	e01f      	b.n	8002280 <uart_parse_cmd+0x1a4>
                timeout --;
 8002240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002244:	3b01      	subs	r3, #1
 8002246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                if (!timeout){
 800224a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <uart_parse_cmd+0x1a4>
                    snprintf(copy, sizeof(copy), "CAN read timeout\n\r");
 8002252:	f107 0318 	add.w	r3, r7, #24
 8002256:	4a7b      	ldr	r2, [pc, #492]	@ (8002444 <uart_parse_cmd+0x368>)
 8002258:	2164      	movs	r1, #100	@ 0x64
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fd04 	bl	8006c68 <sniprintf>
                    HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f823 	bl	80002b0 <strlen>
 800226a:	4603      	mov	r3, r0
 800226c:	b29a      	uxth	r2, r3
 800226e:	f107 0118 	add.w	r1, r7, #24
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f002 fb5e 	bl	8004938 <HAL_UART_Transmit>
                    return;
 800227c:	f000 bc00 	b.w	8002a80 <uart_parse_cmd+0x9a4>
            while(!can_receive_flag){
 8002280:	4b71      	ldr	r3, [pc, #452]	@ (8002448 <uart_parse_cmd+0x36c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0db      	beq.n	8002240 <uart_parse_cmd+0x164>
                }
            }
            can_receive_flag = 0;
 8002288:	4b6f      	ldr	r3, [pc, #444]	@ (8002448 <uart_parse_cmd+0x36c>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
            snprintf(copy, sizeof(copy), "Motor Report:\r\nTEMP: %d | ERROR_CODE: %0x\r\nPOS: %d | SPD: %d | TORQ: %d\r\n",
 800228e:	4b6f      	ldr	r3, [pc, #444]	@ (800244c <uart_parse_cmd+0x370>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	4b6e      	ldr	r3, [pc, #440]	@ (8002450 <uart_parse_cmd+0x374>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b6e      	ldr	r3, [pc, #440]	@ (8002454 <uart_parse_cmd+0x378>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a4:	ee17 4a90 	vmov	r4, s15
 80022a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002458 <uart_parse_cmd+0x37c>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b2:	ee17 5a90 	vmov	r5, s15
 80022b6:	4b69      	ldr	r3, [pc, #420]	@ (800245c <uart_parse_cmd+0x380>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c0:	ee17 3a90 	vmov	r3, s15
 80022c4:	f107 0018 	add.w	r0, r7, #24
 80022c8:	9303      	str	r3, [sp, #12]
 80022ca:	9502      	str	r5, [sp, #8]
 80022cc:	9401      	str	r4, [sp, #4]
 80022ce:	9200      	str	r2, [sp, #0]
 80022d0:	460b      	mov	r3, r1
 80022d2:	4a63      	ldr	r2, [pc, #396]	@ (8002460 <uart_parse_cmd+0x384>)
 80022d4:	2164      	movs	r1, #100	@ 0x64
 80022d6:	f004 fcc7 	bl	8006c68 <sniprintf>
                (int)motor_temp, error_code, (int)pos_float, (int)spd_float, (int)torq_float);
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ffe6 	bl	80002b0 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f107 0118 	add.w	r1, r7, #24
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	6978      	ldr	r0, [r7, #20]
 80022f2:	f002 fb21 	bl	8004938 <HAL_UART_Transmit>
 80022f6:	e3c3      	b.n	8002a80 <uart_parse_cmd+0x9a4>
        }
        else if (!strncmp(token, "stop", strlen(token))){
 80022f8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80022fc:	f7fd ffd8 	bl	80002b0 <strlen>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4957      	ldr	r1, [pc, #348]	@ (8002464 <uart_parse_cmd+0x388>)
 8002306:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800230a:	f004 fd4c 	bl	8006da6 <strncmp>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d119      	bne.n	8002348 <uart_parse_cmd+0x26c>
            snprintf(copy, sizeof(copy), "Disable Cubemars MIT control\n\r");
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	4a53      	ldr	r2, [pc, #332]	@ (8002468 <uart_parse_cmd+0x38c>)
 800231a:	2164      	movs	r1, #100	@ 0x64
 800231c:	4618      	mov	r0, r3
 800231e:	f004 fca3 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002322:	f107 0318 	add.w	r3, r7, #24
 8002326:	4618      	mov	r0, r3
 8002328:	f7fd ffc2 	bl	80002b0 <strlen>
 800232c:	4603      	mov	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	f107 0118 	add.w	r1, r7, #24
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	6978      	ldr	r0, [r7, #20]
 800233a:	f002 fafd 	bl	8004938 <HAL_UART_Transmit>
            CUBEMARS_disable_motion_ctrl(&hcan1, &TxMailbox);
 800233e:	493d      	ldr	r1, [pc, #244]	@ (8002434 <uart_parse_cmd+0x358>)
 8002340:	483d      	ldr	r0, [pc, #244]	@ (8002438 <uart_parse_cmd+0x35c>)
 8002342:	f7fe febc 	bl	80010be <CUBEMARS_disable_motion_ctrl>
 8002346:	e39b      	b.n	8002a80 <uart_parse_cmd+0x9a4>
        }
        else if (!strncmp(token, "send", strlen(token))){
 8002348:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800234c:	f7fd ffb0 	bl	80002b0 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	4945      	ldr	r1, [pc, #276]	@ (800246c <uart_parse_cmd+0x390>)
 8002356:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800235a:	f004 fd24 	bl	8006da6 <strncmp>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	f040 8089 	bne.w	8002478 <uart_parse_cmd+0x39c>
            snprintf(copy, sizeof(copy), "Cubemars send MIT parameters: pos=%d, rpm=%d, kp=%d, kd=%d, torq=%d\n\r",
                (int)set_cmd_list[0].motor_config,
 8002366:	4b42      	ldr	r3, [pc, #264]	@ (8002470 <uart_parse_cmd+0x394>)
 8002368:	edd3 7a01 	vldr	s15, [r3, #4]
            snprintf(copy, sizeof(copy), "Cubemars send MIT parameters: pos=%d, rpm=%d, kp=%d, kd=%d, torq=%d\n\r",
 800236c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                (int)set_cmd_list[1].motor_config,
 8002370:	4b3f      	ldr	r3, [pc, #252]	@ (8002470 <uart_parse_cmd+0x394>)
 8002372:	edd3 7a03 	vldr	s15, [r3, #12]
            snprintf(copy, sizeof(copy), "Cubemars send MIT parameters: pos=%d, rpm=%d, kp=%d, kd=%d, torq=%d\n\r",
 8002376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237a:	ee17 2a90 	vmov	r2, s15
                (int)set_cmd_list[2].motor_config,
 800237e:	4b3c      	ldr	r3, [pc, #240]	@ (8002470 <uart_parse_cmd+0x394>)
 8002380:	edd3 7a05 	vldr	s15, [r3, #20]
            snprintf(copy, sizeof(copy), "Cubemars send MIT parameters: pos=%d, rpm=%d, kp=%d, kd=%d, torq=%d\n\r",
 8002384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002388:	ee17 1a90 	vmov	r1, s15
                (int)set_cmd_list[3].motor_config,
 800238c:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <uart_parse_cmd+0x394>)
 800238e:	edd3 7a07 	vldr	s15, [r3, #28]
            snprintf(copy, sizeof(copy), "Cubemars send MIT parameters: pos=%d, rpm=%d, kp=%d, kd=%d, torq=%d\n\r",
 8002392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002396:	ee17 4a90 	vmov	r4, s15
                (int)set_cmd_list[4].motor_config);
 800239a:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <uart_parse_cmd+0x394>)
 800239c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
            snprintf(copy, sizeof(copy), "Cubemars send MIT parameters: pos=%d, rpm=%d, kp=%d, kd=%d, torq=%d\n\r",
 80023a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a4:	ee17 3a90 	vmov	r3, s15
 80023a8:	f107 0018 	add.w	r0, r7, #24
 80023ac:	9303      	str	r3, [sp, #12]
 80023ae:	9402      	str	r4, [sp, #8]
 80023b0:	9101      	str	r1, [sp, #4]
 80023b2:	9200      	str	r2, [sp, #0]
 80023b4:	ee17 3a10 	vmov	r3, s14
 80023b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002474 <uart_parse_cmd+0x398>)
 80023ba:	2164      	movs	r1, #100	@ 0x64
 80023bc:	f004 fc54 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd ff73 	bl	80002b0 <strlen>
 80023ca:	4603      	mov	r3, r0
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	f107 0118 	add.w	r1, r7, #24
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f002 faae 	bl	8004938 <HAL_UART_Transmit>
            CUBEMARS_set_motion_ctrl_parameters(&hcan1, &TxMailbox, set_cmd_list[0].motor_config, set_cmd_list[1].motor_config, set_cmd_list[2].motor_config, set_cmd_list[3].motor_config, set_cmd_list[4].motor_config);
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <uart_parse_cmd+0x394>)
 80023de:	edd3 7a01 	vldr	s15, [r3, #4]
 80023e2:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <uart_parse_cmd+0x394>)
 80023e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80023e8:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <uart_parse_cmd+0x394>)
 80023ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <uart_parse_cmd+0x394>)
 80023f0:	ed93 6a07 	vldr	s12, [r3, #28]
 80023f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <uart_parse_cmd+0x394>)
 80023f6:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 80023fa:	eeb0 2a65 	vmov.f32	s4, s11
 80023fe:	eef0 1a46 	vmov.f32	s3, s12
 8002402:	eeb0 1a66 	vmov.f32	s2, s13
 8002406:	eef0 0a47 	vmov.f32	s1, s14
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	4909      	ldr	r1, [pc, #36]	@ (8002434 <uart_parse_cmd+0x358>)
 8002410:	4809      	ldr	r0, [pc, #36]	@ (8002438 <uart_parse_cmd+0x35c>)
 8002412:	f7fe febf 	bl	8001194 <CUBEMARS_set_motion_ctrl_parameters>
 8002416:	e333      	b.n	8002a80 <uart_parse_cmd+0x9a4>
 8002418:	08009ab8 	.word	0x08009ab8
 800241c:	08009abc 	.word	0x08009abc
 8002420:	08009ad0 	.word	0x08009ad0
 8002424:	08009adc 	.word	0x08009adc
 8002428:	08009ae0 	.word	0x08009ae0
 800242c:	08009ae8 	.word	0x08009ae8
 8002430:	08009af0 	.word	0x08009af0
 8002434:	200002b0 	.word	0x200002b0
 8002438:	20000240 	.word	0x20000240
 800243c:	08009b10 	.word	0x08009b10
 8002440:	08009b18 	.word	0x08009b18
 8002444:	08009b38 	.word	0x08009b38
 8002448:	20000320 	.word	0x20000320
 800244c:	20000230 	.word	0x20000230
 8002450:	20000231 	.word	0x20000231
 8002454:	20000234 	.word	0x20000234
 8002458:	20000238 	.word	0x20000238
 800245c:	2000023c 	.word	0x2000023c
 8002460:	08009b4c 	.word	0x08009b4c
 8002464:	08009b98 	.word	0x08009b98
 8002468:	08009ba0 	.word	0x08009ba0
 800246c:	08009bc0 	.word	0x08009bc0
 8002470:	2000001c 	.word	0x2000001c
 8002474:	08009bc8 	.word	0x08009bc8
        }
        else if (!strncmp(token, "set", strlen(token))){
 8002478:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800247c:	f7fd ff18 	bl	80002b0 <strlen>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	49b4      	ldr	r1, [pc, #720]	@ (8002758 <uart_parse_cmd+0x67c>)
 8002486:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800248a:	f004 fc8c 	bl	8006da6 <strncmp>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 80d7 	bne.w	8002644 <uart_parse_cmd+0x568>
            char* set_type = strtok(NULL, " \n\r");
 8002496:	49b1      	ldr	r1, [pc, #708]	@ (800275c <uart_parse_cmd+0x680>)
 8002498:	2000      	movs	r0, #0
 800249a:	f004 fca9 	bl	8006df0 <strtok>
 800249e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
            char* config = strtok(NULL, " \n\r");
 80024a2:	49ae      	ldr	r1, [pc, #696]	@ (800275c <uart_parse_cmd+0x680>)
 80024a4:	2000      	movs	r0, #0
 80024a6:	f004 fca3 	bl	8006df0 <strtok>
 80024aa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
            
            if (!set_type){
 80024ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d114      	bne.n	80024e0 <uart_parse_cmd+0x404>
                snprintf(copy, sizeof(copy), "ERROR: Missing set type\n\r");
 80024b6:	f107 0318 	add.w	r3, r7, #24
 80024ba:	4aa9      	ldr	r2, [pc, #676]	@ (8002760 <uart_parse_cmd+0x684>)
 80024bc:	2164      	movs	r1, #100	@ 0x64
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 fbd2 	bl	8006c68 <sniprintf>
                HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd fef1 	bl	80002b0 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f107 0118 	add.w	r1, r7, #24
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f002 fa2c 	bl	8004938 <HAL_UART_Transmit>
            }

            if (!config){
 80024e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d114      	bne.n	8002512 <uart_parse_cmd+0x436>
                snprintf(copy, sizeof(copy), "ERROR: Missing set config\n\r");
 80024e8:	f107 0318 	add.w	r3, r7, #24
 80024ec:	4a9d      	ldr	r2, [pc, #628]	@ (8002764 <uart_parse_cmd+0x688>)
 80024ee:	2164      	movs	r1, #100	@ 0x64
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 fbb9 	bl	8006c68 <sniprintf>
                HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fd fed8 	bl	80002b0 <strlen>
 8002500:	4603      	mov	r3, r0
 8002502:	b29a      	uxth	r2, r3
 8002504:	f107 0118 	add.w	r1, r7, #24
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f002 fa13 	bl	8004938 <HAL_UART_Transmit>
            }

            float config_float = atof(config);
 8002512:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002516:	f002 fe61 	bl	80051dc <atof>
 800251a:	ec53 2b10 	vmov	r2, r3, d0
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe fb81 	bl	8000c28 <__aeabi_d2f>
 8002526:	4603      	mov	r3, r0
 8002528:	67fb      	str	r3, [r7, #124]	@ 0x7c

            for (int i = 0; i< sizeof set_cmd_list; i ++){
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002530:	e048      	b.n	80025c4 <uart_parse_cmd+0x4e8>
                if (!strncmp(set_type, set_cmd_list[i].cmd, strlen(set_type))){
 8002532:	4a8d      	ldr	r2, [pc, #564]	@ (8002768 <uart_parse_cmd+0x68c>)
 8002534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002538:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800253c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002540:	f7fd feb6 	bl	80002b0 <strlen>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	4621      	mov	r1, r4
 800254a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800254e:	f004 fc2a 	bl	8006da6 <strncmp>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d130      	bne.n	80025ba <uart_parse_cmd+0x4de>
                    set_cmd_list[i].motor_config = config_float;
 8002558:	4a83      	ldr	r2, [pc, #524]	@ (8002768 <uart_parse_cmd+0x68c>)
 800255a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	3304      	adds	r3, #4
 8002564:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002566:	601a      	str	r2, [r3, #0]
                    snprintf(copy, sizeof(copy), "Cubemars set: %s = %.3f\n\r", set_cmd_list[i].cmd, set_cmd_list[i].motor_config);
 8002568:	4a7f      	ldr	r2, [pc, #508]	@ (8002768 <uart_parse_cmd+0x68c>)
 800256a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800256e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8002572:	4a7d      	ldr	r2, [pc, #500]	@ (8002768 <uart_parse_cmd+0x68c>)
 8002574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe f801 	bl	8000588 <__aeabi_f2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	f107 0018 	add.w	r0, r7, #24
 800258e:	e9cd 2300 	strd	r2, r3, [sp]
 8002592:	4623      	mov	r3, r4
 8002594:	4a75      	ldr	r2, [pc, #468]	@ (800276c <uart_parse_cmd+0x690>)
 8002596:	2164      	movs	r1, #100	@ 0x64
 8002598:	f004 fb66 	bl	8006c68 <sniprintf>
                    HAL_UART_Transmit(&huart2, copy, strlen(copy), HAL_MAX_DELAY);
 800259c:	f107 0318 	add.w	r3, r7, #24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fe85 	bl	80002b0 <strlen>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	f107 0118 	add.w	r1, r7, #24
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	486f      	ldr	r0, [pc, #444]	@ (8002770 <uart_parse_cmd+0x694>)
 80025b4:	f002 f9c0 	bl	8004938 <HAL_UART_Transmit>
                    return;
 80025b8:	e262      	b.n	8002a80 <uart_parse_cmd+0x9a4>
            for (int i = 0; i< sizeof set_cmd_list; i ++){
 80025ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025be:	3301      	adds	r3, #1
 80025c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025c8:	2b27      	cmp	r3, #39	@ 0x27
 80025ca:	d9b2      	bls.n	8002532 <uart_parse_cmd+0x456>
                }
            }
            snprintf(copy, sizeof(copy), "Invalid set type\n\rYou should only input: \n\r");
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4a68      	ldr	r2, [pc, #416]	@ (8002774 <uart_parse_cmd+0x698>)
 80025d2:	2164      	movs	r1, #100	@ 0x64
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 fb47 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80025da:	f107 0318 	add.w	r3, r7, #24
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe66 	bl	80002b0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	f107 0118 	add.w	r1, r7, #24
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f002 f9a1 	bl	8004938 <HAL_UART_Transmit>
            for (int i = 0; i < sizeof set_cmd_list; i ++){
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025fc:	e01d      	b.n	800263a <uart_parse_cmd+0x55e>
                snprintf(copy, sizeof(copy), "%s <float> \n\r", set_cmd_list[i].cmd);
 80025fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002768 <uart_parse_cmd+0x68c>)
 8002600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002608:	f107 0018 	add.w	r0, r7, #24
 800260c:	4a5a      	ldr	r2, [pc, #360]	@ (8002778 <uart_parse_cmd+0x69c>)
 800260e:	2164      	movs	r1, #100	@ 0x64
 8002610:	f004 fb2a 	bl	8006c68 <sniprintf>
                HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd fe49 	bl	80002b0 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	b29a      	uxth	r2, r3
 8002622:	f107 0118 	add.w	r1, r7, #24
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f002 f984 	bl	8004938 <HAL_UART_Transmit>
            for (int i = 0; i < sizeof set_cmd_list; i ++){
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800263a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800263e:	2b27      	cmp	r3, #39	@ 0x27
 8002640:	d9dd      	bls.n	80025fe <uart_parse_cmd+0x522>
            }
            return;
 8002642:	e21d      	b.n	8002a80 <uart_parse_cmd+0x9a4>
   
        }
        else{
            snprintf(copy, sizeof(copy), "ERROR: invalid motor cmd\n\r");
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	4a4c      	ldr	r2, [pc, #304]	@ (800277c <uart_parse_cmd+0x6a0>)
 800264a:	2164      	movs	r1, #100	@ 0x64
 800264c:	4618      	mov	r0, r3
 800264e:	f004 fb0b 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fe2a 	bl	80002b0 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	f107 0118 	add.w	r1, r7, #24
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	f002 f965 	bl	8004938 <HAL_UART_Transmit>
            return;
 800266e:	e207      	b.n	8002a80 <uart_parse_cmd+0x9a4>
        }

    }
    else if(!strncmp(token, "rs", strlen(token))){
 8002670:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002674:	f7fd fe1c 	bl	80002b0 <strlen>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4940      	ldr	r1, [pc, #256]	@ (8002780 <uart_parse_cmd+0x6a4>)
 800267e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002682:	f004 fb90 	bl	8006da6 <strncmp>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 81e3 	bne.w	8002a54 <uart_parse_cmd+0x978>
        token = strtok(NULL, " \n\r");
 800268e:	4933      	ldr	r1, [pc, #204]	@ (800275c <uart_parse_cmd+0x680>)
 8002690:	2000      	movs	r0, #0
 8002692:	f004 fbad 	bl	8006df0 <strtok>
 8002696:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
        if (!strncmp(token, "demo", strlen(token))){
 800269a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800269e:	f7fd fe07 	bl	80002b0 <strlen>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	4937      	ldr	r1, [pc, #220]	@ (8002784 <uart_parse_cmd+0x6a8>)
 80026a8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80026ac:	f004 fb7b 	bl	8006da6 <strncmp>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 81e4 	beq.w	8002a80 <uart_parse_cmd+0x9a4>
            //exe demo
        }
        else if (!strncmp(token, "start", strlen(token))){
 80026b8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80026bc:	f7fd fdf8 	bl	80002b0 <strlen>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4930      	ldr	r1, [pc, #192]	@ (8002788 <uart_parse_cmd+0x6ac>)
 80026c6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80026ca:	f004 fb6c 	bl	8006da6 <strncmp>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d119      	bne.n	8002708 <uart_parse_cmd+0x62c>
            snprintf(copy, sizeof(copy), "Enable rs motor\n\r");
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	4a2c      	ldr	r2, [pc, #176]	@ (800278c <uart_parse_cmd+0x6b0>)
 80026da:	2164      	movs	r1, #100	@ 0x64
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fac3 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80026e2:	f107 0318 	add.w	r3, r7, #24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fde2 	bl	80002b0 <strlen>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	f107 0118 	add.w	r1, r7, #24
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	6978      	ldr	r0, [r7, #20]
 80026fa:	f002 f91d 	bl	8004938 <HAL_UART_Transmit>
            can_enable_motor(RS_test_motor_id, CAN_master_id);
 80026fe:	21fd      	movs	r1, #253	@ 0xfd
 8002700:	2001      	movs	r0, #1
 8002702:	f7ff f945 	bl	8001990 <can_enable_motor>
 8002706:	e1bb      	b.n	8002a80 <uart_parse_cmd+0x9a4>
        }
        else if (!strncmp(token, "stop", strlen(token))){
 8002708:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800270c:	f7fd fdd0 	bl	80002b0 <strlen>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	491e      	ldr	r1, [pc, #120]	@ (8002790 <uart_parse_cmd+0x6b4>)
 8002716:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800271a:	f004 fb44 	bl	8006da6 <strncmp>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d139      	bne.n	8002798 <uart_parse_cmd+0x6bc>
            snprintf(copy, sizeof(copy), "Disable rs motor\n\r");
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <uart_parse_cmd+0x6b8>)
 800272a:	2164      	movs	r1, #100	@ 0x64
 800272c:	4618      	mov	r0, r3
 800272e:	f004 fa9b 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002732:	f107 0318 	add.w	r3, r7, #24
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd fdba 	bl	80002b0 <strlen>
 800273c:	4603      	mov	r3, r0
 800273e:	b29a      	uxth	r2, r3
 8002740:	f107 0118 	add.w	r1, r7, #24
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	6978      	ldr	r0, [r7, #20]
 800274a:	f002 f8f5 	bl	8004938 <HAL_UART_Transmit>
            can_disable_motor(RS_test_motor_id, CAN_master_id);
 800274e:	21fd      	movs	r1, #253	@ 0xfd
 8002750:	2001      	movs	r0, #1
 8002752:	f7ff fa03 	bl	8001b5c <can_disable_motor>
 8002756:	e193      	b.n	8002a80 <uart_parse_cmd+0x9a4>
 8002758:	08009c10 	.word	0x08009c10
 800275c:	08009adc 	.word	0x08009adc
 8002760:	08009c14 	.word	0x08009c14
 8002764:	08009c30 	.word	0x08009c30
 8002768:	2000001c 	.word	0x2000001c
 800276c:	08009c4c 	.word	0x08009c4c
 8002770:	20000268 	.word	0x20000268
 8002774:	08009c68 	.word	0x08009c68
 8002778:	08009c94 	.word	0x08009c94
 800277c:	08009ca4 	.word	0x08009ca4
 8002780:	08009cc0 	.word	0x08009cc0
 8002784:	08009ae0 	.word	0x08009ae0
 8002788:	08009ae8 	.word	0x08009ae8
 800278c:	08009cc4 	.word	0x08009cc4
 8002790:	08009b98 	.word	0x08009b98
 8002794:	08009cd8 	.word	0x08009cd8
        }
        else if (!strncmp(token, "send", strlen(token))){
 8002798:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800279c:	f7fd fd88 	bl	80002b0 <strlen>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	49b9      	ldr	r1, [pc, #740]	@ (8002a8c <uart_parse_cmd+0x9b0>)
 80027a6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80027aa:	f004 fafc 	bl	8006da6 <strncmp>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d175      	bne.n	80028a0 <uart_parse_cmd+0x7c4>
            snprintf(copy, sizeof(copy), "rs send MIT parameters: pos=%.3f, rpm=%.3f, kp=%.3f, kd=%.3f, torq=%.3f\n\r",
                set_cmd_list[0].motor_config,
 80027b4:	4bb6      	ldr	r3, [pc, #728]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
            snprintf(copy, sizeof(copy), "rs send MIT parameters: pos=%.3f, rpm=%.3f, kp=%.3f, kd=%.3f, torq=%.3f\n\r",
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fee5 	bl	8000588 <__aeabi_f2d>
 80027be:	4604      	mov	r4, r0
 80027c0:	460d      	mov	r5, r1
                set_cmd_list[1].motor_config,
 80027c2:	4bb3      	ldr	r3, [pc, #716]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 80027c4:	68db      	ldr	r3, [r3, #12]
            snprintf(copy, sizeof(copy), "rs send MIT parameters: pos=%.3f, rpm=%.3f, kp=%.3f, kd=%.3f, torq=%.3f\n\r",
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fede 	bl	8000588 <__aeabi_f2d>
 80027cc:	4680      	mov	r8, r0
 80027ce:	4689      	mov	r9, r1
                set_cmd_list[2].motor_config,
 80027d0:	4baf      	ldr	r3, [pc, #700]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 80027d2:	695b      	ldr	r3, [r3, #20]
            snprintf(copy, sizeof(copy), "rs send MIT parameters: pos=%.3f, rpm=%.3f, kp=%.3f, kd=%.3f, torq=%.3f\n\r",
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fed7 	bl	8000588 <__aeabi_f2d>
 80027da:	4682      	mov	sl, r0
 80027dc:	468b      	mov	fp, r1
                set_cmd_list[3].motor_config,
 80027de:	4bac      	ldr	r3, [pc, #688]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
            snprintf(copy, sizeof(copy), "rs send MIT parameters: pos=%.3f, rpm=%.3f, kp=%.3f, kd=%.3f, torq=%.3f\n\r",
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fed0 	bl	8000588 <__aeabi_f2d>
 80027e8:	e9c7 0100 	strd	r0, r1, [r7]
                set_cmd_list[4].motor_config);
 80027ec:	4ba8      	ldr	r3, [pc, #672]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            snprintf(copy, sizeof(copy), "rs send MIT parameters: pos=%.3f, rpm=%.3f, kp=%.3f, kd=%.3f, torq=%.3f\n\r",
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fec9 	bl	8000588 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	f107 0018 	add.w	r0, r7, #24
 80027fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002802:	ed97 7b00 	vldr	d7, [r7]
 8002806:	ed8d 7b06 	vstr	d7, [sp, #24]
 800280a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800280e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002812:	e9cd 4500 	strd	r4, r5, [sp]
 8002816:	4a9f      	ldr	r2, [pc, #636]	@ (8002a94 <uart_parse_cmd+0x9b8>)
 8002818:	2164      	movs	r1, #100	@ 0x64
 800281a:	f004 fa25 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 800281e:	f107 0318 	add.w	r3, r7, #24
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fd44 	bl	80002b0 <strlen>
 8002828:	4603      	mov	r3, r0
 800282a:	b29a      	uxth	r2, r3
 800282c:	f107 0118 	add.w	r1, r7, #24
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f002 f87f 	bl	8004938 <HAL_UART_Transmit>
            can_mit_control_set(RS_test_motor_id, set_cmd_list[4].motor_config, set_cmd_list[0].motor_config, set_cmd_list[1].motor_config,set_cmd_list[2].motor_config, set_cmd_list[3].motor_config);
 800283a:	4b95      	ldr	r3, [pc, #596]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fea2 	bl	8000588 <__aeabi_f2d>
 8002844:	4604      	mov	r4, r0
 8002846:	460d      	mov	r5, r1
 8002848:	4b91      	ldr	r3, [pc, #580]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe9b 	bl	8000588 <__aeabi_f2d>
 8002852:	4680      	mov	r8, r0
 8002854:	4689      	mov	r9, r1
 8002856:	4b8e      	ldr	r3, [pc, #568]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fe94 	bl	8000588 <__aeabi_f2d>
 8002860:	4682      	mov	sl, r0
 8002862:	468b      	mov	fp, r1
 8002864:	4b8a      	ldr	r3, [pc, #552]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fe8d 	bl	8000588 <__aeabi_f2d>
 800286e:	ec41 0b18 	vmov	d8, r0, r1
 8002872:	4b87      	ldr	r3, [pc, #540]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe86 	bl	8000588 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	ec43 2b14 	vmov	d4, r2, r3
 8002884:	eeb0 3a48 	vmov.f32	s6, s16
 8002888:	eef0 3a68 	vmov.f32	s7, s17
 800288c:	ec4b ab12 	vmov	d2, sl, fp
 8002890:	ec49 8b11 	vmov	d1, r8, r9
 8002894:	ec45 4b10 	vmov	d0, r4, r5
 8002898:	2001      	movs	r0, #1
 800289a:	f7ff f8ab 	bl	80019f4 <can_mit_control_set>
 800289e:	e0ef      	b.n	8002a80 <uart_parse_cmd+0x9a4>
        }
        else if (!strncmp(token, "set", strlen(token))){
 80028a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80028a4:	f7fd fd04 	bl	80002b0 <strlen>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	497a      	ldr	r1, [pc, #488]	@ (8002a98 <uart_parse_cmd+0x9bc>)
 80028ae:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80028b2:	f004 fa78 	bl	8006da6 <strncmp>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 80b5 	bne.w	8002a28 <uart_parse_cmd+0x94c>
            char* set_type = strtok(NULL, " \n\r");
 80028be:	4977      	ldr	r1, [pc, #476]	@ (8002a9c <uart_parse_cmd+0x9c0>)
 80028c0:	2000      	movs	r0, #0
 80028c2:	f004 fa95 	bl	8006df0 <strtok>
 80028c6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
            char* config = strtok(NULL, " \n\r");
 80028ca:	4974      	ldr	r1, [pc, #464]	@ (8002a9c <uart_parse_cmd+0x9c0>)
 80028cc:	2000      	movs	r0, #0
 80028ce:	f004 fa8f 	bl	8006df0 <strtok>
 80028d2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

            if (!set_type){
 80028d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <uart_parse_cmd+0x82e>
                snprintf(copy, sizeof(copy), "ERROR: Missing set type\n\r");
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	4a6f      	ldr	r2, [pc, #444]	@ (8002aa0 <uart_parse_cmd+0x9c4>)
 80028e4:	2164      	movs	r1, #100	@ 0x64
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 f9be 	bl	8006c68 <sniprintf>
                HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fcdd 	bl	80002b0 <strlen>
 80028f6:	4603      	mov	r3, r0
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	f107 0118 	add.w	r1, r7, #24
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	6978      	ldr	r0, [r7, #20]
 8002904:	f002 f818 	bl	8004938 <HAL_UART_Transmit>
                return;
 8002908:	e0ba      	b.n	8002a80 <uart_parse_cmd+0x9a4>
            }

            if (!config){
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <uart_parse_cmd+0x862>
                snprintf(copy, sizeof(copy), "ERROR: Missing set config\n\r");
 8002912:	f107 0318 	add.w	r3, r7, #24
 8002916:	4a63      	ldr	r2, [pc, #396]	@ (8002aa4 <uart_parse_cmd+0x9c8>)
 8002918:	2164      	movs	r1, #100	@ 0x64
 800291a:	4618      	mov	r0, r3
 800291c:	f004 f9a4 	bl	8006c68 <sniprintf>
                HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002920:	f107 0318 	add.w	r3, r7, #24
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fcc3 	bl	80002b0 <strlen>
 800292a:	4603      	mov	r3, r0
 800292c:	b29a      	uxth	r2, r3
 800292e:	f107 0118 	add.w	r1, r7, #24
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f001 fffe 	bl	8004938 <HAL_UART_Transmit>
                return;
 800293c:	e0a0      	b.n	8002a80 <uart_parse_cmd+0x9a4>
            }

            float config_float = atof(config);
 800293e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002942:	f002 fc4b 	bl	80051dc <atof>
 8002946:	ec53 2b10 	vmov	r2, r3, d0
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe f96b 	bl	8000c28 <__aeabi_d2f>
 8002952:	4603      	mov	r3, r0
 8002954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            for (int i = 0; i< sizeof set_cmd_list; i ++){
 8002958:	2300      	movs	r3, #0
 800295a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800295e:	e049      	b.n	80029f4 <uart_parse_cmd+0x918>
                if (!strncmp(set_type, set_cmd_list[i].cmd, strlen(set_type))){
 8002960:	4a4b      	ldr	r2, [pc, #300]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 8002962:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002966:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800296a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800296e:	f7fd fc9f 	bl	80002b0 <strlen>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	4621      	mov	r1, r4
 8002978:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800297c:	f004 fa13 	bl	8006da6 <strncmp>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d131      	bne.n	80029ea <uart_parse_cmd+0x90e>
                    set_cmd_list[i].motor_config = config_float;
 8002986:	4a42      	ldr	r2, [pc, #264]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 8002988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002996:	601a      	str	r2, [r3, #0]
                    snprintf(copy, sizeof(copy), "rs set: %s = %.3f\n\r", set_cmd_list[i].cmd, set_cmd_list[i].motor_config);
 8002998:	4a3d      	ldr	r2, [pc, #244]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 800299a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800299e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80029a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002a90 <uart_parse_cmd+0x9b4>)
 80029a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fde9 	bl	8000588 <__aeabi_f2d>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	f107 0018 	add.w	r0, r7, #24
 80029be:	e9cd 2300 	strd	r2, r3, [sp]
 80029c2:	4623      	mov	r3, r4
 80029c4:	4a38      	ldr	r2, [pc, #224]	@ (8002aa8 <uart_parse_cmd+0x9cc>)
 80029c6:	2164      	movs	r1, #100	@ 0x64
 80029c8:	f004 f94e 	bl	8006c68 <sniprintf>
                    HAL_UART_Transmit(&huart2, copy, strlen(copy), HAL_MAX_DELAY);
 80029cc:	f107 0318 	add.w	r3, r7, #24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fc6d 	bl	80002b0 <strlen>
 80029d6:	4603      	mov	r3, r0
 80029d8:	b29a      	uxth	r2, r3
 80029da:	f107 0118 	add.w	r1, r7, #24
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	4832      	ldr	r0, [pc, #200]	@ (8002aac <uart_parse_cmd+0x9d0>)
 80029e4:	f001 ffa8 	bl	8004938 <HAL_UART_Transmit>
                    return;
 80029e8:	e04a      	b.n	8002a80 <uart_parse_cmd+0x9a4>
            for (int i = 0; i< sizeof set_cmd_list; i ++){
 80029ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029f8:	2b27      	cmp	r3, #39	@ 0x27
 80029fa:	d9b1      	bls.n	8002960 <uart_parse_cmd+0x884>
                }
            }
            snprintf(copy, sizeof(copy), "Invalid set type\n\r");
 80029fc:	f107 0318 	add.w	r3, r7, #24
 8002a00:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab0 <uart_parse_cmd+0x9d4>)
 8002a02:	2164      	movs	r1, #100	@ 0x64
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 f92f 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002a0a:	f107 0318 	add.w	r3, r7, #24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fc4e 	bl	80002b0 <strlen>
 8002a14:	4603      	mov	r3, r0
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	f107 0118 	add.w	r1, r7, #24
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f001 ff89 	bl	8004938 <HAL_UART_Transmit>
 8002a26:	e02b      	b.n	8002a80 <uart_parse_cmd+0x9a4>

        }
        else{
            snprintf(copy, sizeof(copy), "ERROR: invalid motor cmd\n\r");
 8002a28:	f107 0318 	add.w	r3, r7, #24
 8002a2c:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <uart_parse_cmd+0x9d8>)
 8002a2e:	2164      	movs	r1, #100	@ 0x64
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 f919 	bl	8006c68 <sniprintf>
            HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002a36:	f107 0318 	add.w	r3, r7, #24
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fc38 	bl	80002b0 <strlen>
 8002a40:	4603      	mov	r3, r0
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	f107 0118 	add.w	r1, r7, #24
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	6978      	ldr	r0, [r7, #20]
 8002a4e:	f001 ff73 	bl	8004938 <HAL_UART_Transmit>
            return;
 8002a52:	e015      	b.n	8002a80 <uart_parse_cmd+0x9a4>
        }
    }

    else{
        snprintf(copy, sizeof(copy), "ERROR: invalid motor series\n\r");
 8002a54:	f107 0318 	add.w	r3, r7, #24
 8002a58:	4a17      	ldr	r2, [pc, #92]	@ (8002ab8 <uart_parse_cmd+0x9dc>)
 8002a5a:	2164      	movs	r1, #100	@ 0x64
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f004 f903 	bl	8006c68 <sniprintf>
        HAL_UART_Transmit(phuart, copy, strlen(copy), HAL_MAX_DELAY);
 8002a62:	f107 0318 	add.w	r3, r7, #24
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fc22 	bl	80002b0 <strlen>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	f107 0118 	add.w	r1, r7, #24
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	6978      	ldr	r0, [r7, #20]
 8002a7a:	f001 ff5d 	bl	8004938 <HAL_UART_Transmit>
        return;
 8002a7e:	bf00      	nop
    }

}
 8002a80:	37a8      	adds	r7, #168	@ 0xa8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	ecbd 8b02 	vpop	{d8}
 8002a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8c:	08009bc0 	.word	0x08009bc0
 8002a90:	2000001c 	.word	0x2000001c
 8002a94:	08009cec 	.word	0x08009cec
 8002a98:	08009c10 	.word	0x08009c10
 8002a9c:	08009adc 	.word	0x08009adc
 8002aa0:	08009c14 	.word	0x08009c14
 8002aa4:	08009c30 	.word	0x08009c30
 8002aa8:	08009d38 	.word	0x08009d38
 8002aac:	20000268 	.word	0x20000268
 8002ab0:	08009d4c 	.word	0x08009d4c
 8002ab4:	08009ca4 	.word	0x08009ca4
 8002ab8:	08009d60 	.word	0x08009d60

08002abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002af4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ac0:	f7ff fac6 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ac6:	490d      	ldr	r1, [pc, #52]	@ (8002afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002acc:	e002      	b.n	8002ad4 <LoopCopyDataInit>

08002ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad2:	3304      	adds	r3, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad8:	d3f9      	bcc.n	8002ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002adc:	4c0a      	ldr	r4, [pc, #40]	@ (8002b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae0:	e001      	b.n	8002ae6 <LoopFillZerobss>

08002ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae4:	3204      	adds	r2, #4

08002ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae8:	d3fb      	bcc.n	8002ae2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002aea:	f004 fa2d 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aee:	f7fe fd05 	bl	80014fc <main>
  bx  lr    
 8002af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002afc:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002b00:	0800a234 	.word	0x0800a234
  ldr r2, =_sbss
 8002b04:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002b08:	20000548 	.word	0x20000548

08002b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b0c:	e7fe      	b.n	8002b0c <ADC_IRQHandler>
	...

08002b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b14:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_Init+0x40>)
 8002b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_Init+0x40>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <HAL_Init+0x40>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 fed5 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f808 	bl	8002b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b44:	f7ff f8c4 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_InitTick+0x54>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <HAL_InitTick+0x58>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 feed 	bl	8003952 <HAL_SYSTICK_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00e      	b.n	8002ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d80a      	bhi.n	8002b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f000 feb5 	bl	80038fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_InitTick+0x5c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000018 	.word	0x20000018
 8002bac:	20000048 	.word	0x20000048
 8002bb0:	20000044 	.word	0x20000044

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000048 	.word	0x20000048
 8002bd8:	200003f8 	.word	0x200003f8

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	200003f8 	.word	0x200003f8

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000048 	.word	0x20000048

08002c3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0ed      	b.n	8002e2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff f860 	bl	8001d20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c70:	f7ff ffb4 	bl	8002bdc <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c76:	e012      	b.n	8002c9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c78:	f7ff ffb0 	bl	8002bdc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b0a      	cmp	r3, #10
 8002c84:	d90b      	bls.n	8002c9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2205      	movs	r2, #5
 8002c96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0c5      	b.n	8002e2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0e5      	beq.n	8002c78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0202 	bic.w	r2, r2, #2
 8002cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cbc:	f7ff ff8e 	bl	8002bdc <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cc2:	e012      	b.n	8002cea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cc4:	f7ff ff8a 	bl	8002bdc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b0a      	cmp	r3, #10
 8002cd0:	d90b      	bls.n	8002cea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2205      	movs	r2, #5
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e09f      	b.n	8002e2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e5      	bne.n	8002cc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7e1b      	ldrb	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d108      	bne.n	8002d12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e007      	b.n	8002d22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7e5b      	ldrb	r3, [r3, #25]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e007      	b.n	8002d4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e9b      	ldrb	r3, [r3, #26]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d108      	bne.n	8002d66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e007      	b.n	8002d76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0220 	bic.w	r2, r2, #32
 8002d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7edb      	ldrb	r3, [r3, #27]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0210 	bic.w	r2, r2, #16
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e007      	b.n	8002da0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0210 	orr.w	r2, r2, #16
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7f1b      	ldrb	r3, [r3, #28]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e007      	b.n	8002dca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0208 	bic.w	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7f5b      	ldrb	r3, [r3, #29]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d108      	bne.n	8002de4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0204 	orr.w	r2, r2, #4
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e007      	b.n	8002df4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0204 	bic.w	r2, r2, #4
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	ea42 0103 	orr.w	r1, r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d12e      	bne.n	8002ea4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e5e:	f7ff febd 	bl	8002bdc <HAL_GetTick>
 8002e62:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e64:	e012      	b.n	8002e8c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e66:	f7ff feb9 	bl	8002bdc <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b0a      	cmp	r3, #10
 8002e72:	d90b      	bls.n	8002e8c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2205      	movs	r2, #5
 8002e84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e012      	b.n	8002eb2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e5      	bne.n	8002e66 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e006      	b.n	8002eb2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b089      	sub	sp, #36	@ 0x24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ece:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d003      	beq.n	8002ee6 <HAL_CAN_AddTxMessage+0x2c>
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	f040 80ad 	bne.w	8003040 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8095 	beq.w	8003030 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	0e1b      	lsrs	r3, r3, #24
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f10:	2201      	movs	r2, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	409a      	lsls	r2, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	6809      	ldr	r1, [r1, #0]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3318      	adds	r3, #24
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	440b      	add	r3, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e00f      	b.n	8002f5e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f48:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f52:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3318      	adds	r3, #24
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	440b      	add	r3, r1
 8002f5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3318      	adds	r3, #24
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3304      	adds	r3, #4
 8002f70:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	7d1b      	ldrb	r3, [r3, #20]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d111      	bne.n	8002f9e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3318      	adds	r3, #24
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	6811      	ldr	r1, [r2, #0]
 8002f8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3318      	adds	r3, #24
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	440b      	add	r3, r1
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	061a      	lsls	r2, r3, #24
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3306      	adds	r3, #6
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3305      	adds	r3, #5
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	3204      	adds	r2, #4
 8002fbe:	7812      	ldrb	r2, [r2, #0]
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	6811      	ldr	r1, [r2, #0]
 8002fc6:	ea43 0200 	orr.w	r2, r3, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	440b      	add	r3, r1
 8002fd0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002fd4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3303      	adds	r3, #3
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	061a      	lsls	r2, r3, #24
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3301      	adds	r3, #1
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	ea43 0200 	orr.w	r2, r3, r0
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	440b      	add	r3, r1
 8003006:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800300a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3318      	adds	r3, #24
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	6811      	ldr	r1, [r2, #0]
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3318      	adds	r3, #24
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	440b      	add	r3, r1
 800302a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e00e      	b.n	800304e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e006      	b.n	800304e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800305a:	b480      	push	{r7}
 800305c:	b087      	sub	sp, #28
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d003      	beq.n	800307e <HAL_CAN_GetRxMessage+0x24>
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	2b02      	cmp	r3, #2
 800307a:	f040 8103 	bne.w	8003284 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10e      	bne.n	80030a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0f7      	b.n	8003292 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0e8      	b.n	8003292 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	331b      	adds	r3, #27
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	4413      	add	r3, r2
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0204 	and.w	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	331b      	adds	r3, #27
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4413      	add	r3, r2
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0d5b      	lsrs	r3, r3, #21
 80030ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	331b      	adds	r3, #27
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4413      	add	r3, r2
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	08db      	lsrs	r3, r3, #3
 8003108:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	331b      	adds	r3, #27
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	4413      	add	r3, r2
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0202 	and.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	331b      	adds	r3, #27
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2208      	movs	r2, #8
 8003142:	611a      	str	r2, [r3, #16]
 8003144:	e00b      	b.n	800315e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	331b      	adds	r3, #27
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	331b      	adds	r3, #27
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	b2da      	uxtb	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	331b      	adds	r3, #27
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	0c1b      	lsrs	r3, r3, #16
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	4413      	add	r3, r2
 8003198:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0a1a      	lsrs	r2, r3, #8
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0c1a      	lsrs	r2, r3, #16
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	3302      	adds	r3, #2
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e1a      	lsrs	r2, r3, #24
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	3303      	adds	r3, #3
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	3304      	adds	r3, #4
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4413      	add	r3, r2
 8003214:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0a1a      	lsrs	r2, r3, #8
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	3305      	adds	r3, #5
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	4413      	add	r3, r2
 800322e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0c1a      	lsrs	r2, r3, #16
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	3306      	adds	r3, #6
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	4413      	add	r3, r2
 8003248:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0e1a      	lsrs	r2, r3, #24
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3307      	adds	r3, #7
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0220 	orr.w	r2, r2, #32
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	e007      	b.n	8003280 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0220 	orr.w	r2, r2, #32
 800327e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e006      	b.n	8003292 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d002      	beq.n	80032bc <HAL_CAN_ActivateNotification+0x1e>
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d109      	bne.n	80032d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6959      	ldr	r1, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e006      	b.n	80032de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b08a      	sub	sp, #40	@ 0x28
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d07c      	beq.n	800342a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d023      	beq.n	8003382 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2201      	movs	r2, #1
 8003340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f983 	bl	8003658 <HAL_CAN_TxMailbox0CompleteCallback>
 8003352:	e016      	b.n	8003382 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
 8003366:	e00c      	b.n	8003382 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
 800337a:	e002      	b.n	8003382 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f989 	bl	8003694 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d024      	beq.n	80033d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003394:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f963 	bl	800366c <HAL_CAN_TxMailbox1CompleteCallback>
 80033a6:	e016      	b.n	80033d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ba:	e00c      	b.n	80033d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ce:	e002      	b.n	80033d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f969 	bl	80036a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d024      	beq.n	800342a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f943 	bl	8003680 <HAL_CAN_TxMailbox2CompleteCallback>
 80033fa:	e016      	b.n	800342a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
 800340e:	e00c      	b.n	800342a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
 8003422:	e002      	b.n	800342a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f949 	bl	80036bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2210      	movs	r2, #16
 800344c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2208      	movs	r2, #8
 8003468:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f930 	bl	80036d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fd ffaf 	bl	80013ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00c      	beq.n	80034b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2210      	movs	r2, #16
 80034b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2208      	movs	r2, #8
 80034cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f912 	bl	80036f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8f9 	bl	80036e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8fc 	bl	800370c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2208      	movs	r2, #8
 800352e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f8f5 	bl	8003720 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d07b      	beq.n	8003638 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d072      	beq.n	8003630 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d043      	beq.n	8003630 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d03e      	beq.n	8003630 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035b8:	2b60      	cmp	r3, #96	@ 0x60
 80035ba:	d02b      	beq.n	8003614 <HAL_CAN_IRQHandler+0x32a>
 80035bc:	2b60      	cmp	r3, #96	@ 0x60
 80035be:	d82e      	bhi.n	800361e <HAL_CAN_IRQHandler+0x334>
 80035c0:	2b50      	cmp	r3, #80	@ 0x50
 80035c2:	d022      	beq.n	800360a <HAL_CAN_IRQHandler+0x320>
 80035c4:	2b50      	cmp	r3, #80	@ 0x50
 80035c6:	d82a      	bhi.n	800361e <HAL_CAN_IRQHandler+0x334>
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d019      	beq.n	8003600 <HAL_CAN_IRQHandler+0x316>
 80035cc:	2b40      	cmp	r3, #64	@ 0x40
 80035ce:	d826      	bhi.n	800361e <HAL_CAN_IRQHandler+0x334>
 80035d0:	2b30      	cmp	r3, #48	@ 0x30
 80035d2:	d010      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x30c>
 80035d4:	2b30      	cmp	r3, #48	@ 0x30
 80035d6:	d822      	bhi.n	800361e <HAL_CAN_IRQHandler+0x334>
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d002      	beq.n	80035e2 <HAL_CAN_IRQHandler+0x2f8>
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d005      	beq.n	80035ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035e0:	e01d      	b.n	800361e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035ea:	e019      	b.n	8003620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	f043 0310 	orr.w	r3, r3, #16
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035f4:	e014      	b.n	8003620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	f043 0320 	orr.w	r3, r3, #32
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035fe:	e00f      	b.n	8003620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003608:	e00a      	b.n	8003620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003612:	e005      	b.n	8003620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800361c:	e000      	b.n	8003620 <HAL_CAN_IRQHandler+0x336>
            break;
 800361e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800362e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2204      	movs	r2, #4
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f872 	bl	8003734 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003650:	bf00      	nop
 8003652:	3728      	adds	r7, #40	@ 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003758:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377a:	4a04      	ldr	r2, [pc, #16]	@ (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	60d3      	str	r3, [r2, #12]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003794:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f003 0307 	and.w	r3, r3, #7
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	db0b      	blt.n	80037d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4907      	ldr	r1, [pc, #28]	@ (80037e4 <__NVIC_EnableIRQ+0x38>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2001      	movs	r0, #1
 80037ce:	fa00 f202 	lsl.w	r2, r0, r2
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	@ (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	@ (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	@ 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	f7ff ff8e 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff29 	bl	8003748 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003910:	f7ff ff3e 	bl	8003790 <__NVIC_GetPriorityGrouping>
 8003914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	6978      	ldr	r0, [r7, #20]
 800391c:	f7ff ff8e 	bl	800383c <NVIC_EncodePriority>
 8003920:	4602      	mov	r2, r0
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff5d 	bl	80037e8 <__NVIC_SetPriority>
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff31 	bl	80037ac <__NVIC_EnableIRQ>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ffa2 	bl	80038a4 <SysTick_Config>
 8003960:	4603      	mov	r3, r0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	@ 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	e165      	b.n	8003c54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003988:	2201      	movs	r2, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f040 8154 	bne.w	8003c4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d005      	beq.n	80039be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d130      	bne.n	8003a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	2203      	movs	r2, #3
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f4:	2201      	movs	r2, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 0201 	and.w	r2, r3, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d017      	beq.n	8003a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d123      	bne.n	8003ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	220f      	movs	r2, #15
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	08da      	lsrs	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3208      	adds	r2, #8
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0203 	and.w	r2, r3, #3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80ae 	beq.w	8003c4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c6c <HAL_GPIO_Init+0x300>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_GPIO_Init+0x300>)
 8003afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b02:	4b5a      	ldr	r3, [pc, #360]	@ (8003c6c <HAL_GPIO_Init+0x300>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b0e:	4a58      	ldr	r2, [pc, #352]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	3302      	adds	r3, #2
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4f      	ldr	r2, [pc, #316]	@ (8003c74 <HAL_GPIO_Init+0x308>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d025      	beq.n	8003b86 <HAL_GPIO_Init+0x21a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c78 <HAL_GPIO_Init+0x30c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01f      	beq.n	8003b82 <HAL_GPIO_Init+0x216>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4d      	ldr	r2, [pc, #308]	@ (8003c7c <HAL_GPIO_Init+0x310>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d019      	beq.n	8003b7e <HAL_GPIO_Init+0x212>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4c      	ldr	r2, [pc, #304]	@ (8003c80 <HAL_GPIO_Init+0x314>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <HAL_GPIO_Init+0x20e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4b      	ldr	r2, [pc, #300]	@ (8003c84 <HAL_GPIO_Init+0x318>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00d      	beq.n	8003b76 <HAL_GPIO_Init+0x20a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c88 <HAL_GPIO_Init+0x31c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <HAL_GPIO_Init+0x206>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a49      	ldr	r2, [pc, #292]	@ (8003c8c <HAL_GPIO_Init+0x320>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <HAL_GPIO_Init+0x202>
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	e00c      	b.n	8003b88 <HAL_GPIO_Init+0x21c>
 8003b6e:	2307      	movs	r3, #7
 8003b70:	e00a      	b.n	8003b88 <HAL_GPIO_Init+0x21c>
 8003b72:	2305      	movs	r3, #5
 8003b74:	e008      	b.n	8003b88 <HAL_GPIO_Init+0x21c>
 8003b76:	2304      	movs	r3, #4
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x21c>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e004      	b.n	8003b88 <HAL_GPIO_Init+0x21c>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e002      	b.n	8003b88 <HAL_GPIO_Init+0x21c>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_GPIO_Init+0x21c>
 8003b86:	2300      	movs	r3, #0
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f002 0203 	and.w	r2, r2, #3
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	4093      	lsls	r3, r2
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b98:	4935      	ldr	r1, [pc, #212]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bca:	4a31      	ldr	r2, [pc, #196]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf4:	4a26      	ldr	r2, [pc, #152]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bfa:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c24:	4b1a      	ldr	r3, [pc, #104]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c48:	4a11      	ldr	r2, [pc, #68]	@ (8003c90 <HAL_GPIO_Init+0x324>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	f67f ae96 	bls.w	8003988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3724      	adds	r7, #36	@ 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40020000 	.word	0x40020000
 8003c78:	40020400 	.word	0x40020400
 8003c7c:	40020800 	.word	0x40020800
 8003c80:	40020c00 	.word	0x40020c00
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40021400 	.word	0x40021400
 8003c8c:	40021800 	.word	0x40021800
 8003c90:	40013c00 	.word	0x40013c00

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb0:	e003      	b.n	8003cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	041a      	lsls	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0cc      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b68      	ldr	r3, [pc, #416]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d90c      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b65      	ldr	r3, [pc, #404]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b63      	ldr	r3, [pc, #396]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0b8      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d1c:	4b59      	ldr	r3, [pc, #356]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a58      	ldr	r2, [pc, #352]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d34:	4b53      	ldr	r3, [pc, #332]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a52      	ldr	r2, [pc, #328]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d40:	4b50      	ldr	r3, [pc, #320]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	494d      	ldr	r1, [pc, #308]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d044      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b47      	ldr	r3, [pc, #284]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d119      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e07f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b3f      	ldr	r3, [pc, #252]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e06f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e067      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4934      	ldr	r1, [pc, #208]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fe ff10 	bl	8002bdc <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe ff0c 	bl	8002bdc <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e04f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b25      	ldr	r3, [pc, #148]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d20c      	bcs.n	8003e10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b22      	ldr	r3, [pc, #136]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e032      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e1c:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4916      	ldr	r1, [pc, #88]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	490e      	ldr	r1, [pc, #56]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e4e:	f000 f855 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	490a      	ldr	r1, [pc, #40]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	5ccb      	ldrb	r3, [r1, r3]
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a09      	ldr	r2, [pc, #36]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fe70 	bl	8002b54 <HAL_InitTick>

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023c00 	.word	0x40023c00
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08009d80 	.word	0x08009d80
 8003e8c:	20000018 	.word	0x20000018
 8003e90:	20000044 	.word	0x20000044

08003e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b03      	ldr	r3, [pc, #12]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000018 	.word	0x20000018

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0a9b      	lsrs	r3, r3, #10
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08009d90 	.word	0x08009d90

08003ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ed8:	f7ff ffdc 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0b5b      	lsrs	r3, r3, #13
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4903      	ldr	r1, [pc, #12]	@ (8003ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eea:	5ccb      	ldrb	r3, [r1, r3]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	08009d90 	.word	0x08009d90

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b0ae      	sub	sp, #184	@ 0xb8
 8003f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f22:	4bcb      	ldr	r3, [pc, #812]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	f200 8206 	bhi.w	800433c <HAL_RCC_GetSysClockFreq+0x440>
 8003f30:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	0800433d 	.word	0x0800433d
 8003f40:	0800433d 	.word	0x0800433d
 8003f44:	0800433d 	.word	0x0800433d
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	0800433d 	.word	0x0800433d
 8003f50:	0800433d 	.word	0x0800433d
 8003f54:	0800433d 	.word	0x0800433d
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	0800433d 	.word	0x0800433d
 8003f60:	0800433d 	.word	0x0800433d
 8003f64:	0800433d 	.word	0x0800433d
 8003f68:	0800416d 	.word	0x0800416d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4bb9      	ldr	r3, [pc, #740]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f72:	e1e7      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f74:	4bb8      	ldr	r3, [pc, #736]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f7a:	e1e3      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7c:	4bb4      	ldr	r3, [pc, #720]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f88:	4bb1      	ldr	r3, [pc, #708]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d071      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4bae      	ldr	r3, [pc, #696]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fa0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	f04f 0000 	mov.w	r0, #0
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	0159      	lsls	r1, r3, #5
 8003fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fcc:	0150      	lsls	r0, r2, #5
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	1a51      	subs	r1, r2, r1
 8003fd6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003fd8:	4629      	mov	r1, r5
 8003fda:	eb63 0301 	sbc.w	r3, r3, r1
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003fec:	4649      	mov	r1, r9
 8003fee:	018b      	lsls	r3, r1, #6
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	018a      	lsls	r2, r1, #6
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	1a51      	subs	r1, r2, r1
 8003ffe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004000:	4649      	mov	r1, r9
 8004002:	eb63 0301 	sbc.w	r3, r3, r1
 8004006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004014:	4649      	mov	r1, r9
 8004016:	00cb      	lsls	r3, r1, #3
 8004018:	4641      	mov	r1, r8
 800401a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401e:	4641      	mov	r1, r8
 8004020:	00ca      	lsls	r2, r1, #3
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	4603      	mov	r3, r0
 8004028:	4622      	mov	r2, r4
 800402a:	189b      	adds	r3, r3, r2
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
 800402e:	462b      	mov	r3, r5
 8004030:	460a      	mov	r2, r1
 8004032:	eb42 0303 	adc.w	r3, r2, r3
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004044:	4629      	mov	r1, r5
 8004046:	024b      	lsls	r3, r1, #9
 8004048:	4621      	mov	r1, r4
 800404a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800404e:	4621      	mov	r1, r4
 8004050:	024a      	lsls	r2, r1, #9
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004060:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004064:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004068:	f7fc fe2e 	bl	8000cc8 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4613      	mov	r3, r2
 8004072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004076:	e067      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004078:	4b75      	ldr	r3, [pc, #468]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004084:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004088:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004092:	2300      	movs	r3, #0
 8004094:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004096:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4621      	mov	r1, r4
 80040b4:	1a51      	subs	r1, r2, r1
 80040b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80040cc:	4649      	mov	r1, r9
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	4641      	mov	r1, r8
 80040d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d6:	4641      	mov	r1, r8
 80040d8:	018a      	lsls	r2, r1, #6
 80040da:	4641      	mov	r1, r8
 80040dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80040e0:	4649      	mov	r1, r9
 80040e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fa:	4692      	mov	sl, r2
 80040fc:	469b      	mov	fp, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb1a 0303 	adds.w	r3, sl, r3
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	462b      	mov	r3, r5
 8004108:	eb4b 0303 	adc.w	r3, fp, r3
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800411a:	4629      	mov	r1, r5
 800411c:	028b      	lsls	r3, r1, #10
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004124:	4621      	mov	r1, r4
 8004126:	028a      	lsls	r2, r1, #10
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004130:	2200      	movs	r2, #0
 8004132:	673b      	str	r3, [r7, #112]	@ 0x70
 8004134:	677a      	str	r2, [r7, #116]	@ 0x74
 8004136:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800413a:	f7fc fdc5 	bl	8000cc8 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4613      	mov	r3, r2
 8004144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004148:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800415a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800415e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800416a:	e0eb      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416c:	4b38      	ldr	r3, [pc, #224]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004174:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004178:	4b35      	ldr	r3, [pc, #212]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d06b      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004184:	4b32      	ldr	r3, [pc, #200]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	099b      	lsrs	r3, r3, #6
 800418a:	2200      	movs	r2, #0
 800418c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800418e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004196:	663b      	str	r3, [r7, #96]	@ 0x60
 8004198:	2300      	movs	r3, #0
 800419a:	667b      	str	r3, [r7, #100]	@ 0x64
 800419c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041a0:	4622      	mov	r2, r4
 80041a2:	462b      	mov	r3, r5
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	0159      	lsls	r1, r3, #5
 80041ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b2:	0150      	lsls	r0, r2, #5
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4621      	mov	r1, r4
 80041ba:	1a51      	subs	r1, r2, r1
 80041bc:	61b9      	str	r1, [r7, #24]
 80041be:	4629      	mov	r1, r5
 80041c0:	eb63 0301 	sbc.w	r3, r3, r1
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041d2:	4659      	mov	r1, fp
 80041d4:	018b      	lsls	r3, r1, #6
 80041d6:	4651      	mov	r1, sl
 80041d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041dc:	4651      	mov	r1, sl
 80041de:	018a      	lsls	r2, r1, #6
 80041e0:	4651      	mov	r1, sl
 80041e2:	ebb2 0801 	subs.w	r8, r2, r1
 80041e6:	4659      	mov	r1, fp
 80041e8:	eb63 0901 	sbc.w	r9, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004200:	4690      	mov	r8, r2
 8004202:	4699      	mov	r9, r3
 8004204:	4623      	mov	r3, r4
 8004206:	eb18 0303 	adds.w	r3, r8, r3
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	462b      	mov	r3, r5
 800420e:	eb49 0303 	adc.w	r3, r9, r3
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004220:	4629      	mov	r1, r5
 8004222:	024b      	lsls	r3, r1, #9
 8004224:	4621      	mov	r1, r4
 8004226:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800422a:	4621      	mov	r1, r4
 800422c:	024a      	lsls	r2, r1, #9
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004236:	2200      	movs	r2, #0
 8004238:	65bb      	str	r3, [r7, #88]	@ 0x58
 800423a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800423c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004240:	f7fc fd42 	bl	8000cc8 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4613      	mov	r3, r2
 800424a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800424e:	e065      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x420>
 8004250:	40023800 	.word	0x40023800
 8004254:	00f42400 	.word	0x00f42400
 8004258:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425c:	4b3d      	ldr	r3, [pc, #244]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x458>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	2200      	movs	r2, #0
 8004264:	4618      	mov	r0, r3
 8004266:	4611      	mov	r1, r2
 8004268:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800426c:	653b      	str	r3, [r7, #80]	@ 0x50
 800426e:	2300      	movs	r3, #0
 8004270:	657b      	str	r3, [r7, #84]	@ 0x54
 8004272:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004276:	4642      	mov	r2, r8
 8004278:	464b      	mov	r3, r9
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	0159      	lsls	r1, r3, #5
 8004284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004288:	0150      	lsls	r0, r2, #5
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4641      	mov	r1, r8
 8004290:	1a51      	subs	r1, r2, r1
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	4649      	mov	r1, r9
 8004296:	eb63 0301 	sbc.w	r3, r3, r1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042a8:	4659      	mov	r1, fp
 80042aa:	018b      	lsls	r3, r1, #6
 80042ac:	4651      	mov	r1, sl
 80042ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042b2:	4651      	mov	r1, sl
 80042b4:	018a      	lsls	r2, r1, #6
 80042b6:	4651      	mov	r1, sl
 80042b8:	1a54      	subs	r4, r2, r1
 80042ba:	4659      	mov	r1, fp
 80042bc:	eb63 0501 	sbc.w	r5, r3, r1
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	00eb      	lsls	r3, r5, #3
 80042ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ce:	00e2      	lsls	r2, r4, #3
 80042d0:	4614      	mov	r4, r2
 80042d2:	461d      	mov	r5, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	18e3      	adds	r3, r4, r3
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	464b      	mov	r3, r9
 80042dc:	eb45 0303 	adc.w	r3, r5, r3
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ee:	4629      	mov	r1, r5
 80042f0:	028b      	lsls	r3, r1, #10
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f8:	4621      	mov	r1, r4
 80042fa:	028a      	lsls	r2, r1, #10
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004304:	2200      	movs	r2, #0
 8004306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004308:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800430a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800430e:	f7fc fcdb 	bl	8000cc8 <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4613      	mov	r3, r2
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x458>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0f1b      	lsrs	r3, r3, #28
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800432a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800432e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800433a:	e003      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x45c>)
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004342:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004348:	4618      	mov	r0, r3
 800434a:	37b8      	adds	r7, #184	@ 0xb8
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	00f42400 	.word	0x00f42400

0800435c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e28d      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8083 	beq.w	8004482 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800437c:	4b94      	ldr	r3, [pc, #592]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b04      	cmp	r3, #4
 8004386:	d019      	beq.n	80043bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004388:	4b91      	ldr	r3, [pc, #580]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004390:	2b08      	cmp	r3, #8
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004394:	4b8e      	ldr	r3, [pc, #568]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a0:	d00c      	beq.n	80043bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a2:	4b8b      	ldr	r3, [pc, #556]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d112      	bne.n	80043d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4b88      	ldr	r3, [pc, #544]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b84      	ldr	r3, [pc, #528]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05b      	beq.n	8004480 <HAL_RCC_OscConfig+0x124>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d157      	bne.n	8004480 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e25a      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043dc:	d106      	bne.n	80043ec <HAL_RCC_OscConfig+0x90>
 80043de:	4b7c      	ldr	r3, [pc, #496]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a7b      	ldr	r2, [pc, #492]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e01d      	b.n	8004428 <HAL_RCC_OscConfig+0xcc>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0xb4>
 80043f6:	4b76      	ldr	r3, [pc, #472]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a75      	ldr	r2, [pc, #468]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b73      	ldr	r3, [pc, #460]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a72      	ldr	r2, [pc, #456]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0xcc>
 8004410:	4b6f      	ldr	r3, [pc, #444]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6e      	ldr	r2, [pc, #440]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b6c      	ldr	r3, [pc, #432]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6b      	ldr	r2, [pc, #428]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d013      	beq.n	8004458 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fe fbd4 	bl	8002bdc <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe fbd0 	bl	8002bdc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	@ 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e21f      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0xdc>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe fbc0 	bl	8002bdc <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe fbbc 	bl	8002bdc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	@ 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e20b      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004472:	4b57      	ldr	r3, [pc, #348]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x104>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d06f      	beq.n	800456e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800448e:	4b50      	ldr	r3, [pc, #320]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800449a:	4b4d      	ldr	r3, [pc, #308]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
        || \
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d105      	bne.n	80044b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044a6:	4b4a      	ldr	r3, [pc, #296]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d11c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b44      	ldr	r3, [pc, #272]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d116      	bne.n	80044f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	4b41      	ldr	r3, [pc, #260]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_RCC_OscConfig+0x186>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e1d3      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e2:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4937      	ldr	r1, [pc, #220]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f6:	e03a      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004500:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <HAL_RCC_OscConfig+0x278>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fe fb69 	bl	8002bdc <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450e:	f7fe fb65 	bl	8002bdc <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1b4      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4925      	ldr	r1, [pc, #148]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
 8004540:	e015      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004542:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <HAL_RCC_OscConfig+0x278>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe fb48 	bl	8002bdc <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fe fb44 	bl	8002bdc <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e193      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d036      	beq.n	80045e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_RCC_OscConfig+0x27c>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fe fb28 	bl	8002bdc <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004590:	f7fe fb24 	bl	8002bdc <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e173      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80045a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x234>
 80045ae:	e01b      	b.n	80045e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b0:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fe fb11 	bl	8002bdc <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	e00e      	b.n	80045dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045be:	f7fe fb0d 	bl	8002bdc <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d907      	bls.n	80045dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e15c      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
 80045d0:	40023800 	.word	0x40023800
 80045d4:	42470000 	.word	0x42470000
 80045d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ea      	bne.n	80045be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8097 	beq.w	8004724 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b83      	ldr	r3, [pc, #524]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b7f      	ldr	r3, [pc, #508]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	4a7e      	ldr	r2, [pc, #504]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	@ 0x40
 8004616:	4b7c      	ldr	r3, [pc, #496]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b79      	ldr	r3, [pc, #484]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b76      	ldr	r3, [pc, #472]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a75      	ldr	r2, [pc, #468]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fe facd 	bl	8002bdc <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fe fac9 	bl	8002bdc <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e118      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b6c      	ldr	r3, [pc, #432]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x31e>
 800466c:	4b66      	ldr	r3, [pc, #408]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004670:	4a65      	ldr	r2, [pc, #404]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x358>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b05      	cmp	r3, #5
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x340>
 8004682:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	4a60      	ldr	r2, [pc, #384]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	@ 0x70
 800468e:	4b5e      	ldr	r3, [pc, #376]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004692:	4a5d      	ldr	r2, [pc, #372]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	@ 0x70
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0x358>
 800469c:	4b5a      	ldr	r3, [pc, #360]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	4a59      	ldr	r2, [pc, #356]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a8:	4b57      	ldr	r3, [pc, #348]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	4a56      	ldr	r2, [pc, #344]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046ae:	f023 0304 	bic.w	r3, r3, #4
 80046b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fe fa8e 	bl	8002bdc <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fe fa8a 	bl	8002bdc <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0d7      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	4b4b      	ldr	r3, [pc, #300]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ee      	beq.n	80046c4 <HAL_RCC_OscConfig+0x368>
 80046e6:	e014      	b.n	8004712 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fe fa78 	bl	8002bdc <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fe fa74 	bl	8002bdc <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0c1      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	4b40      	ldr	r3, [pc, #256]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d105      	bne.n	8004724 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004718:	4b3b      	ldr	r3, [pc, #236]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	4a3a      	ldr	r2, [pc, #232]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004722:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80ad 	beq.w	8004888 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800472e:	4b36      	ldr	r3, [pc, #216]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b08      	cmp	r3, #8
 8004738:	d060      	beq.n	80047fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d145      	bne.n	80047ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b33      	ldr	r3, [pc, #204]	@ (8004810 <HAL_RCC_OscConfig+0x4b4>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fe fa48 	bl	8002bdc <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fe fa44 	bl	8002bdc <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e093      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	071b      	lsls	r3, r3, #28
 800479a:	491b      	ldr	r1, [pc, #108]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x4b4>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fe fa19 	bl	8002bdc <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fe fa15 	bl	8002bdc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e064      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x452>
 80047cc:	e05c      	b.n	8004888 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <HAL_RCC_OscConfig+0x4b4>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe fa02 	bl	8002bdc <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe f9fe 	bl	8002bdc <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e04d      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x480>
 80047fa:	e045      	b.n	8004888 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e040      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004814:	4b1f      	ldr	r3, [pc, #124]	@ (8004894 <HAL_RCC_OscConfig+0x538>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d030      	beq.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d129      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d122      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800484a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484c:	4293      	cmp	r3, r2
 800484e:	d119      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	3b01      	subs	r3, #1
 800485e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d10f      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e042      	b.n	8004930 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd fa7e 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	@ 0x24
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa09 	bl	8004cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	@ 0x28
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b20      	cmp	r3, #32
 8004956:	d175      	bne.n	8004a44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_UART_Transmit+0x2c>
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e06e      	b.n	8004a46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2221      	movs	r2, #33	@ 0x21
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004976:	f7fe f931 	bl	8002bdc <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	88fa      	ldrh	r2, [r7, #6]
 8004986:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004990:	d108      	bne.n	80049a4 <HAL_UART_Transmit+0x6c>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e003      	b.n	80049ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049ac:	e02e      	b.n	8004a0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2180      	movs	r1, #128	@ 0x80
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8df 	bl	8004b7c <UART_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e03a      	b.n	8004a46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10b      	bne.n	80049ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	3302      	adds	r3, #2
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e007      	b.n	80049fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1cb      	bne.n	80049ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2140      	movs	r1, #64	@ 0x40
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f8ab 	bl	8004b7c <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e006      	b.n	8004a46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b08a      	sub	sp, #40	@ 0x28
 8004a52:	af02      	add	r7, sp, #8
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	f040 8081 	bne.w	8004b72 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_Receive+0x2e>
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e079      	b.n	8004b74 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2222      	movs	r2, #34	@ 0x22
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a94:	f7fe f8a2 	bl	8002bdc <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aae:	d108      	bne.n	8004ac2 <HAL_UART_Receive+0x74>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e003      	b.n	8004aca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004aca:	e047      	b.n	8004b5c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2120      	movs	r1, #32
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f850 	bl	8004b7c <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e042      	b.n	8004b74 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10c      	bne.n	8004b0e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e01f      	b.n	8004b4e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b16:	d007      	beq.n	8004b28 <HAL_UART_Receive+0xda>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_UART_Receive+0xe8>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e008      	b.n	8004b48 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1b2      	bne.n	8004acc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8c:	e03b      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d037      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fe f821 	bl	8002bdc <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e03a      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d023      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b80      	cmp	r3, #128	@ 0x80
 8004bc2:	d020      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b40      	cmp	r3, #64	@ 0x40
 8004bc8:	d01d      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d116      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f81d 	bl	8004c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e00f      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d0b4      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b095      	sub	sp, #84	@ 0x54
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c56:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e5      	bne.n	8004c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e5      	bne.n	8004c6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d119      	bne.n	8004cda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 0310 	bic.w	r3, r3, #16
 8004cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc6:	61ba      	str	r2, [r7, #24]
 8004cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ce8:	bf00      	nop
 8004cea:	3754      	adds	r7, #84	@ 0x54
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf8:	b0c0      	sub	sp, #256	@ 0x100
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	68d9      	ldr	r1, [r3, #12]
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	ea40 0301 	orr.w	r3, r0, r1
 8004d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d4c:	f021 010c 	bic.w	r1, r1, #12
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6e:	6999      	ldr	r1, [r3, #24]
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	ea40 0301 	orr.w	r3, r0, r1
 8004d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d005      	beq.n	8004d94 <UART_SetConfig+0xa0>
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8004fc4 <UART_SetConfig+0x2d0>)
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d104      	bne.n	8004d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d94:	f7ff f89e 	bl	8003ed4 <HAL_RCC_GetPCLK2Freq>
 8004d98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d9c:	e003      	b.n	8004da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d9e:	f7ff f885 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8004da2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db0:	f040 810c 	bne.w	8004fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	462b      	mov	r3, r5
 8004dca:	1891      	adds	r1, r2, r2
 8004dcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dce:	415b      	adcs	r3, r3
 8004dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	eb12 0801 	adds.w	r8, r2, r1
 8004ddc:	4629      	mov	r1, r5
 8004dde:	eb43 0901 	adc.w	r9, r3, r1
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004df6:	4690      	mov	r8, r2
 8004df8:	4699      	mov	r9, r3
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	eb18 0303 	adds.w	r3, r8, r3
 8004e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e04:	462b      	mov	r3, r5
 8004e06:	eb49 0303 	adc.w	r3, r9, r3
 8004e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e22:	460b      	mov	r3, r1
 8004e24:	18db      	adds	r3, r3, r3
 8004e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e28:	4613      	mov	r3, r2
 8004e2a:	eb42 0303 	adc.w	r3, r2, r3
 8004e2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e38:	f7fb ff46 	bl	8000cc8 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b61      	ldr	r3, [pc, #388]	@ (8004fc8 <UART_SetConfig+0x2d4>)
 8004e42:	fba3 2302 	umull	r2, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	011c      	lsls	r4, r3, #4
 8004e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	1891      	adds	r1, r2, r2
 8004e62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e64:	415b      	adcs	r3, r3
 8004e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004e72:	4649      	mov	r1, r9
 8004e74:	eb43 0b01 	adc.w	fp, r3, r1
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e8c:	4692      	mov	sl, r2
 8004e8e:	469b      	mov	fp, r3
 8004e90:	4643      	mov	r3, r8
 8004e92:	eb1a 0303 	adds.w	r3, sl, r3
 8004e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	18db      	adds	r3, r3, r3
 8004ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	eb42 0303 	adc.w	r3, r2, r3
 8004ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ece:	f7fb fefb 	bl	8000cc8 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc8 <UART_SetConfig+0x2d4>)
 8004eda:	fba3 2301 	umull	r2, r3, r3, r1
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2264      	movs	r2, #100	@ 0x64
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	1acb      	subs	r3, r1, r3
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eee:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <UART_SetConfig+0x2d4>)
 8004ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004efc:	441c      	add	r4, r3
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	1891      	adds	r1, r2, r2
 8004f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f20:	4641      	mov	r1, r8
 8004f22:	1851      	adds	r1, r2, r1
 8004f24:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f26:	4649      	mov	r1, r9
 8004f28:	414b      	adcs	r3, r1
 8004f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f38:	4659      	mov	r1, fp
 8004f3a:	00cb      	lsls	r3, r1, #3
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f42:	4651      	mov	r1, sl
 8004f44:	00ca      	lsls	r2, r1, #3
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f54:	464b      	mov	r3, r9
 8004f56:	460a      	mov	r2, r1
 8004f58:	eb42 0303 	adc.w	r3, r2, r3
 8004f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f74:	460b      	mov	r3, r1
 8004f76:	18db      	adds	r3, r3, r3
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	eb42 0303 	adc.w	r3, r2, r3
 8004f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f8a:	f7fb fe9d 	bl	8000cc8 <__aeabi_uldivmod>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <UART_SetConfig+0x2d4>)
 8004f94:	fba3 1302 	umull	r1, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	2164      	movs	r1, #100	@ 0x64
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	3332      	adds	r3, #50	@ 0x32
 8004fa6:	4a08      	ldr	r2, [pc, #32]	@ (8004fc8 <UART_SetConfig+0x2d4>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	f003 0207 	and.w	r2, r3, #7
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4422      	add	r2, r4
 8004fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fbc:	e106      	b.n	80051cc <UART_SetConfig+0x4d8>
 8004fbe:	bf00      	nop
 8004fc0:	40011000 	.word	0x40011000
 8004fc4:	40011400 	.word	0x40011400
 8004fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fde:	4642      	mov	r2, r8
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	1891      	adds	r1, r2, r2
 8004fe4:	6239      	str	r1, [r7, #32]
 8004fe6:	415b      	adcs	r3, r3
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fee:	4641      	mov	r1, r8
 8004ff0:	1854      	adds	r4, r2, r1
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	eb43 0501 	adc.w	r5, r3, r1
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	00eb      	lsls	r3, r5, #3
 8005002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005006:	00e2      	lsls	r2, r4, #3
 8005008:	4614      	mov	r4, r2
 800500a:	461d      	mov	r5, r3
 800500c:	4643      	mov	r3, r8
 800500e:	18e3      	adds	r3, r4, r3
 8005010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005014:	464b      	mov	r3, r9
 8005016:	eb45 0303 	adc.w	r3, r5, r3
 800501a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800502a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800503a:	4629      	mov	r1, r5
 800503c:	008b      	lsls	r3, r1, #2
 800503e:	4621      	mov	r1, r4
 8005040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005044:	4621      	mov	r1, r4
 8005046:	008a      	lsls	r2, r1, #2
 8005048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800504c:	f7fb fe3c 	bl	8000cc8 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4b60      	ldr	r3, [pc, #384]	@ (80051d8 <UART_SetConfig+0x4e4>)
 8005056:	fba3 2302 	umull	r2, r3, r3, r2
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	011c      	lsls	r4, r3, #4
 800505e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800506c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	1891      	adds	r1, r2, r2
 8005076:	61b9      	str	r1, [r7, #24]
 8005078:	415b      	adcs	r3, r3
 800507a:	61fb      	str	r3, [r7, #28]
 800507c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005080:	4641      	mov	r1, r8
 8005082:	1851      	adds	r1, r2, r1
 8005084:	6139      	str	r1, [r7, #16]
 8005086:	4649      	mov	r1, r9
 8005088:	414b      	adcs	r3, r1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005098:	4659      	mov	r1, fp
 800509a:	00cb      	lsls	r3, r1, #3
 800509c:	4651      	mov	r1, sl
 800509e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050a2:	4651      	mov	r1, sl
 80050a4:	00ca      	lsls	r2, r1, #3
 80050a6:	4610      	mov	r0, r2
 80050a8:	4619      	mov	r1, r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	4642      	mov	r2, r8
 80050ae:	189b      	adds	r3, r3, r2
 80050b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050b4:	464b      	mov	r3, r9
 80050b6:	460a      	mov	r2, r1
 80050b8:	eb42 0303 	adc.w	r3, r2, r3
 80050bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050d8:	4649      	mov	r1, r9
 80050da:	008b      	lsls	r3, r1, #2
 80050dc:	4641      	mov	r1, r8
 80050de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e2:	4641      	mov	r1, r8
 80050e4:	008a      	lsls	r2, r1, #2
 80050e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050ea:	f7fb fded 	bl	8000cc8 <__aeabi_uldivmod>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	4b38      	ldr	r3, [pc, #224]	@ (80051d8 <UART_SetConfig+0x4e4>)
 80050f6:	fba3 2301 	umull	r2, r3, r3, r1
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	2264      	movs	r2, #100	@ 0x64
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	1acb      	subs	r3, r1, r3
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	3332      	adds	r3, #50	@ 0x32
 8005108:	4a33      	ldr	r2, [pc, #204]	@ (80051d8 <UART_SetConfig+0x4e4>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005114:	441c      	add	r4, r3
 8005116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511a:	2200      	movs	r2, #0
 800511c:	673b      	str	r3, [r7, #112]	@ 0x70
 800511e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005120:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	1891      	adds	r1, r2, r2
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	415b      	adcs	r3, r3
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005134:	4641      	mov	r1, r8
 8005136:	1851      	adds	r1, r2, r1
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	4649      	mov	r1, r9
 800513c:	414b      	adcs	r3, r1
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800514c:	4659      	mov	r1, fp
 800514e:	00cb      	lsls	r3, r1, #3
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005156:	4651      	mov	r1, sl
 8005158:	00ca      	lsls	r2, r1, #3
 800515a:	4610      	mov	r0, r2
 800515c:	4619      	mov	r1, r3
 800515e:	4603      	mov	r3, r0
 8005160:	4642      	mov	r2, r8
 8005162:	189b      	adds	r3, r3, r2
 8005164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005166:	464b      	mov	r3, r9
 8005168:	460a      	mov	r2, r1
 800516a:	eb42 0303 	adc.w	r3, r2, r3
 800516e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	663b      	str	r3, [r7, #96]	@ 0x60
 800517a:	667a      	str	r2, [r7, #100]	@ 0x64
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005188:	4649      	mov	r1, r9
 800518a:	008b      	lsls	r3, r1, #2
 800518c:	4641      	mov	r1, r8
 800518e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005192:	4641      	mov	r1, r8
 8005194:	008a      	lsls	r2, r1, #2
 8005196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800519a:	f7fb fd95 	bl	8000cc8 <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4b0d      	ldr	r3, [pc, #52]	@ (80051d8 <UART_SetConfig+0x4e4>)
 80051a4:	fba3 1302 	umull	r1, r3, r3, r2
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	2164      	movs	r1, #100	@ 0x64
 80051ac:	fb01 f303 	mul.w	r3, r1, r3
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	3332      	adds	r3, #50	@ 0x32
 80051b6:	4a08      	ldr	r2, [pc, #32]	@ (80051d8 <UART_SetConfig+0x4e4>)
 80051b8:	fba2 2303 	umull	r2, r3, r2, r3
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4422      	add	r2, r4
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051d2:	46bd      	mov	sp, r7
 80051d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d8:	51eb851f 	.word	0x51eb851f

080051dc <atof>:
 80051dc:	2100      	movs	r1, #0
 80051de:	f000 be09 	b.w	8005df4 <strtod>

080051e2 <sulp>:
 80051e2:	b570      	push	{r4, r5, r6, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	460d      	mov	r5, r1
 80051e8:	ec45 4b10 	vmov	d0, r4, r5
 80051ec:	4616      	mov	r6, r2
 80051ee:	f003 fd1b 	bl	8008c28 <__ulp>
 80051f2:	ec51 0b10 	vmov	r0, r1, d0
 80051f6:	b17e      	cbz	r6, 8005218 <sulp+0x36>
 80051f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80051fc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005200:	2b00      	cmp	r3, #0
 8005202:	dd09      	ble.n	8005218 <sulp+0x36>
 8005204:	051b      	lsls	r3, r3, #20
 8005206:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800520a:	2400      	movs	r4, #0
 800520c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005210:	4622      	mov	r2, r4
 8005212:	462b      	mov	r3, r5
 8005214:	f7fb fa10 	bl	8000638 <__aeabi_dmul>
 8005218:	ec41 0b10 	vmov	d0, r0, r1
 800521c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005220 <_strtod_l>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	b09f      	sub	sp, #124	@ 0x7c
 8005226:	460c      	mov	r4, r1
 8005228:	9217      	str	r2, [sp, #92]	@ 0x5c
 800522a:	2200      	movs	r2, #0
 800522c:	921a      	str	r2, [sp, #104]	@ 0x68
 800522e:	9005      	str	r0, [sp, #20]
 8005230:	f04f 0a00 	mov.w	sl, #0
 8005234:	f04f 0b00 	mov.w	fp, #0
 8005238:	460a      	mov	r2, r1
 800523a:	9219      	str	r2, [sp, #100]	@ 0x64
 800523c:	7811      	ldrb	r1, [r2, #0]
 800523e:	292b      	cmp	r1, #43	@ 0x2b
 8005240:	d04a      	beq.n	80052d8 <_strtod_l+0xb8>
 8005242:	d838      	bhi.n	80052b6 <_strtod_l+0x96>
 8005244:	290d      	cmp	r1, #13
 8005246:	d832      	bhi.n	80052ae <_strtod_l+0x8e>
 8005248:	2908      	cmp	r1, #8
 800524a:	d832      	bhi.n	80052b2 <_strtod_l+0x92>
 800524c:	2900      	cmp	r1, #0
 800524e:	d03b      	beq.n	80052c8 <_strtod_l+0xa8>
 8005250:	2200      	movs	r2, #0
 8005252:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005254:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005256:	782a      	ldrb	r2, [r5, #0]
 8005258:	2a30      	cmp	r2, #48	@ 0x30
 800525a:	f040 80b3 	bne.w	80053c4 <_strtod_l+0x1a4>
 800525e:	786a      	ldrb	r2, [r5, #1]
 8005260:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005264:	2a58      	cmp	r2, #88	@ 0x58
 8005266:	d16e      	bne.n	8005346 <_strtod_l+0x126>
 8005268:	9302      	str	r3, [sp, #8]
 800526a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4a8e      	ldr	r2, [pc, #568]	@ (80054ac <_strtod_l+0x28c>)
 8005274:	9805      	ldr	r0, [sp, #20]
 8005276:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005278:	a919      	add	r1, sp, #100	@ 0x64
 800527a:	f002 fdc7 	bl	8007e0c <__gethex>
 800527e:	f010 060f 	ands.w	r6, r0, #15
 8005282:	4604      	mov	r4, r0
 8005284:	d005      	beq.n	8005292 <_strtod_l+0x72>
 8005286:	2e06      	cmp	r6, #6
 8005288:	d128      	bne.n	80052dc <_strtod_l+0xbc>
 800528a:	3501      	adds	r5, #1
 800528c:	2300      	movs	r3, #0
 800528e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005290:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005292:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005294:	2b00      	cmp	r3, #0
 8005296:	f040 858e 	bne.w	8005db6 <_strtod_l+0xb96>
 800529a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800529c:	b1cb      	cbz	r3, 80052d2 <_strtod_l+0xb2>
 800529e:	4652      	mov	r2, sl
 80052a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80052a4:	ec43 2b10 	vmov	d0, r2, r3
 80052a8:	b01f      	add	sp, #124	@ 0x7c
 80052aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ae:	2920      	cmp	r1, #32
 80052b0:	d1ce      	bne.n	8005250 <_strtod_l+0x30>
 80052b2:	3201      	adds	r2, #1
 80052b4:	e7c1      	b.n	800523a <_strtod_l+0x1a>
 80052b6:	292d      	cmp	r1, #45	@ 0x2d
 80052b8:	d1ca      	bne.n	8005250 <_strtod_l+0x30>
 80052ba:	2101      	movs	r1, #1
 80052bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80052be:	1c51      	adds	r1, r2, #1
 80052c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80052c2:	7852      	ldrb	r2, [r2, #1]
 80052c4:	2a00      	cmp	r2, #0
 80052c6:	d1c5      	bne.n	8005254 <_strtod_l+0x34>
 80052c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80052ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8570 	bne.w	8005db2 <_strtod_l+0xb92>
 80052d2:	4652      	mov	r2, sl
 80052d4:	465b      	mov	r3, fp
 80052d6:	e7e5      	b.n	80052a4 <_strtod_l+0x84>
 80052d8:	2100      	movs	r1, #0
 80052da:	e7ef      	b.n	80052bc <_strtod_l+0x9c>
 80052dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80052de:	b13a      	cbz	r2, 80052f0 <_strtod_l+0xd0>
 80052e0:	2135      	movs	r1, #53	@ 0x35
 80052e2:	a81c      	add	r0, sp, #112	@ 0x70
 80052e4:	f003 fd9a 	bl	8008e1c <__copybits>
 80052e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80052ea:	9805      	ldr	r0, [sp, #20]
 80052ec:	f003 f968 	bl	80085c0 <_Bfree>
 80052f0:	3e01      	subs	r6, #1
 80052f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80052f4:	2e04      	cmp	r6, #4
 80052f6:	d806      	bhi.n	8005306 <_strtod_l+0xe6>
 80052f8:	e8df f006 	tbb	[pc, r6]
 80052fc:	201d0314 	.word	0x201d0314
 8005300:	14          	.byte	0x14
 8005301:	00          	.byte	0x00
 8005302:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005306:	05e1      	lsls	r1, r4, #23
 8005308:	bf48      	it	mi
 800530a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800530e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005312:	0d1b      	lsrs	r3, r3, #20
 8005314:	051b      	lsls	r3, r3, #20
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1bb      	bne.n	8005292 <_strtod_l+0x72>
 800531a:	f001 fe0f 	bl	8006f3c <__errno>
 800531e:	2322      	movs	r3, #34	@ 0x22
 8005320:	6003      	str	r3, [r0, #0]
 8005322:	e7b6      	b.n	8005292 <_strtod_l+0x72>
 8005324:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005328:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800532c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005330:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005334:	e7e7      	b.n	8005306 <_strtod_l+0xe6>
 8005336:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80054b4 <_strtod_l+0x294>
 800533a:	e7e4      	b.n	8005306 <_strtod_l+0xe6>
 800533c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005340:	f04f 3aff 	mov.w	sl, #4294967295
 8005344:	e7df      	b.n	8005306 <_strtod_l+0xe6>
 8005346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	9219      	str	r2, [sp, #100]	@ 0x64
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b30      	cmp	r3, #48	@ 0x30
 8005350:	d0f9      	beq.n	8005346 <_strtod_l+0x126>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d09d      	beq.n	8005292 <_strtod_l+0x72>
 8005356:	2301      	movs	r3, #1
 8005358:	9309      	str	r3, [sp, #36]	@ 0x24
 800535a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800535c:	930c      	str	r3, [sp, #48]	@ 0x30
 800535e:	2300      	movs	r3, #0
 8005360:	9308      	str	r3, [sp, #32]
 8005362:	930a      	str	r3, [sp, #40]	@ 0x28
 8005364:	461f      	mov	r7, r3
 8005366:	220a      	movs	r2, #10
 8005368:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800536a:	7805      	ldrb	r5, [r0, #0]
 800536c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005370:	b2d9      	uxtb	r1, r3
 8005372:	2909      	cmp	r1, #9
 8005374:	d928      	bls.n	80053c8 <_strtod_l+0x1a8>
 8005376:	494e      	ldr	r1, [pc, #312]	@ (80054b0 <_strtod_l+0x290>)
 8005378:	2201      	movs	r2, #1
 800537a:	f001 fd14 	bl	8006da6 <strncmp>
 800537e:	2800      	cmp	r0, #0
 8005380:	d032      	beq.n	80053e8 <_strtod_l+0x1c8>
 8005382:	2000      	movs	r0, #0
 8005384:	462a      	mov	r2, r5
 8005386:	4681      	mov	r9, r0
 8005388:	463d      	mov	r5, r7
 800538a:	4603      	mov	r3, r0
 800538c:	2a65      	cmp	r2, #101	@ 0x65
 800538e:	d001      	beq.n	8005394 <_strtod_l+0x174>
 8005390:	2a45      	cmp	r2, #69	@ 0x45
 8005392:	d114      	bne.n	80053be <_strtod_l+0x19e>
 8005394:	b91d      	cbnz	r5, 800539e <_strtod_l+0x17e>
 8005396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005398:	4302      	orrs	r2, r0
 800539a:	d095      	beq.n	80052c8 <_strtod_l+0xa8>
 800539c:	2500      	movs	r5, #0
 800539e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80053a0:	1c62      	adds	r2, r4, #1
 80053a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80053a4:	7862      	ldrb	r2, [r4, #1]
 80053a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80053a8:	d077      	beq.n	800549a <_strtod_l+0x27a>
 80053aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80053ac:	d07b      	beq.n	80054a6 <_strtod_l+0x286>
 80053ae:	f04f 0c00 	mov.w	ip, #0
 80053b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80053b6:	2909      	cmp	r1, #9
 80053b8:	f240 8082 	bls.w	80054c0 <_strtod_l+0x2a0>
 80053bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	e0a2      	b.n	800550a <_strtod_l+0x2ea>
 80053c4:	2300      	movs	r3, #0
 80053c6:	e7c7      	b.n	8005358 <_strtod_l+0x138>
 80053c8:	2f08      	cmp	r7, #8
 80053ca:	bfd5      	itete	le
 80053cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80053ce:	9908      	ldrgt	r1, [sp, #32]
 80053d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80053d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80053d8:	f100 0001 	add.w	r0, r0, #1
 80053dc:	bfd4      	ite	le
 80053de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80053e0:	9308      	strgt	r3, [sp, #32]
 80053e2:	3701      	adds	r7, #1
 80053e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80053e6:	e7bf      	b.n	8005368 <_strtod_l+0x148>
 80053e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80053ee:	785a      	ldrb	r2, [r3, #1]
 80053f0:	b37f      	cbz	r7, 8005452 <_strtod_l+0x232>
 80053f2:	4681      	mov	r9, r0
 80053f4:	463d      	mov	r5, r7
 80053f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80053fa:	2b09      	cmp	r3, #9
 80053fc:	d912      	bls.n	8005424 <_strtod_l+0x204>
 80053fe:	2301      	movs	r3, #1
 8005400:	e7c4      	b.n	800538c <_strtod_l+0x16c>
 8005402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	9219      	str	r2, [sp, #100]	@ 0x64
 8005408:	785a      	ldrb	r2, [r3, #1]
 800540a:	3001      	adds	r0, #1
 800540c:	2a30      	cmp	r2, #48	@ 0x30
 800540e:	d0f8      	beq.n	8005402 <_strtod_l+0x1e2>
 8005410:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005414:	2b08      	cmp	r3, #8
 8005416:	f200 84d3 	bhi.w	8005dc0 <_strtod_l+0xba0>
 800541a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800541c:	930c      	str	r3, [sp, #48]	@ 0x30
 800541e:	4681      	mov	r9, r0
 8005420:	2000      	movs	r0, #0
 8005422:	4605      	mov	r5, r0
 8005424:	3a30      	subs	r2, #48	@ 0x30
 8005426:	f100 0301 	add.w	r3, r0, #1
 800542a:	d02a      	beq.n	8005482 <_strtod_l+0x262>
 800542c:	4499      	add	r9, r3
 800542e:	eb00 0c05 	add.w	ip, r0, r5
 8005432:	462b      	mov	r3, r5
 8005434:	210a      	movs	r1, #10
 8005436:	4563      	cmp	r3, ip
 8005438:	d10d      	bne.n	8005456 <_strtod_l+0x236>
 800543a:	1c69      	adds	r1, r5, #1
 800543c:	4401      	add	r1, r0
 800543e:	4428      	add	r0, r5
 8005440:	2808      	cmp	r0, #8
 8005442:	dc16      	bgt.n	8005472 <_strtod_l+0x252>
 8005444:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005446:	230a      	movs	r3, #10
 8005448:	fb03 2300 	mla	r3, r3, r0, r2
 800544c:	930a      	str	r3, [sp, #40]	@ 0x28
 800544e:	2300      	movs	r3, #0
 8005450:	e018      	b.n	8005484 <_strtod_l+0x264>
 8005452:	4638      	mov	r0, r7
 8005454:	e7da      	b.n	800540c <_strtod_l+0x1ec>
 8005456:	2b08      	cmp	r3, #8
 8005458:	f103 0301 	add.w	r3, r3, #1
 800545c:	dc03      	bgt.n	8005466 <_strtod_l+0x246>
 800545e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005460:	434e      	muls	r6, r1
 8005462:	960a      	str	r6, [sp, #40]	@ 0x28
 8005464:	e7e7      	b.n	8005436 <_strtod_l+0x216>
 8005466:	2b10      	cmp	r3, #16
 8005468:	bfde      	ittt	le
 800546a:	9e08      	ldrle	r6, [sp, #32]
 800546c:	434e      	mulle	r6, r1
 800546e:	9608      	strle	r6, [sp, #32]
 8005470:	e7e1      	b.n	8005436 <_strtod_l+0x216>
 8005472:	280f      	cmp	r0, #15
 8005474:	dceb      	bgt.n	800544e <_strtod_l+0x22e>
 8005476:	9808      	ldr	r0, [sp, #32]
 8005478:	230a      	movs	r3, #10
 800547a:	fb03 2300 	mla	r3, r3, r0, r2
 800547e:	9308      	str	r3, [sp, #32]
 8005480:	e7e5      	b.n	800544e <_strtod_l+0x22e>
 8005482:	4629      	mov	r1, r5
 8005484:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005486:	1c50      	adds	r0, r2, #1
 8005488:	9019      	str	r0, [sp, #100]	@ 0x64
 800548a:	7852      	ldrb	r2, [r2, #1]
 800548c:	4618      	mov	r0, r3
 800548e:	460d      	mov	r5, r1
 8005490:	e7b1      	b.n	80053f6 <_strtod_l+0x1d6>
 8005492:	f04f 0900 	mov.w	r9, #0
 8005496:	2301      	movs	r3, #1
 8005498:	e77d      	b.n	8005396 <_strtod_l+0x176>
 800549a:	f04f 0c00 	mov.w	ip, #0
 800549e:	1ca2      	adds	r2, r4, #2
 80054a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80054a2:	78a2      	ldrb	r2, [r4, #2]
 80054a4:	e785      	b.n	80053b2 <_strtod_l+0x192>
 80054a6:	f04f 0c01 	mov.w	ip, #1
 80054aa:	e7f8      	b.n	800549e <_strtod_l+0x27e>
 80054ac:	08009db0 	.word	0x08009db0
 80054b0:	08009d98 	.word	0x08009d98
 80054b4:	7ff00000 	.word	0x7ff00000
 80054b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054ba:	1c51      	adds	r1, r2, #1
 80054bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80054be:	7852      	ldrb	r2, [r2, #1]
 80054c0:	2a30      	cmp	r2, #48	@ 0x30
 80054c2:	d0f9      	beq.n	80054b8 <_strtod_l+0x298>
 80054c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80054c8:	2908      	cmp	r1, #8
 80054ca:	f63f af78 	bhi.w	80053be <_strtod_l+0x19e>
 80054ce:	3a30      	subs	r2, #48	@ 0x30
 80054d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80054d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80054d6:	f04f 080a 	mov.w	r8, #10
 80054da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054dc:	1c56      	adds	r6, r2, #1
 80054de:	9619      	str	r6, [sp, #100]	@ 0x64
 80054e0:	7852      	ldrb	r2, [r2, #1]
 80054e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80054e6:	f1be 0f09 	cmp.w	lr, #9
 80054ea:	d939      	bls.n	8005560 <_strtod_l+0x340>
 80054ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80054ee:	1a76      	subs	r6, r6, r1
 80054f0:	2e08      	cmp	r6, #8
 80054f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80054f6:	dc03      	bgt.n	8005500 <_strtod_l+0x2e0>
 80054f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80054fa:	4588      	cmp	r8, r1
 80054fc:	bfa8      	it	ge
 80054fe:	4688      	movge	r8, r1
 8005500:	f1bc 0f00 	cmp.w	ip, #0
 8005504:	d001      	beq.n	800550a <_strtod_l+0x2ea>
 8005506:	f1c8 0800 	rsb	r8, r8, #0
 800550a:	2d00      	cmp	r5, #0
 800550c:	d14e      	bne.n	80055ac <_strtod_l+0x38c>
 800550e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005510:	4308      	orrs	r0, r1
 8005512:	f47f aebe 	bne.w	8005292 <_strtod_l+0x72>
 8005516:	2b00      	cmp	r3, #0
 8005518:	f47f aed6 	bne.w	80052c8 <_strtod_l+0xa8>
 800551c:	2a69      	cmp	r2, #105	@ 0x69
 800551e:	d028      	beq.n	8005572 <_strtod_l+0x352>
 8005520:	dc25      	bgt.n	800556e <_strtod_l+0x34e>
 8005522:	2a49      	cmp	r2, #73	@ 0x49
 8005524:	d025      	beq.n	8005572 <_strtod_l+0x352>
 8005526:	2a4e      	cmp	r2, #78	@ 0x4e
 8005528:	f47f aece 	bne.w	80052c8 <_strtod_l+0xa8>
 800552c:	499b      	ldr	r1, [pc, #620]	@ (800579c <_strtod_l+0x57c>)
 800552e:	a819      	add	r0, sp, #100	@ 0x64
 8005530:	f002 fe8e 	bl	8008250 <__match>
 8005534:	2800      	cmp	r0, #0
 8005536:	f43f aec7 	beq.w	80052c8 <_strtod_l+0xa8>
 800553a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b28      	cmp	r3, #40	@ 0x28
 8005540:	d12e      	bne.n	80055a0 <_strtod_l+0x380>
 8005542:	4997      	ldr	r1, [pc, #604]	@ (80057a0 <_strtod_l+0x580>)
 8005544:	aa1c      	add	r2, sp, #112	@ 0x70
 8005546:	a819      	add	r0, sp, #100	@ 0x64
 8005548:	f002 fe96 	bl	8008278 <__hexnan>
 800554c:	2805      	cmp	r0, #5
 800554e:	d127      	bne.n	80055a0 <_strtod_l+0x380>
 8005550:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005552:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005556:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800555a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800555e:	e698      	b.n	8005292 <_strtod_l+0x72>
 8005560:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005562:	fb08 2101 	mla	r1, r8, r1, r2
 8005566:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800556a:	920e      	str	r2, [sp, #56]	@ 0x38
 800556c:	e7b5      	b.n	80054da <_strtod_l+0x2ba>
 800556e:	2a6e      	cmp	r2, #110	@ 0x6e
 8005570:	e7da      	b.n	8005528 <_strtod_l+0x308>
 8005572:	498c      	ldr	r1, [pc, #560]	@ (80057a4 <_strtod_l+0x584>)
 8005574:	a819      	add	r0, sp, #100	@ 0x64
 8005576:	f002 fe6b 	bl	8008250 <__match>
 800557a:	2800      	cmp	r0, #0
 800557c:	f43f aea4 	beq.w	80052c8 <_strtod_l+0xa8>
 8005580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005582:	4989      	ldr	r1, [pc, #548]	@ (80057a8 <_strtod_l+0x588>)
 8005584:	3b01      	subs	r3, #1
 8005586:	a819      	add	r0, sp, #100	@ 0x64
 8005588:	9319      	str	r3, [sp, #100]	@ 0x64
 800558a:	f002 fe61 	bl	8008250 <__match>
 800558e:	b910      	cbnz	r0, 8005596 <_strtod_l+0x376>
 8005590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005592:	3301      	adds	r3, #1
 8005594:	9319      	str	r3, [sp, #100]	@ 0x64
 8005596:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80057b8 <_strtod_l+0x598>
 800559a:	f04f 0a00 	mov.w	sl, #0
 800559e:	e678      	b.n	8005292 <_strtod_l+0x72>
 80055a0:	4882      	ldr	r0, [pc, #520]	@ (80057ac <_strtod_l+0x58c>)
 80055a2:	f001 fd09 	bl	8006fb8 <nan>
 80055a6:	ec5b ab10 	vmov	sl, fp, d0
 80055aa:	e672      	b.n	8005292 <_strtod_l+0x72>
 80055ac:	eba8 0309 	sub.w	r3, r8, r9
 80055b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80055b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	bf08      	it	eq
 80055b8:	462f      	moveq	r7, r5
 80055ba:	2d10      	cmp	r5, #16
 80055bc:	462c      	mov	r4, r5
 80055be:	bfa8      	it	ge
 80055c0:	2410      	movge	r4, #16
 80055c2:	f7fa ffbf 	bl	8000544 <__aeabi_ui2d>
 80055c6:	2d09      	cmp	r5, #9
 80055c8:	4682      	mov	sl, r0
 80055ca:	468b      	mov	fp, r1
 80055cc:	dc13      	bgt.n	80055f6 <_strtod_l+0x3d6>
 80055ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f43f ae5e 	beq.w	8005292 <_strtod_l+0x72>
 80055d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d8:	dd78      	ble.n	80056cc <_strtod_l+0x4ac>
 80055da:	2b16      	cmp	r3, #22
 80055dc:	dc5f      	bgt.n	800569e <_strtod_l+0x47e>
 80055de:	4974      	ldr	r1, [pc, #464]	@ (80057b0 <_strtod_l+0x590>)
 80055e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80055e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e8:	4652      	mov	r2, sl
 80055ea:	465b      	mov	r3, fp
 80055ec:	f7fb f824 	bl	8000638 <__aeabi_dmul>
 80055f0:	4682      	mov	sl, r0
 80055f2:	468b      	mov	fp, r1
 80055f4:	e64d      	b.n	8005292 <_strtod_l+0x72>
 80055f6:	4b6e      	ldr	r3, [pc, #440]	@ (80057b0 <_strtod_l+0x590>)
 80055f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005600:	f7fb f81a 	bl	8000638 <__aeabi_dmul>
 8005604:	4682      	mov	sl, r0
 8005606:	9808      	ldr	r0, [sp, #32]
 8005608:	468b      	mov	fp, r1
 800560a:	f7fa ff9b 	bl	8000544 <__aeabi_ui2d>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4650      	mov	r0, sl
 8005614:	4659      	mov	r1, fp
 8005616:	f7fa fe59 	bl	80002cc <__adddf3>
 800561a:	2d0f      	cmp	r5, #15
 800561c:	4682      	mov	sl, r0
 800561e:	468b      	mov	fp, r1
 8005620:	ddd5      	ble.n	80055ce <_strtod_l+0x3ae>
 8005622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005624:	1b2c      	subs	r4, r5, r4
 8005626:	441c      	add	r4, r3
 8005628:	2c00      	cmp	r4, #0
 800562a:	f340 8096 	ble.w	800575a <_strtod_l+0x53a>
 800562e:	f014 030f 	ands.w	r3, r4, #15
 8005632:	d00a      	beq.n	800564a <_strtod_l+0x42a>
 8005634:	495e      	ldr	r1, [pc, #376]	@ (80057b0 <_strtod_l+0x590>)
 8005636:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800563a:	4652      	mov	r2, sl
 800563c:	465b      	mov	r3, fp
 800563e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005642:	f7fa fff9 	bl	8000638 <__aeabi_dmul>
 8005646:	4682      	mov	sl, r0
 8005648:	468b      	mov	fp, r1
 800564a:	f034 040f 	bics.w	r4, r4, #15
 800564e:	d073      	beq.n	8005738 <_strtod_l+0x518>
 8005650:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005654:	dd48      	ble.n	80056e8 <_strtod_l+0x4c8>
 8005656:	2400      	movs	r4, #0
 8005658:	46a0      	mov	r8, r4
 800565a:	940a      	str	r4, [sp, #40]	@ 0x28
 800565c:	46a1      	mov	r9, r4
 800565e:	9a05      	ldr	r2, [sp, #20]
 8005660:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80057b8 <_strtod_l+0x598>
 8005664:	2322      	movs	r3, #34	@ 0x22
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	f04f 0a00 	mov.w	sl, #0
 800566c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	f43f ae0f 	beq.w	8005292 <_strtod_l+0x72>
 8005674:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005676:	9805      	ldr	r0, [sp, #20]
 8005678:	f002 ffa2 	bl	80085c0 <_Bfree>
 800567c:	9805      	ldr	r0, [sp, #20]
 800567e:	4649      	mov	r1, r9
 8005680:	f002 ff9e 	bl	80085c0 <_Bfree>
 8005684:	9805      	ldr	r0, [sp, #20]
 8005686:	4641      	mov	r1, r8
 8005688:	f002 ff9a 	bl	80085c0 <_Bfree>
 800568c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800568e:	9805      	ldr	r0, [sp, #20]
 8005690:	f002 ff96 	bl	80085c0 <_Bfree>
 8005694:	9805      	ldr	r0, [sp, #20]
 8005696:	4621      	mov	r1, r4
 8005698:	f002 ff92 	bl	80085c0 <_Bfree>
 800569c:	e5f9      	b.n	8005292 <_strtod_l+0x72>
 800569e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80056a4:	4293      	cmp	r3, r2
 80056a6:	dbbc      	blt.n	8005622 <_strtod_l+0x402>
 80056a8:	4c41      	ldr	r4, [pc, #260]	@ (80057b0 <_strtod_l+0x590>)
 80056aa:	f1c5 050f 	rsb	r5, r5, #15
 80056ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80056b2:	4652      	mov	r2, sl
 80056b4:	465b      	mov	r3, fp
 80056b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ba:	f7fa ffbd 	bl	8000638 <__aeabi_dmul>
 80056be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c0:	1b5d      	subs	r5, r3, r5
 80056c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80056c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80056ca:	e78f      	b.n	80055ec <_strtod_l+0x3cc>
 80056cc:	3316      	adds	r3, #22
 80056ce:	dba8      	blt.n	8005622 <_strtod_l+0x402>
 80056d0:	4b37      	ldr	r3, [pc, #220]	@ (80057b0 <_strtod_l+0x590>)
 80056d2:	eba9 0808 	sub.w	r8, r9, r8
 80056d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80056da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80056de:	4650      	mov	r0, sl
 80056e0:	4659      	mov	r1, fp
 80056e2:	f7fb f8d3 	bl	800088c <__aeabi_ddiv>
 80056e6:	e783      	b.n	80055f0 <_strtod_l+0x3d0>
 80056e8:	4b32      	ldr	r3, [pc, #200]	@ (80057b4 <_strtod_l+0x594>)
 80056ea:	9308      	str	r3, [sp, #32]
 80056ec:	2300      	movs	r3, #0
 80056ee:	1124      	asrs	r4, r4, #4
 80056f0:	4650      	mov	r0, sl
 80056f2:	4659      	mov	r1, fp
 80056f4:	461e      	mov	r6, r3
 80056f6:	2c01      	cmp	r4, #1
 80056f8:	dc21      	bgt.n	800573e <_strtod_l+0x51e>
 80056fa:	b10b      	cbz	r3, 8005700 <_strtod_l+0x4e0>
 80056fc:	4682      	mov	sl, r0
 80056fe:	468b      	mov	fp, r1
 8005700:	492c      	ldr	r1, [pc, #176]	@ (80057b4 <_strtod_l+0x594>)
 8005702:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005706:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800570a:	4652      	mov	r2, sl
 800570c:	465b      	mov	r3, fp
 800570e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005712:	f7fa ff91 	bl	8000638 <__aeabi_dmul>
 8005716:	4b28      	ldr	r3, [pc, #160]	@ (80057b8 <_strtod_l+0x598>)
 8005718:	460a      	mov	r2, r1
 800571a:	400b      	ands	r3, r1
 800571c:	4927      	ldr	r1, [pc, #156]	@ (80057bc <_strtod_l+0x59c>)
 800571e:	428b      	cmp	r3, r1
 8005720:	4682      	mov	sl, r0
 8005722:	d898      	bhi.n	8005656 <_strtod_l+0x436>
 8005724:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005728:	428b      	cmp	r3, r1
 800572a:	bf86      	itte	hi
 800572c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80057c0 <_strtod_l+0x5a0>
 8005730:	f04f 3aff 	movhi.w	sl, #4294967295
 8005734:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005738:	2300      	movs	r3, #0
 800573a:	9308      	str	r3, [sp, #32]
 800573c:	e07a      	b.n	8005834 <_strtod_l+0x614>
 800573e:	07e2      	lsls	r2, r4, #31
 8005740:	d505      	bpl.n	800574e <_strtod_l+0x52e>
 8005742:	9b08      	ldr	r3, [sp, #32]
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f7fa ff76 	bl	8000638 <__aeabi_dmul>
 800574c:	2301      	movs	r3, #1
 800574e:	9a08      	ldr	r2, [sp, #32]
 8005750:	3208      	adds	r2, #8
 8005752:	3601      	adds	r6, #1
 8005754:	1064      	asrs	r4, r4, #1
 8005756:	9208      	str	r2, [sp, #32]
 8005758:	e7cd      	b.n	80056f6 <_strtod_l+0x4d6>
 800575a:	d0ed      	beq.n	8005738 <_strtod_l+0x518>
 800575c:	4264      	negs	r4, r4
 800575e:	f014 020f 	ands.w	r2, r4, #15
 8005762:	d00a      	beq.n	800577a <_strtod_l+0x55a>
 8005764:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <_strtod_l+0x590>)
 8005766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800576a:	4650      	mov	r0, sl
 800576c:	4659      	mov	r1, fp
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f7fb f88b 	bl	800088c <__aeabi_ddiv>
 8005776:	4682      	mov	sl, r0
 8005778:	468b      	mov	fp, r1
 800577a:	1124      	asrs	r4, r4, #4
 800577c:	d0dc      	beq.n	8005738 <_strtod_l+0x518>
 800577e:	2c1f      	cmp	r4, #31
 8005780:	dd20      	ble.n	80057c4 <_strtod_l+0x5a4>
 8005782:	2400      	movs	r4, #0
 8005784:	46a0      	mov	r8, r4
 8005786:	940a      	str	r4, [sp, #40]	@ 0x28
 8005788:	46a1      	mov	r9, r4
 800578a:	9a05      	ldr	r2, [sp, #20]
 800578c:	2322      	movs	r3, #34	@ 0x22
 800578e:	f04f 0a00 	mov.w	sl, #0
 8005792:	f04f 0b00 	mov.w	fp, #0
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e768      	b.n	800566c <_strtod_l+0x44c>
 800579a:	bf00      	nop
 800579c:	08009dfd 	.word	0x08009dfd
 80057a0:	08009d9c 	.word	0x08009d9c
 80057a4:	08009df5 	.word	0x08009df5
 80057a8:	08009ee1 	.word	0x08009ee1
 80057ac:	08009edd 	.word	0x08009edd
 80057b0:	0800a048 	.word	0x0800a048
 80057b4:	0800a020 	.word	0x0800a020
 80057b8:	7ff00000 	.word	0x7ff00000
 80057bc:	7ca00000 	.word	0x7ca00000
 80057c0:	7fefffff 	.word	0x7fefffff
 80057c4:	f014 0310 	ands.w	r3, r4, #16
 80057c8:	bf18      	it	ne
 80057ca:	236a      	movne	r3, #106	@ 0x6a
 80057cc:	4ea9      	ldr	r6, [pc, #676]	@ (8005a74 <_strtod_l+0x854>)
 80057ce:	9308      	str	r3, [sp, #32]
 80057d0:	4650      	mov	r0, sl
 80057d2:	4659      	mov	r1, fp
 80057d4:	2300      	movs	r3, #0
 80057d6:	07e2      	lsls	r2, r4, #31
 80057d8:	d504      	bpl.n	80057e4 <_strtod_l+0x5c4>
 80057da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057de:	f7fa ff2b 	bl	8000638 <__aeabi_dmul>
 80057e2:	2301      	movs	r3, #1
 80057e4:	1064      	asrs	r4, r4, #1
 80057e6:	f106 0608 	add.w	r6, r6, #8
 80057ea:	d1f4      	bne.n	80057d6 <_strtod_l+0x5b6>
 80057ec:	b10b      	cbz	r3, 80057f2 <_strtod_l+0x5d2>
 80057ee:	4682      	mov	sl, r0
 80057f0:	468b      	mov	fp, r1
 80057f2:	9b08      	ldr	r3, [sp, #32]
 80057f4:	b1b3      	cbz	r3, 8005824 <_strtod_l+0x604>
 80057f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80057fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80057fe:	2b00      	cmp	r3, #0
 8005800:	4659      	mov	r1, fp
 8005802:	dd0f      	ble.n	8005824 <_strtod_l+0x604>
 8005804:	2b1f      	cmp	r3, #31
 8005806:	dd55      	ble.n	80058b4 <_strtod_l+0x694>
 8005808:	2b34      	cmp	r3, #52	@ 0x34
 800580a:	bfde      	ittt	le
 800580c:	f04f 33ff 	movle.w	r3, #4294967295
 8005810:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005814:	4093      	lslle	r3, r2
 8005816:	f04f 0a00 	mov.w	sl, #0
 800581a:	bfcc      	ite	gt
 800581c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005820:	ea03 0b01 	andle.w	fp, r3, r1
 8005824:	2200      	movs	r2, #0
 8005826:	2300      	movs	r3, #0
 8005828:	4650      	mov	r0, sl
 800582a:	4659      	mov	r1, fp
 800582c:	f7fb f96c 	bl	8000b08 <__aeabi_dcmpeq>
 8005830:	2800      	cmp	r0, #0
 8005832:	d1a6      	bne.n	8005782 <_strtod_l+0x562>
 8005834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800583a:	9805      	ldr	r0, [sp, #20]
 800583c:	462b      	mov	r3, r5
 800583e:	463a      	mov	r2, r7
 8005840:	f002 ff26 	bl	8008690 <__s2b>
 8005844:	900a      	str	r0, [sp, #40]	@ 0x28
 8005846:	2800      	cmp	r0, #0
 8005848:	f43f af05 	beq.w	8005656 <_strtod_l+0x436>
 800584c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800584e:	2a00      	cmp	r2, #0
 8005850:	eba9 0308 	sub.w	r3, r9, r8
 8005854:	bfa8      	it	ge
 8005856:	2300      	movge	r3, #0
 8005858:	9312      	str	r3, [sp, #72]	@ 0x48
 800585a:	2400      	movs	r4, #0
 800585c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005860:	9316      	str	r3, [sp, #88]	@ 0x58
 8005862:	46a0      	mov	r8, r4
 8005864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005866:	9805      	ldr	r0, [sp, #20]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	f002 fe69 	bl	8008540 <_Balloc>
 800586e:	4681      	mov	r9, r0
 8005870:	2800      	cmp	r0, #0
 8005872:	f43f aef4 	beq.w	800565e <_strtod_l+0x43e>
 8005876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	3202      	adds	r2, #2
 800587c:	f103 010c 	add.w	r1, r3, #12
 8005880:	0092      	lsls	r2, r2, #2
 8005882:	300c      	adds	r0, #12
 8005884:	f001 fb87 	bl	8006f96 <memcpy>
 8005888:	ec4b ab10 	vmov	d0, sl, fp
 800588c:	9805      	ldr	r0, [sp, #20]
 800588e:	aa1c      	add	r2, sp, #112	@ 0x70
 8005890:	a91b      	add	r1, sp, #108	@ 0x6c
 8005892:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005896:	f003 fa37 	bl	8008d08 <__d2b>
 800589a:	901a      	str	r0, [sp, #104]	@ 0x68
 800589c:	2800      	cmp	r0, #0
 800589e:	f43f aede 	beq.w	800565e <_strtod_l+0x43e>
 80058a2:	9805      	ldr	r0, [sp, #20]
 80058a4:	2101      	movs	r1, #1
 80058a6:	f002 ff89 	bl	80087bc <__i2b>
 80058aa:	4680      	mov	r8, r0
 80058ac:	b948      	cbnz	r0, 80058c2 <_strtod_l+0x6a2>
 80058ae:	f04f 0800 	mov.w	r8, #0
 80058b2:	e6d4      	b.n	800565e <_strtod_l+0x43e>
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	ea03 0a0a 	and.w	sl, r3, sl
 80058c0:	e7b0      	b.n	8005824 <_strtod_l+0x604>
 80058c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80058c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	bfab      	itete	ge
 80058ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80058cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80058ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80058d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80058d2:	bfac      	ite	ge
 80058d4:	18ef      	addge	r7, r5, r3
 80058d6:	1b5e      	sublt	r6, r3, r5
 80058d8:	9b08      	ldr	r3, [sp, #32]
 80058da:	1aed      	subs	r5, r5, r3
 80058dc:	4415      	add	r5, r2
 80058de:	4b66      	ldr	r3, [pc, #408]	@ (8005a78 <_strtod_l+0x858>)
 80058e0:	3d01      	subs	r5, #1
 80058e2:	429d      	cmp	r5, r3
 80058e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80058e8:	da50      	bge.n	800598c <_strtod_l+0x76c>
 80058ea:	1b5b      	subs	r3, r3, r5
 80058ec:	2b1f      	cmp	r3, #31
 80058ee:	eba2 0203 	sub.w	r2, r2, r3
 80058f2:	f04f 0101 	mov.w	r1, #1
 80058f6:	dc3d      	bgt.n	8005974 <_strtod_l+0x754>
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058fe:	2300      	movs	r3, #0
 8005900:	9310      	str	r3, [sp, #64]	@ 0x40
 8005902:	18bd      	adds	r5, r7, r2
 8005904:	9b08      	ldr	r3, [sp, #32]
 8005906:	42af      	cmp	r7, r5
 8005908:	4416      	add	r6, r2
 800590a:	441e      	add	r6, r3
 800590c:	463b      	mov	r3, r7
 800590e:	bfa8      	it	ge
 8005910:	462b      	movge	r3, r5
 8005912:	42b3      	cmp	r3, r6
 8005914:	bfa8      	it	ge
 8005916:	4633      	movge	r3, r6
 8005918:	2b00      	cmp	r3, #0
 800591a:	bfc2      	ittt	gt
 800591c:	1aed      	subgt	r5, r5, r3
 800591e:	1af6      	subgt	r6, r6, r3
 8005920:	1aff      	subgt	r7, r7, r3
 8005922:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005924:	2b00      	cmp	r3, #0
 8005926:	dd16      	ble.n	8005956 <_strtod_l+0x736>
 8005928:	4641      	mov	r1, r8
 800592a:	9805      	ldr	r0, [sp, #20]
 800592c:	461a      	mov	r2, r3
 800592e:	f003 f805 	bl	800893c <__pow5mult>
 8005932:	4680      	mov	r8, r0
 8005934:	2800      	cmp	r0, #0
 8005936:	d0ba      	beq.n	80058ae <_strtod_l+0x68e>
 8005938:	4601      	mov	r1, r0
 800593a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800593c:	9805      	ldr	r0, [sp, #20]
 800593e:	f002 ff53 	bl	80087e8 <__multiply>
 8005942:	900e      	str	r0, [sp, #56]	@ 0x38
 8005944:	2800      	cmp	r0, #0
 8005946:	f43f ae8a 	beq.w	800565e <_strtod_l+0x43e>
 800594a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800594c:	9805      	ldr	r0, [sp, #20]
 800594e:	f002 fe37 	bl	80085c0 <_Bfree>
 8005952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005954:	931a      	str	r3, [sp, #104]	@ 0x68
 8005956:	2d00      	cmp	r5, #0
 8005958:	dc1d      	bgt.n	8005996 <_strtod_l+0x776>
 800595a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	dd23      	ble.n	80059a8 <_strtod_l+0x788>
 8005960:	4649      	mov	r1, r9
 8005962:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005964:	9805      	ldr	r0, [sp, #20]
 8005966:	f002 ffe9 	bl	800893c <__pow5mult>
 800596a:	4681      	mov	r9, r0
 800596c:	b9e0      	cbnz	r0, 80059a8 <_strtod_l+0x788>
 800596e:	f04f 0900 	mov.w	r9, #0
 8005972:	e674      	b.n	800565e <_strtod_l+0x43e>
 8005974:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005978:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800597c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005980:	35e2      	adds	r5, #226	@ 0xe2
 8005982:	fa01 f305 	lsl.w	r3, r1, r5
 8005986:	9310      	str	r3, [sp, #64]	@ 0x40
 8005988:	9113      	str	r1, [sp, #76]	@ 0x4c
 800598a:	e7ba      	b.n	8005902 <_strtod_l+0x6e2>
 800598c:	2300      	movs	r3, #0
 800598e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005990:	2301      	movs	r3, #1
 8005992:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005994:	e7b5      	b.n	8005902 <_strtod_l+0x6e2>
 8005996:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005998:	9805      	ldr	r0, [sp, #20]
 800599a:	462a      	mov	r2, r5
 800599c:	f003 f828 	bl	80089f0 <__lshift>
 80059a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d1d9      	bne.n	800595a <_strtod_l+0x73a>
 80059a6:	e65a      	b.n	800565e <_strtod_l+0x43e>
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	dd07      	ble.n	80059bc <_strtod_l+0x79c>
 80059ac:	4649      	mov	r1, r9
 80059ae:	9805      	ldr	r0, [sp, #20]
 80059b0:	4632      	mov	r2, r6
 80059b2:	f003 f81d 	bl	80089f0 <__lshift>
 80059b6:	4681      	mov	r9, r0
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d0d8      	beq.n	800596e <_strtod_l+0x74e>
 80059bc:	2f00      	cmp	r7, #0
 80059be:	dd08      	ble.n	80059d2 <_strtod_l+0x7b2>
 80059c0:	4641      	mov	r1, r8
 80059c2:	9805      	ldr	r0, [sp, #20]
 80059c4:	463a      	mov	r2, r7
 80059c6:	f003 f813 	bl	80089f0 <__lshift>
 80059ca:	4680      	mov	r8, r0
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f43f ae46 	beq.w	800565e <_strtod_l+0x43e>
 80059d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80059d4:	9805      	ldr	r0, [sp, #20]
 80059d6:	464a      	mov	r2, r9
 80059d8:	f003 f892 	bl	8008b00 <__mdiff>
 80059dc:	4604      	mov	r4, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	f43f ae3d 	beq.w	800565e <_strtod_l+0x43e>
 80059e4:	68c3      	ldr	r3, [r0, #12]
 80059e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80059e8:	2300      	movs	r3, #0
 80059ea:	60c3      	str	r3, [r0, #12]
 80059ec:	4641      	mov	r1, r8
 80059ee:	f003 f86b 	bl	8008ac8 <__mcmp>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	da46      	bge.n	8005a84 <_strtod_l+0x864>
 80059f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059f8:	ea53 030a 	orrs.w	r3, r3, sl
 80059fc:	d16c      	bne.n	8005ad8 <_strtod_l+0x8b8>
 80059fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d168      	bne.n	8005ad8 <_strtod_l+0x8b8>
 8005a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a0a:	0d1b      	lsrs	r3, r3, #20
 8005a0c:	051b      	lsls	r3, r3, #20
 8005a0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a12:	d961      	bls.n	8005ad8 <_strtod_l+0x8b8>
 8005a14:	6963      	ldr	r3, [r4, #20]
 8005a16:	b913      	cbnz	r3, 8005a1e <_strtod_l+0x7fe>
 8005a18:	6923      	ldr	r3, [r4, #16]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	dd5c      	ble.n	8005ad8 <_strtod_l+0x8b8>
 8005a1e:	4621      	mov	r1, r4
 8005a20:	2201      	movs	r2, #1
 8005a22:	9805      	ldr	r0, [sp, #20]
 8005a24:	f002 ffe4 	bl	80089f0 <__lshift>
 8005a28:	4641      	mov	r1, r8
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	f003 f84c 	bl	8008ac8 <__mcmp>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	dd51      	ble.n	8005ad8 <_strtod_l+0x8b8>
 8005a34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a38:	9a08      	ldr	r2, [sp, #32]
 8005a3a:	0d1b      	lsrs	r3, r3, #20
 8005a3c:	051b      	lsls	r3, r3, #20
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	d06b      	beq.n	8005b1a <_strtod_l+0x8fa>
 8005a42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a46:	d868      	bhi.n	8005b1a <_strtod_l+0x8fa>
 8005a48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005a4c:	f67f ae9d 	bls.w	800578a <_strtod_l+0x56a>
 8005a50:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <_strtod_l+0x85c>)
 8005a52:	4650      	mov	r0, sl
 8005a54:	4659      	mov	r1, fp
 8005a56:	2200      	movs	r2, #0
 8005a58:	f7fa fdee 	bl	8000638 <__aeabi_dmul>
 8005a5c:	4b08      	ldr	r3, [pc, #32]	@ (8005a80 <_strtod_l+0x860>)
 8005a5e:	400b      	ands	r3, r1
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f47f ae05 	bne.w	8005674 <_strtod_l+0x454>
 8005a6a:	9a05      	ldr	r2, [sp, #20]
 8005a6c:	2322      	movs	r3, #34	@ 0x22
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e600      	b.n	8005674 <_strtod_l+0x454>
 8005a72:	bf00      	nop
 8005a74:	08009dc8 	.word	0x08009dc8
 8005a78:	fffffc02 	.word	0xfffffc02
 8005a7c:	39500000 	.word	0x39500000
 8005a80:	7ff00000 	.word	0x7ff00000
 8005a84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005a88:	d165      	bne.n	8005b56 <_strtod_l+0x936>
 8005a8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a90:	b35a      	cbz	r2, 8005aea <_strtod_l+0x8ca>
 8005a92:	4a9f      	ldr	r2, [pc, #636]	@ (8005d10 <_strtod_l+0xaf0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d12b      	bne.n	8005af0 <_strtod_l+0x8d0>
 8005a98:	9b08      	ldr	r3, [sp, #32]
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	b303      	cbz	r3, 8005ae0 <_strtod_l+0x8c0>
 8005a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8005d14 <_strtod_l+0xaf4>)
 8005aa0:	465a      	mov	r2, fp
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	d81b      	bhi.n	8005ae6 <_strtod_l+0x8c6>
 8005aae:	0d1b      	lsrs	r3, r3, #20
 8005ab0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d119      	bne.n	8005af0 <_strtod_l+0x8d0>
 8005abc:	4b96      	ldr	r3, [pc, #600]	@ (8005d18 <_strtod_l+0xaf8>)
 8005abe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d102      	bne.n	8005aca <_strtod_l+0x8aa>
 8005ac4:	3101      	adds	r1, #1
 8005ac6:	f43f adca 	beq.w	800565e <_strtod_l+0x43e>
 8005aca:	4b92      	ldr	r3, [pc, #584]	@ (8005d14 <_strtod_l+0xaf4>)
 8005acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ace:	401a      	ands	r2, r3
 8005ad0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005ad4:	f04f 0a00 	mov.w	sl, #0
 8005ad8:	9b08      	ldr	r3, [sp, #32]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1b8      	bne.n	8005a50 <_strtod_l+0x830>
 8005ade:	e5c9      	b.n	8005674 <_strtod_l+0x454>
 8005ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae4:	e7e8      	b.n	8005ab8 <_strtod_l+0x898>
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	e7e6      	b.n	8005ab8 <_strtod_l+0x898>
 8005aea:	ea53 030a 	orrs.w	r3, r3, sl
 8005aee:	d0a1      	beq.n	8005a34 <_strtod_l+0x814>
 8005af0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005af2:	b1db      	cbz	r3, 8005b2c <_strtod_l+0x90c>
 8005af4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005af6:	4213      	tst	r3, r2
 8005af8:	d0ee      	beq.n	8005ad8 <_strtod_l+0x8b8>
 8005afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005afc:	9a08      	ldr	r2, [sp, #32]
 8005afe:	4650      	mov	r0, sl
 8005b00:	4659      	mov	r1, fp
 8005b02:	b1bb      	cbz	r3, 8005b34 <_strtod_l+0x914>
 8005b04:	f7ff fb6d 	bl	80051e2 <sulp>
 8005b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b0c:	ec53 2b10 	vmov	r2, r3, d0
 8005b10:	f7fa fbdc 	bl	80002cc <__adddf3>
 8005b14:	4682      	mov	sl, r0
 8005b16:	468b      	mov	fp, r1
 8005b18:	e7de      	b.n	8005ad8 <_strtod_l+0x8b8>
 8005b1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005b1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005b22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005b26:	f04f 3aff 	mov.w	sl, #4294967295
 8005b2a:	e7d5      	b.n	8005ad8 <_strtod_l+0x8b8>
 8005b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b2e:	ea13 0f0a 	tst.w	r3, sl
 8005b32:	e7e1      	b.n	8005af8 <_strtod_l+0x8d8>
 8005b34:	f7ff fb55 	bl	80051e2 <sulp>
 8005b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b3c:	ec53 2b10 	vmov	r2, r3, d0
 8005b40:	f7fa fbc2 	bl	80002c8 <__aeabi_dsub>
 8005b44:	2200      	movs	r2, #0
 8005b46:	2300      	movs	r3, #0
 8005b48:	4682      	mov	sl, r0
 8005b4a:	468b      	mov	fp, r1
 8005b4c:	f7fa ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0c1      	beq.n	8005ad8 <_strtod_l+0x8b8>
 8005b54:	e619      	b.n	800578a <_strtod_l+0x56a>
 8005b56:	4641      	mov	r1, r8
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f003 f92d 	bl	8008db8 <__ratio>
 8005b5e:	ec57 6b10 	vmov	r6, r7, d0
 8005b62:	2200      	movs	r2, #0
 8005b64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005b68:	4630      	mov	r0, r6
 8005b6a:	4639      	mov	r1, r7
 8005b6c:	f7fa ffe0 	bl	8000b30 <__aeabi_dcmple>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d06f      	beq.n	8005c54 <_strtod_l+0xa34>
 8005b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d17a      	bne.n	8005c70 <_strtod_l+0xa50>
 8005b7a:	f1ba 0f00 	cmp.w	sl, #0
 8005b7e:	d158      	bne.n	8005c32 <_strtod_l+0xa12>
 8005b80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d15a      	bne.n	8005c40 <_strtod_l+0xa20>
 8005b8a:	4b64      	ldr	r3, [pc, #400]	@ (8005d1c <_strtod_l+0xafc>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4630      	mov	r0, r6
 8005b90:	4639      	mov	r1, r7
 8005b92:	f7fa ffc3 	bl	8000b1c <__aeabi_dcmplt>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d159      	bne.n	8005c4e <_strtod_l+0xa2e>
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4b60      	ldr	r3, [pc, #384]	@ (8005d20 <_strtod_l+0xb00>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f7fa fd49 	bl	8000638 <__aeabi_dmul>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460f      	mov	r7, r1
 8005baa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005bae:	9606      	str	r6, [sp, #24]
 8005bb0:	9307      	str	r3, [sp, #28]
 8005bb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bb6:	4d57      	ldr	r5, [pc, #348]	@ (8005d14 <_strtod_l+0xaf4>)
 8005bb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005bbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bbe:	401d      	ands	r5, r3
 8005bc0:	4b58      	ldr	r3, [pc, #352]	@ (8005d24 <_strtod_l+0xb04>)
 8005bc2:	429d      	cmp	r5, r3
 8005bc4:	f040 80b2 	bne.w	8005d2c <_strtod_l+0xb0c>
 8005bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005bce:	ec4b ab10 	vmov	d0, sl, fp
 8005bd2:	f003 f829 	bl	8008c28 <__ulp>
 8005bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bda:	ec51 0b10 	vmov	r0, r1, d0
 8005bde:	f7fa fd2b 	bl	8000638 <__aeabi_dmul>
 8005be2:	4652      	mov	r2, sl
 8005be4:	465b      	mov	r3, fp
 8005be6:	f7fa fb71 	bl	80002cc <__adddf3>
 8005bea:	460b      	mov	r3, r1
 8005bec:	4949      	ldr	r1, [pc, #292]	@ (8005d14 <_strtod_l+0xaf4>)
 8005bee:	4a4e      	ldr	r2, [pc, #312]	@ (8005d28 <_strtod_l+0xb08>)
 8005bf0:	4019      	ands	r1, r3
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	4682      	mov	sl, r0
 8005bf6:	d942      	bls.n	8005c7e <_strtod_l+0xa5e>
 8005bf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005bfa:	4b47      	ldr	r3, [pc, #284]	@ (8005d18 <_strtod_l+0xaf8>)
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d103      	bne.n	8005c08 <_strtod_l+0x9e8>
 8005c00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c02:	3301      	adds	r3, #1
 8005c04:	f43f ad2b 	beq.w	800565e <_strtod_l+0x43e>
 8005c08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005d18 <_strtod_l+0xaf8>
 8005c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8005c10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c12:	9805      	ldr	r0, [sp, #20]
 8005c14:	f002 fcd4 	bl	80085c0 <_Bfree>
 8005c18:	9805      	ldr	r0, [sp, #20]
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	f002 fcd0 	bl	80085c0 <_Bfree>
 8005c20:	9805      	ldr	r0, [sp, #20]
 8005c22:	4641      	mov	r1, r8
 8005c24:	f002 fccc 	bl	80085c0 <_Bfree>
 8005c28:	9805      	ldr	r0, [sp, #20]
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	f002 fcc8 	bl	80085c0 <_Bfree>
 8005c30:	e618      	b.n	8005864 <_strtod_l+0x644>
 8005c32:	f1ba 0f01 	cmp.w	sl, #1
 8005c36:	d103      	bne.n	8005c40 <_strtod_l+0xa20>
 8005c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f43f ada5 	beq.w	800578a <_strtod_l+0x56a>
 8005c40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005cf0 <_strtod_l+0xad0>
 8005c44:	4f35      	ldr	r7, [pc, #212]	@ (8005d1c <_strtod_l+0xafc>)
 8005c46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	e7b1      	b.n	8005bb2 <_strtod_l+0x992>
 8005c4e:	4f34      	ldr	r7, [pc, #208]	@ (8005d20 <_strtod_l+0xb00>)
 8005c50:	2600      	movs	r6, #0
 8005c52:	e7aa      	b.n	8005baa <_strtod_l+0x98a>
 8005c54:	4b32      	ldr	r3, [pc, #200]	@ (8005d20 <_strtod_l+0xb00>)
 8005c56:	4630      	mov	r0, r6
 8005c58:	4639      	mov	r1, r7
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f7fa fcec 	bl	8000638 <__aeabi_dmul>
 8005c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c62:	4606      	mov	r6, r0
 8005c64:	460f      	mov	r7, r1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d09f      	beq.n	8005baa <_strtod_l+0x98a>
 8005c6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005c6e:	e7a0      	b.n	8005bb2 <_strtod_l+0x992>
 8005c70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005cf8 <_strtod_l+0xad8>
 8005c74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005c78:	ec57 6b17 	vmov	r6, r7, d7
 8005c7c:	e799      	b.n	8005bb2 <_strtod_l+0x992>
 8005c7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005c82:	9b08      	ldr	r3, [sp, #32]
 8005c84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1c1      	bne.n	8005c10 <_strtod_l+0x9f0>
 8005c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c90:	0d1b      	lsrs	r3, r3, #20
 8005c92:	051b      	lsls	r3, r3, #20
 8005c94:	429d      	cmp	r5, r3
 8005c96:	d1bb      	bne.n	8005c10 <_strtod_l+0x9f0>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	f7fb f82c 	bl	8000cf8 <__aeabi_d2lz>
 8005ca0:	f7fa fc9c 	bl	80005dc <__aeabi_l2d>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4630      	mov	r0, r6
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa fb0c 	bl	80002c8 <__aeabi_dsub>
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cbe:	ea46 060a 	orr.w	r6, r6, sl
 8005cc2:	431e      	orrs	r6, r3
 8005cc4:	d06f      	beq.n	8005da6 <_strtod_l+0xb86>
 8005cc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d00 <_strtod_l+0xae0>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f7fa ff26 	bl	8000b1c <__aeabi_dcmplt>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f47f accf 	bne.w	8005674 <_strtod_l+0x454>
 8005cd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8005d08 <_strtod_l+0xae8>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ce0:	f7fa ff3a 	bl	8000b58 <__aeabi_dcmpgt>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d093      	beq.n	8005c10 <_strtod_l+0x9f0>
 8005ce8:	e4c4      	b.n	8005674 <_strtod_l+0x454>
 8005cea:	bf00      	nop
 8005cec:	f3af 8000 	nop.w
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	bff00000 	.word	0xbff00000
 8005cf8:	00000000 	.word	0x00000000
 8005cfc:	3ff00000 	.word	0x3ff00000
 8005d00:	94a03595 	.word	0x94a03595
 8005d04:	3fdfffff 	.word	0x3fdfffff
 8005d08:	35afe535 	.word	0x35afe535
 8005d0c:	3fe00000 	.word	0x3fe00000
 8005d10:	000fffff 	.word	0x000fffff
 8005d14:	7ff00000 	.word	0x7ff00000
 8005d18:	7fefffff 	.word	0x7fefffff
 8005d1c:	3ff00000 	.word	0x3ff00000
 8005d20:	3fe00000 	.word	0x3fe00000
 8005d24:	7fe00000 	.word	0x7fe00000
 8005d28:	7c9fffff 	.word	0x7c9fffff
 8005d2c:	9b08      	ldr	r3, [sp, #32]
 8005d2e:	b323      	cbz	r3, 8005d7a <_strtod_l+0xb5a>
 8005d30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005d34:	d821      	bhi.n	8005d7a <_strtod_l+0xb5a>
 8005d36:	a328      	add	r3, pc, #160	@ (adr r3, 8005dd8 <_strtod_l+0xbb8>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7fa fef6 	bl	8000b30 <__aeabi_dcmple>
 8005d44:	b1a0      	cbz	r0, 8005d70 <_strtod_l+0xb50>
 8005d46:	4639      	mov	r1, r7
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7fa ff4d 	bl	8000be8 <__aeabi_d2uiz>
 8005d4e:	2801      	cmp	r0, #1
 8005d50:	bf38      	it	cc
 8005d52:	2001      	movcc	r0, #1
 8005d54:	f7fa fbf6 	bl	8000544 <__aeabi_ui2d>
 8005d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	460f      	mov	r7, r1
 8005d5e:	b9fb      	cbnz	r3, 8005da0 <_strtod_l+0xb80>
 8005d60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d64:	9014      	str	r0, [sp, #80]	@ 0x50
 8005d66:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005d6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005d70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005d76:	1b5b      	subs	r3, r3, r5
 8005d78:	9311      	str	r3, [sp, #68]	@ 0x44
 8005d7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005d82:	f002 ff51 	bl	8008c28 <__ulp>
 8005d86:	4650      	mov	r0, sl
 8005d88:	ec53 2b10 	vmov	r2, r3, d0
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	f7fa fc53 	bl	8000638 <__aeabi_dmul>
 8005d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d96:	f7fa fa99 	bl	80002cc <__adddf3>
 8005d9a:	4682      	mov	sl, r0
 8005d9c:	468b      	mov	fp, r1
 8005d9e:	e770      	b.n	8005c82 <_strtod_l+0xa62>
 8005da0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005da4:	e7e0      	b.n	8005d68 <_strtod_l+0xb48>
 8005da6:	a30e      	add	r3, pc, #56	@ (adr r3, 8005de0 <_strtod_l+0xbc0>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa feb6 	bl	8000b1c <__aeabi_dcmplt>
 8005db0:	e798      	b.n	8005ce4 <_strtod_l+0xac4>
 8005db2:	2300      	movs	r3, #0
 8005db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005db6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	f7ff ba6d 	b.w	800529a <_strtod_l+0x7a>
 8005dc0:	2a65      	cmp	r2, #101	@ 0x65
 8005dc2:	f43f ab66 	beq.w	8005492 <_strtod_l+0x272>
 8005dc6:	2a45      	cmp	r2, #69	@ 0x45
 8005dc8:	f43f ab63 	beq.w	8005492 <_strtod_l+0x272>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f7ff bb9e 	b.w	800550e <_strtod_l+0x2ee>
 8005dd2:	bf00      	nop
 8005dd4:	f3af 8000 	nop.w
 8005dd8:	ffc00000 	.word	0xffc00000
 8005ddc:	41dfffff 	.word	0x41dfffff
 8005de0:	94a03595 	.word	0x94a03595
 8005de4:	3fcfffff 	.word	0x3fcfffff

08005de8 <_strtod_r>:
 8005de8:	4b01      	ldr	r3, [pc, #4]	@ (8005df0 <_strtod_r+0x8>)
 8005dea:	f7ff ba19 	b.w	8005220 <_strtod_l>
 8005dee:	bf00      	nop
 8005df0:	20000058 	.word	0x20000058

08005df4 <strtod>:
 8005df4:	460a      	mov	r2, r1
 8005df6:	4601      	mov	r1, r0
 8005df8:	4802      	ldr	r0, [pc, #8]	@ (8005e04 <strtod+0x10>)
 8005dfa:	4b03      	ldr	r3, [pc, #12]	@ (8005e08 <strtod+0x14>)
 8005dfc:	6800      	ldr	r0, [r0, #0]
 8005dfe:	f7ff ba0f 	b.w	8005220 <_strtod_l>
 8005e02:	bf00      	nop
 8005e04:	200001c4 	.word	0x200001c4
 8005e08:	20000058 	.word	0x20000058

08005e0c <__cvt>:
 8005e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e10:	ec57 6b10 	vmov	r6, r7, d0
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	460c      	mov	r4, r1
 8005e18:	4619      	mov	r1, r3
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	bfbb      	ittet	lt
 8005e1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e22:	461f      	movlt	r7, r3
 8005e24:	2300      	movge	r3, #0
 8005e26:	232d      	movlt	r3, #45	@ 0x2d
 8005e28:	700b      	strb	r3, [r1, #0]
 8005e2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e30:	4691      	mov	r9, r2
 8005e32:	f023 0820 	bic.w	r8, r3, #32
 8005e36:	bfbc      	itt	lt
 8005e38:	4632      	movlt	r2, r6
 8005e3a:	4616      	movlt	r6, r2
 8005e3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e40:	d005      	beq.n	8005e4e <__cvt+0x42>
 8005e42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e46:	d100      	bne.n	8005e4a <__cvt+0x3e>
 8005e48:	3401      	adds	r4, #1
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	e000      	b.n	8005e50 <__cvt+0x44>
 8005e4e:	2103      	movs	r1, #3
 8005e50:	ab03      	add	r3, sp, #12
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	ab02      	add	r3, sp, #8
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	ec47 6b10 	vmov	d0, r6, r7
 8005e5c:	4653      	mov	r3, sl
 8005e5e:	4622      	mov	r2, r4
 8005e60:	f001 f95e 	bl	8007120 <_dtoa_r>
 8005e64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e68:	4605      	mov	r5, r0
 8005e6a:	d119      	bne.n	8005ea0 <__cvt+0x94>
 8005e6c:	f019 0f01 	tst.w	r9, #1
 8005e70:	d00e      	beq.n	8005e90 <__cvt+0x84>
 8005e72:	eb00 0904 	add.w	r9, r0, r4
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	f7fa fe43 	bl	8000b08 <__aeabi_dcmpeq>
 8005e82:	b108      	cbz	r0, 8005e88 <__cvt+0x7c>
 8005e84:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e88:	2230      	movs	r2, #48	@ 0x30
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	454b      	cmp	r3, r9
 8005e8e:	d31e      	bcc.n	8005ece <__cvt+0xc2>
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e94:	1b5b      	subs	r3, r3, r5
 8005e96:	4628      	mov	r0, r5
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	b004      	add	sp, #16
 8005e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ea4:	eb00 0904 	add.w	r9, r0, r4
 8005ea8:	d1e5      	bne.n	8005e76 <__cvt+0x6a>
 8005eaa:	7803      	ldrb	r3, [r0, #0]
 8005eac:	2b30      	cmp	r3, #48	@ 0x30
 8005eae:	d10a      	bne.n	8005ec6 <__cvt+0xba>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa fe26 	bl	8000b08 <__aeabi_dcmpeq>
 8005ebc:	b918      	cbnz	r0, 8005ec6 <__cvt+0xba>
 8005ebe:	f1c4 0401 	rsb	r4, r4, #1
 8005ec2:	f8ca 4000 	str.w	r4, [sl]
 8005ec6:	f8da 3000 	ldr.w	r3, [sl]
 8005eca:	4499      	add	r9, r3
 8005ecc:	e7d3      	b.n	8005e76 <__cvt+0x6a>
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	9103      	str	r1, [sp, #12]
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	e7d9      	b.n	8005e8a <__cvt+0x7e>

08005ed6 <__exponent>:
 8005ed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	bfba      	itte	lt
 8005edc:	4249      	neglt	r1, r1
 8005ede:	232d      	movlt	r3, #45	@ 0x2d
 8005ee0:	232b      	movge	r3, #43	@ 0x2b
 8005ee2:	2909      	cmp	r1, #9
 8005ee4:	7002      	strb	r2, [r0, #0]
 8005ee6:	7043      	strb	r3, [r0, #1]
 8005ee8:	dd29      	ble.n	8005f3e <__exponent+0x68>
 8005eea:	f10d 0307 	add.w	r3, sp, #7
 8005eee:	461d      	mov	r5, r3
 8005ef0:	270a      	movs	r7, #10
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ef8:	fb07 1416 	mls	r4, r7, r6, r1
 8005efc:	3430      	adds	r4, #48	@ 0x30
 8005efe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f02:	460c      	mov	r4, r1
 8005f04:	2c63      	cmp	r4, #99	@ 0x63
 8005f06:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	dcf1      	bgt.n	8005ef2 <__exponent+0x1c>
 8005f0e:	3130      	adds	r1, #48	@ 0x30
 8005f10:	1e94      	subs	r4, r2, #2
 8005f12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f16:	1c41      	adds	r1, r0, #1
 8005f18:	4623      	mov	r3, r4
 8005f1a:	42ab      	cmp	r3, r5
 8005f1c:	d30a      	bcc.n	8005f34 <__exponent+0x5e>
 8005f1e:	f10d 0309 	add.w	r3, sp, #9
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	42ac      	cmp	r4, r5
 8005f26:	bf88      	it	hi
 8005f28:	2300      	movhi	r3, #0
 8005f2a:	3302      	adds	r3, #2
 8005f2c:	4403      	add	r3, r0
 8005f2e:	1a18      	subs	r0, r3, r0
 8005f30:	b003      	add	sp, #12
 8005f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f3c:	e7ed      	b.n	8005f1a <__exponent+0x44>
 8005f3e:	2330      	movs	r3, #48	@ 0x30
 8005f40:	3130      	adds	r1, #48	@ 0x30
 8005f42:	7083      	strb	r3, [r0, #2]
 8005f44:	70c1      	strb	r1, [r0, #3]
 8005f46:	1d03      	adds	r3, r0, #4
 8005f48:	e7f1      	b.n	8005f2e <__exponent+0x58>
	...

08005f4c <_printf_float>:
 8005f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f50:	b08d      	sub	sp, #52	@ 0x34
 8005f52:	460c      	mov	r4, r1
 8005f54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f58:	4616      	mov	r6, r2
 8005f5a:	461f      	mov	r7, r3
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	f000 ffa3 	bl	8006ea8 <_localeconv_r>
 8005f62:	6803      	ldr	r3, [r0, #0]
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fa f9a2 	bl	80002b0 <strlen>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f70:	f8d8 3000 	ldr.w	r3, [r8]
 8005f74:	9005      	str	r0, [sp, #20]
 8005f76:	3307      	adds	r3, #7
 8005f78:	f023 0307 	bic.w	r3, r3, #7
 8005f7c:	f103 0208 	add.w	r2, r3, #8
 8005f80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f84:	f8d4 b000 	ldr.w	fp, [r4]
 8005f88:	f8c8 2000 	str.w	r2, [r8]
 8005f8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f94:	9307      	str	r3, [sp, #28]
 8005f96:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa2:	4b9c      	ldr	r3, [pc, #624]	@ (8006214 <_printf_float+0x2c8>)
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	f7fa fde0 	bl	8000b6c <__aeabi_dcmpun>
 8005fac:	bb70      	cbnz	r0, 800600c <_printf_float+0xc0>
 8005fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fb2:	4b98      	ldr	r3, [pc, #608]	@ (8006214 <_printf_float+0x2c8>)
 8005fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb8:	f7fa fdba 	bl	8000b30 <__aeabi_dcmple>
 8005fbc:	bb30      	cbnz	r0, 800600c <_printf_float+0xc0>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	f7fa fda9 	bl	8000b1c <__aeabi_dcmplt>
 8005fca:	b110      	cbz	r0, 8005fd2 <_printf_float+0x86>
 8005fcc:	232d      	movs	r3, #45	@ 0x2d
 8005fce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd2:	4a91      	ldr	r2, [pc, #580]	@ (8006218 <_printf_float+0x2cc>)
 8005fd4:	4b91      	ldr	r3, [pc, #580]	@ (800621c <_printf_float+0x2d0>)
 8005fd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fda:	bf94      	ite	ls
 8005fdc:	4690      	movls	r8, r2
 8005fde:	4698      	movhi	r8, r3
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	f02b 0304 	bic.w	r3, fp, #4
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	f04f 0900 	mov.w	r9, #0
 8005fee:	9700      	str	r7, [sp, #0]
 8005ff0:	4633      	mov	r3, r6
 8005ff2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 f9d2 	bl	80063a0 <_printf_common>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f040 808d 	bne.w	800611c <_printf_float+0x1d0>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	b00d      	add	sp, #52	@ 0x34
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fdaa 	bl	8000b6c <__aeabi_dcmpun>
 8006018:	b140      	cbz	r0, 800602c <_printf_float+0xe0>
 800601a:	464b      	mov	r3, r9
 800601c:	2b00      	cmp	r3, #0
 800601e:	bfbc      	itt	lt
 8006020:	232d      	movlt	r3, #45	@ 0x2d
 8006022:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006026:	4a7e      	ldr	r2, [pc, #504]	@ (8006220 <_printf_float+0x2d4>)
 8006028:	4b7e      	ldr	r3, [pc, #504]	@ (8006224 <_printf_float+0x2d8>)
 800602a:	e7d4      	b.n	8005fd6 <_printf_float+0x8a>
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006032:	9206      	str	r2, [sp, #24]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	d13b      	bne.n	80060b0 <_printf_float+0x164>
 8006038:	2306      	movs	r3, #6
 800603a:	6063      	str	r3, [r4, #4]
 800603c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006040:	2300      	movs	r3, #0
 8006042:	6022      	str	r2, [r4, #0]
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	ab0a      	add	r3, sp, #40	@ 0x28
 8006048:	e9cd a301 	strd	sl, r3, [sp, #4]
 800604c:	ab09      	add	r3, sp, #36	@ 0x24
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	6861      	ldr	r1, [r4, #4]
 8006052:	ec49 8b10 	vmov	d0, r8, r9
 8006056:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800605a:	4628      	mov	r0, r5
 800605c:	f7ff fed6 	bl	8005e0c <__cvt>
 8006060:	9b06      	ldr	r3, [sp, #24]
 8006062:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006064:	2b47      	cmp	r3, #71	@ 0x47
 8006066:	4680      	mov	r8, r0
 8006068:	d129      	bne.n	80060be <_printf_float+0x172>
 800606a:	1cc8      	adds	r0, r1, #3
 800606c:	db02      	blt.n	8006074 <_printf_float+0x128>
 800606e:	6863      	ldr	r3, [r4, #4]
 8006070:	4299      	cmp	r1, r3
 8006072:	dd41      	ble.n	80060f8 <_printf_float+0x1ac>
 8006074:	f1aa 0a02 	sub.w	sl, sl, #2
 8006078:	fa5f fa8a 	uxtb.w	sl, sl
 800607c:	3901      	subs	r1, #1
 800607e:	4652      	mov	r2, sl
 8006080:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006084:	9109      	str	r1, [sp, #36]	@ 0x24
 8006086:	f7ff ff26 	bl	8005ed6 <__exponent>
 800608a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800608c:	1813      	adds	r3, r2, r0
 800608e:	2a01      	cmp	r2, #1
 8006090:	4681      	mov	r9, r0
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	dc02      	bgt.n	800609c <_printf_float+0x150>
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	07d2      	lsls	r2, r2, #31
 800609a:	d501      	bpl.n	80060a0 <_printf_float+0x154>
 800609c:	3301      	adds	r3, #1
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0a2      	beq.n	8005fee <_printf_float+0xa2>
 80060a8:	232d      	movs	r3, #45	@ 0x2d
 80060aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ae:	e79e      	b.n	8005fee <_printf_float+0xa2>
 80060b0:	9a06      	ldr	r2, [sp, #24]
 80060b2:	2a47      	cmp	r2, #71	@ 0x47
 80060b4:	d1c2      	bne.n	800603c <_printf_float+0xf0>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1c0      	bne.n	800603c <_printf_float+0xf0>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e7bd      	b.n	800603a <_printf_float+0xee>
 80060be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060c2:	d9db      	bls.n	800607c <_printf_float+0x130>
 80060c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060c8:	d118      	bne.n	80060fc <_printf_float+0x1b0>
 80060ca:	2900      	cmp	r1, #0
 80060cc:	6863      	ldr	r3, [r4, #4]
 80060ce:	dd0b      	ble.n	80060e8 <_printf_float+0x19c>
 80060d0:	6121      	str	r1, [r4, #16]
 80060d2:	b913      	cbnz	r3, 80060da <_printf_float+0x18e>
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	07d0      	lsls	r0, r2, #31
 80060d8:	d502      	bpl.n	80060e0 <_printf_float+0x194>
 80060da:	3301      	adds	r3, #1
 80060dc:	440b      	add	r3, r1
 80060de:	6123      	str	r3, [r4, #16]
 80060e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060e2:	f04f 0900 	mov.w	r9, #0
 80060e6:	e7db      	b.n	80060a0 <_printf_float+0x154>
 80060e8:	b913      	cbnz	r3, 80060f0 <_printf_float+0x1a4>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	07d2      	lsls	r2, r2, #31
 80060ee:	d501      	bpl.n	80060f4 <_printf_float+0x1a8>
 80060f0:	3302      	adds	r3, #2
 80060f2:	e7f4      	b.n	80060de <_printf_float+0x192>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e7f2      	b.n	80060de <_printf_float+0x192>
 80060f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060fe:	4299      	cmp	r1, r3
 8006100:	db05      	blt.n	800610e <_printf_float+0x1c2>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	6121      	str	r1, [r4, #16]
 8006106:	07d8      	lsls	r0, r3, #31
 8006108:	d5ea      	bpl.n	80060e0 <_printf_float+0x194>
 800610a:	1c4b      	adds	r3, r1, #1
 800610c:	e7e7      	b.n	80060de <_printf_float+0x192>
 800610e:	2900      	cmp	r1, #0
 8006110:	bfd4      	ite	le
 8006112:	f1c1 0202 	rsble	r2, r1, #2
 8006116:	2201      	movgt	r2, #1
 8006118:	4413      	add	r3, r2
 800611a:	e7e0      	b.n	80060de <_printf_float+0x192>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	055a      	lsls	r2, r3, #21
 8006120:	d407      	bmi.n	8006132 <_printf_float+0x1e6>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d12b      	bne.n	8006188 <_printf_float+0x23c>
 8006130:	e767      	b.n	8006002 <_printf_float+0xb6>
 8006132:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006136:	f240 80dd 	bls.w	80062f4 <_printf_float+0x3a8>
 800613a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800613e:	2200      	movs	r2, #0
 8006140:	2300      	movs	r3, #0
 8006142:	f7fa fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8006146:	2800      	cmp	r0, #0
 8006148:	d033      	beq.n	80061b2 <_printf_float+0x266>
 800614a:	4a37      	ldr	r2, [pc, #220]	@ (8006228 <_printf_float+0x2dc>)
 800614c:	2301      	movs	r3, #1
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f af54 	beq.w	8006002 <_printf_float+0xb6>
 800615a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800615e:	4543      	cmp	r3, r8
 8006160:	db02      	blt.n	8006168 <_printf_float+0x21c>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	07d8      	lsls	r0, r3, #31
 8006166:	d50f      	bpl.n	8006188 <_printf_float+0x23c>
 8006168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f af45 	beq.w	8006002 <_printf_float+0xb6>
 8006178:	f04f 0900 	mov.w	r9, #0
 800617c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006180:	f104 0a1a 	add.w	sl, r4, #26
 8006184:	45c8      	cmp	r8, r9
 8006186:	dc09      	bgt.n	800619c <_printf_float+0x250>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	f100 8103 	bmi.w	8006396 <_printf_float+0x44a>
 8006190:	68e0      	ldr	r0, [r4, #12]
 8006192:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006194:	4298      	cmp	r0, r3
 8006196:	bfb8      	it	lt
 8006198:	4618      	movlt	r0, r3
 800619a:	e734      	b.n	8006006 <_printf_float+0xba>
 800619c:	2301      	movs	r3, #1
 800619e:	4652      	mov	r2, sl
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af2b 	beq.w	8006002 <_printf_float+0xb6>
 80061ac:	f109 0901 	add.w	r9, r9, #1
 80061b0:	e7e8      	b.n	8006184 <_printf_float+0x238>
 80061b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dc39      	bgt.n	800622c <_printf_float+0x2e0>
 80061b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006228 <_printf_float+0x2dc>)
 80061ba:	2301      	movs	r3, #1
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f af1d 	beq.w	8006002 <_printf_float+0xb6>
 80061c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061cc:	ea59 0303 	orrs.w	r3, r9, r3
 80061d0:	d102      	bne.n	80061d8 <_printf_float+0x28c>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	07d9      	lsls	r1, r3, #31
 80061d6:	d5d7      	bpl.n	8006188 <_printf_float+0x23c>
 80061d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f af0d 	beq.w	8006002 <_printf_float+0xb6>
 80061e8:	f04f 0a00 	mov.w	sl, #0
 80061ec:	f104 0b1a 	add.w	fp, r4, #26
 80061f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f2:	425b      	negs	r3, r3
 80061f4:	4553      	cmp	r3, sl
 80061f6:	dc01      	bgt.n	80061fc <_printf_float+0x2b0>
 80061f8:	464b      	mov	r3, r9
 80061fa:	e793      	b.n	8006124 <_printf_float+0x1d8>
 80061fc:	2301      	movs	r3, #1
 80061fe:	465a      	mov	r2, fp
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f aefb 	beq.w	8006002 <_printf_float+0xb6>
 800620c:	f10a 0a01 	add.w	sl, sl, #1
 8006210:	e7ee      	b.n	80061f0 <_printf_float+0x2a4>
 8006212:	bf00      	nop
 8006214:	7fefffff 	.word	0x7fefffff
 8006218:	08009df0 	.word	0x08009df0
 800621c:	08009df4 	.word	0x08009df4
 8006220:	08009df8 	.word	0x08009df8
 8006224:	08009dfc 	.word	0x08009dfc
 8006228:	08009e00 	.word	0x08009e00
 800622c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800622e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006232:	4553      	cmp	r3, sl
 8006234:	bfa8      	it	ge
 8006236:	4653      	movge	r3, sl
 8006238:	2b00      	cmp	r3, #0
 800623a:	4699      	mov	r9, r3
 800623c:	dc36      	bgt.n	80062ac <_printf_float+0x360>
 800623e:	f04f 0b00 	mov.w	fp, #0
 8006242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006246:	f104 021a 	add.w	r2, r4, #26
 800624a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800624c:	9306      	str	r3, [sp, #24]
 800624e:	eba3 0309 	sub.w	r3, r3, r9
 8006252:	455b      	cmp	r3, fp
 8006254:	dc31      	bgt.n	80062ba <_printf_float+0x36e>
 8006256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006258:	459a      	cmp	sl, r3
 800625a:	dc3a      	bgt.n	80062d2 <_printf_float+0x386>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	07da      	lsls	r2, r3, #31
 8006260:	d437      	bmi.n	80062d2 <_printf_float+0x386>
 8006262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006264:	ebaa 0903 	sub.w	r9, sl, r3
 8006268:	9b06      	ldr	r3, [sp, #24]
 800626a:	ebaa 0303 	sub.w	r3, sl, r3
 800626e:	4599      	cmp	r9, r3
 8006270:	bfa8      	it	ge
 8006272:	4699      	movge	r9, r3
 8006274:	f1b9 0f00 	cmp.w	r9, #0
 8006278:	dc33      	bgt.n	80062e2 <_printf_float+0x396>
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006282:	f104 0b1a 	add.w	fp, r4, #26
 8006286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006288:	ebaa 0303 	sub.w	r3, sl, r3
 800628c:	eba3 0309 	sub.w	r3, r3, r9
 8006290:	4543      	cmp	r3, r8
 8006292:	f77f af79 	ble.w	8006188 <_printf_float+0x23c>
 8006296:	2301      	movs	r3, #1
 8006298:	465a      	mov	r2, fp
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f aeae 	beq.w	8006002 <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	e7ec      	b.n	8006286 <_printf_float+0x33a>
 80062ac:	4642      	mov	r2, r8
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	d1c2      	bne.n	800623e <_printf_float+0x2f2>
 80062b8:	e6a3      	b.n	8006002 <_printf_float+0xb6>
 80062ba:	2301      	movs	r3, #1
 80062bc:	4631      	mov	r1, r6
 80062be:	4628      	mov	r0, r5
 80062c0:	9206      	str	r2, [sp, #24]
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	f43f ae9c 	beq.w	8006002 <_printf_float+0xb6>
 80062ca:	9a06      	ldr	r2, [sp, #24]
 80062cc:	f10b 0b01 	add.w	fp, fp, #1
 80062d0:	e7bb      	b.n	800624a <_printf_float+0x2fe>
 80062d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	d1c0      	bne.n	8006262 <_printf_float+0x316>
 80062e0:	e68f      	b.n	8006002 <_printf_float+0xb6>
 80062e2:	9a06      	ldr	r2, [sp, #24]
 80062e4:	464b      	mov	r3, r9
 80062e6:	4442      	add	r2, r8
 80062e8:	4631      	mov	r1, r6
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b8      	blx	r7
 80062ee:	3001      	adds	r0, #1
 80062f0:	d1c3      	bne.n	800627a <_printf_float+0x32e>
 80062f2:	e686      	b.n	8006002 <_printf_float+0xb6>
 80062f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062f8:	f1ba 0f01 	cmp.w	sl, #1
 80062fc:	dc01      	bgt.n	8006302 <_printf_float+0x3b6>
 80062fe:	07db      	lsls	r3, r3, #31
 8006300:	d536      	bpl.n	8006370 <_printf_float+0x424>
 8006302:	2301      	movs	r3, #1
 8006304:	4642      	mov	r2, r8
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	f43f ae78 	beq.w	8006002 <_printf_float+0xb6>
 8006312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	f43f ae70 	beq.w	8006002 <_printf_float+0xb6>
 8006322:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800632e:	f7fa fbeb 	bl	8000b08 <__aeabi_dcmpeq>
 8006332:	b9c0      	cbnz	r0, 8006366 <_printf_float+0x41a>
 8006334:	4653      	mov	r3, sl
 8006336:	f108 0201 	add.w	r2, r8, #1
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	d10c      	bne.n	800635e <_printf_float+0x412>
 8006344:	e65d      	b.n	8006002 <_printf_float+0xb6>
 8006346:	2301      	movs	r3, #1
 8006348:	465a      	mov	r2, fp
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae56 	beq.w	8006002 <_printf_float+0xb6>
 8006356:	f108 0801 	add.w	r8, r8, #1
 800635a:	45d0      	cmp	r8, sl
 800635c:	dbf3      	blt.n	8006346 <_printf_float+0x3fa>
 800635e:	464b      	mov	r3, r9
 8006360:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006364:	e6df      	b.n	8006126 <_printf_float+0x1da>
 8006366:	f04f 0800 	mov.w	r8, #0
 800636a:	f104 0b1a 	add.w	fp, r4, #26
 800636e:	e7f4      	b.n	800635a <_printf_float+0x40e>
 8006370:	2301      	movs	r3, #1
 8006372:	4642      	mov	r2, r8
 8006374:	e7e1      	b.n	800633a <_printf_float+0x3ee>
 8006376:	2301      	movs	r3, #1
 8006378:	464a      	mov	r2, r9
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f ae3e 	beq.w	8006002 <_printf_float+0xb6>
 8006386:	f108 0801 	add.w	r8, r8, #1
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800638e:	1a5b      	subs	r3, r3, r1
 8006390:	4543      	cmp	r3, r8
 8006392:	dcf0      	bgt.n	8006376 <_printf_float+0x42a>
 8006394:	e6fc      	b.n	8006190 <_printf_float+0x244>
 8006396:	f04f 0800 	mov.w	r8, #0
 800639a:	f104 0919 	add.w	r9, r4, #25
 800639e:	e7f4      	b.n	800638a <_printf_float+0x43e>

080063a0 <_printf_common>:
 80063a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a4:	4616      	mov	r6, r2
 80063a6:	4698      	mov	r8, r3
 80063a8:	688a      	ldr	r2, [r1, #8]
 80063aa:	690b      	ldr	r3, [r1, #16]
 80063ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	bfb8      	it	lt
 80063b4:	4613      	movlt	r3, r2
 80063b6:	6033      	str	r3, [r6, #0]
 80063b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063bc:	4607      	mov	r7, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	b10a      	cbz	r2, 80063c6 <_printf_common+0x26>
 80063c2:	3301      	adds	r3, #1
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	0699      	lsls	r1, r3, #26
 80063ca:	bf42      	ittt	mi
 80063cc:	6833      	ldrmi	r3, [r6, #0]
 80063ce:	3302      	addmi	r3, #2
 80063d0:	6033      	strmi	r3, [r6, #0]
 80063d2:	6825      	ldr	r5, [r4, #0]
 80063d4:	f015 0506 	ands.w	r5, r5, #6
 80063d8:	d106      	bne.n	80063e8 <_printf_common+0x48>
 80063da:	f104 0a19 	add.w	sl, r4, #25
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	6832      	ldr	r2, [r6, #0]
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	dc26      	bgt.n	8006436 <_printf_common+0x96>
 80063e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	3b00      	subs	r3, #0
 80063f0:	bf18      	it	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	0692      	lsls	r2, r2, #26
 80063f6:	d42b      	bmi.n	8006450 <_printf_common+0xb0>
 80063f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063fc:	4641      	mov	r1, r8
 80063fe:	4638      	mov	r0, r7
 8006400:	47c8      	blx	r9
 8006402:	3001      	adds	r0, #1
 8006404:	d01e      	beq.n	8006444 <_printf_common+0xa4>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	6922      	ldr	r2, [r4, #16]
 800640a:	f003 0306 	and.w	r3, r3, #6
 800640e:	2b04      	cmp	r3, #4
 8006410:	bf02      	ittt	eq
 8006412:	68e5      	ldreq	r5, [r4, #12]
 8006414:	6833      	ldreq	r3, [r6, #0]
 8006416:	1aed      	subeq	r5, r5, r3
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	bf0c      	ite	eq
 800641c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006420:	2500      	movne	r5, #0
 8006422:	4293      	cmp	r3, r2
 8006424:	bfc4      	itt	gt
 8006426:	1a9b      	subgt	r3, r3, r2
 8006428:	18ed      	addgt	r5, r5, r3
 800642a:	2600      	movs	r6, #0
 800642c:	341a      	adds	r4, #26
 800642e:	42b5      	cmp	r5, r6
 8006430:	d11a      	bne.n	8006468 <_printf_common+0xc8>
 8006432:	2000      	movs	r0, #0
 8006434:	e008      	b.n	8006448 <_printf_common+0xa8>
 8006436:	2301      	movs	r3, #1
 8006438:	4652      	mov	r2, sl
 800643a:	4641      	mov	r1, r8
 800643c:	4638      	mov	r0, r7
 800643e:	47c8      	blx	r9
 8006440:	3001      	adds	r0, #1
 8006442:	d103      	bne.n	800644c <_printf_common+0xac>
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644c:	3501      	adds	r5, #1
 800644e:	e7c6      	b.n	80063de <_printf_common+0x3e>
 8006450:	18e1      	adds	r1, r4, r3
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	2030      	movs	r0, #48	@ 0x30
 8006456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800645a:	4422      	add	r2, r4
 800645c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006464:	3302      	adds	r3, #2
 8006466:	e7c7      	b.n	80063f8 <_printf_common+0x58>
 8006468:	2301      	movs	r3, #1
 800646a:	4622      	mov	r2, r4
 800646c:	4641      	mov	r1, r8
 800646e:	4638      	mov	r0, r7
 8006470:	47c8      	blx	r9
 8006472:	3001      	adds	r0, #1
 8006474:	d0e6      	beq.n	8006444 <_printf_common+0xa4>
 8006476:	3601      	adds	r6, #1
 8006478:	e7d9      	b.n	800642e <_printf_common+0x8e>
	...

0800647c <_printf_i>:
 800647c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	7e0f      	ldrb	r7, [r1, #24]
 8006482:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006484:	2f78      	cmp	r7, #120	@ 0x78
 8006486:	4691      	mov	r9, r2
 8006488:	4680      	mov	r8, r0
 800648a:	460c      	mov	r4, r1
 800648c:	469a      	mov	sl, r3
 800648e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006492:	d807      	bhi.n	80064a4 <_printf_i+0x28>
 8006494:	2f62      	cmp	r7, #98	@ 0x62
 8006496:	d80a      	bhi.n	80064ae <_printf_i+0x32>
 8006498:	2f00      	cmp	r7, #0
 800649a:	f000 80d2 	beq.w	8006642 <_printf_i+0x1c6>
 800649e:	2f58      	cmp	r7, #88	@ 0x58
 80064a0:	f000 80b9 	beq.w	8006616 <_printf_i+0x19a>
 80064a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064ac:	e03a      	b.n	8006524 <_printf_i+0xa8>
 80064ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064b2:	2b15      	cmp	r3, #21
 80064b4:	d8f6      	bhi.n	80064a4 <_printf_i+0x28>
 80064b6:	a101      	add	r1, pc, #4	@ (adr r1, 80064bc <_printf_i+0x40>)
 80064b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064bc:	08006515 	.word	0x08006515
 80064c0:	08006529 	.word	0x08006529
 80064c4:	080064a5 	.word	0x080064a5
 80064c8:	080064a5 	.word	0x080064a5
 80064cc:	080064a5 	.word	0x080064a5
 80064d0:	080064a5 	.word	0x080064a5
 80064d4:	08006529 	.word	0x08006529
 80064d8:	080064a5 	.word	0x080064a5
 80064dc:	080064a5 	.word	0x080064a5
 80064e0:	080064a5 	.word	0x080064a5
 80064e4:	080064a5 	.word	0x080064a5
 80064e8:	08006629 	.word	0x08006629
 80064ec:	08006553 	.word	0x08006553
 80064f0:	080065e3 	.word	0x080065e3
 80064f4:	080064a5 	.word	0x080064a5
 80064f8:	080064a5 	.word	0x080064a5
 80064fc:	0800664b 	.word	0x0800664b
 8006500:	080064a5 	.word	0x080064a5
 8006504:	08006553 	.word	0x08006553
 8006508:	080064a5 	.word	0x080064a5
 800650c:	080064a5 	.word	0x080064a5
 8006510:	080065eb 	.word	0x080065eb
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	1d1a      	adds	r2, r3, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6032      	str	r2, [r6, #0]
 800651c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006524:	2301      	movs	r3, #1
 8006526:	e09d      	b.n	8006664 <_printf_i+0x1e8>
 8006528:	6833      	ldr	r3, [r6, #0]
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	1d19      	adds	r1, r3, #4
 800652e:	6031      	str	r1, [r6, #0]
 8006530:	0606      	lsls	r6, r0, #24
 8006532:	d501      	bpl.n	8006538 <_printf_i+0xbc>
 8006534:	681d      	ldr	r5, [r3, #0]
 8006536:	e003      	b.n	8006540 <_printf_i+0xc4>
 8006538:	0645      	lsls	r5, r0, #25
 800653a:	d5fb      	bpl.n	8006534 <_printf_i+0xb8>
 800653c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006540:	2d00      	cmp	r5, #0
 8006542:	da03      	bge.n	800654c <_printf_i+0xd0>
 8006544:	232d      	movs	r3, #45	@ 0x2d
 8006546:	426d      	negs	r5, r5
 8006548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800654c:	4859      	ldr	r0, [pc, #356]	@ (80066b4 <_printf_i+0x238>)
 800654e:	230a      	movs	r3, #10
 8006550:	e011      	b.n	8006576 <_printf_i+0xfa>
 8006552:	6821      	ldr	r1, [r4, #0]
 8006554:	6833      	ldr	r3, [r6, #0]
 8006556:	0608      	lsls	r0, r1, #24
 8006558:	f853 5b04 	ldr.w	r5, [r3], #4
 800655c:	d402      	bmi.n	8006564 <_printf_i+0xe8>
 800655e:	0649      	lsls	r1, r1, #25
 8006560:	bf48      	it	mi
 8006562:	b2ad      	uxthmi	r5, r5
 8006564:	2f6f      	cmp	r7, #111	@ 0x6f
 8006566:	4853      	ldr	r0, [pc, #332]	@ (80066b4 <_printf_i+0x238>)
 8006568:	6033      	str	r3, [r6, #0]
 800656a:	bf14      	ite	ne
 800656c:	230a      	movne	r3, #10
 800656e:	2308      	moveq	r3, #8
 8006570:	2100      	movs	r1, #0
 8006572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006576:	6866      	ldr	r6, [r4, #4]
 8006578:	60a6      	str	r6, [r4, #8]
 800657a:	2e00      	cmp	r6, #0
 800657c:	bfa2      	ittt	ge
 800657e:	6821      	ldrge	r1, [r4, #0]
 8006580:	f021 0104 	bicge.w	r1, r1, #4
 8006584:	6021      	strge	r1, [r4, #0]
 8006586:	b90d      	cbnz	r5, 800658c <_printf_i+0x110>
 8006588:	2e00      	cmp	r6, #0
 800658a:	d04b      	beq.n	8006624 <_printf_i+0x1a8>
 800658c:	4616      	mov	r6, r2
 800658e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006592:	fb03 5711 	mls	r7, r3, r1, r5
 8006596:	5dc7      	ldrb	r7, [r0, r7]
 8006598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800659c:	462f      	mov	r7, r5
 800659e:	42bb      	cmp	r3, r7
 80065a0:	460d      	mov	r5, r1
 80065a2:	d9f4      	bls.n	800658e <_printf_i+0x112>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d10b      	bne.n	80065c0 <_printf_i+0x144>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07df      	lsls	r7, r3, #31
 80065ac:	d508      	bpl.n	80065c0 <_printf_i+0x144>
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6861      	ldr	r1, [r4, #4]
 80065b2:	4299      	cmp	r1, r3
 80065b4:	bfde      	ittt	le
 80065b6:	2330      	movle	r3, #48	@ 0x30
 80065b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065c0:	1b92      	subs	r2, r2, r6
 80065c2:	6122      	str	r2, [r4, #16]
 80065c4:	f8cd a000 	str.w	sl, [sp]
 80065c8:	464b      	mov	r3, r9
 80065ca:	aa03      	add	r2, sp, #12
 80065cc:	4621      	mov	r1, r4
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7ff fee6 	bl	80063a0 <_printf_common>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d14a      	bne.n	800666e <_printf_i+0x1f2>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	b004      	add	sp, #16
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f043 0320 	orr.w	r3, r3, #32
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	4833      	ldr	r0, [pc, #204]	@ (80066b8 <_printf_i+0x23c>)
 80065ec:	2778      	movs	r7, #120	@ 0x78
 80065ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6831      	ldr	r1, [r6, #0]
 80065f6:	061f      	lsls	r7, r3, #24
 80065f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80065fc:	d402      	bmi.n	8006604 <_printf_i+0x188>
 80065fe:	065f      	lsls	r7, r3, #25
 8006600:	bf48      	it	mi
 8006602:	b2ad      	uxthmi	r5, r5
 8006604:	6031      	str	r1, [r6, #0]
 8006606:	07d9      	lsls	r1, r3, #31
 8006608:	bf44      	itt	mi
 800660a:	f043 0320 	orrmi.w	r3, r3, #32
 800660e:	6023      	strmi	r3, [r4, #0]
 8006610:	b11d      	cbz	r5, 800661a <_printf_i+0x19e>
 8006612:	2310      	movs	r3, #16
 8006614:	e7ac      	b.n	8006570 <_printf_i+0xf4>
 8006616:	4827      	ldr	r0, [pc, #156]	@ (80066b4 <_printf_i+0x238>)
 8006618:	e7e9      	b.n	80065ee <_printf_i+0x172>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	f023 0320 	bic.w	r3, r3, #32
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	e7f6      	b.n	8006612 <_printf_i+0x196>
 8006624:	4616      	mov	r6, r2
 8006626:	e7bd      	b.n	80065a4 <_printf_i+0x128>
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	6825      	ldr	r5, [r4, #0]
 800662c:	6961      	ldr	r1, [r4, #20]
 800662e:	1d18      	adds	r0, r3, #4
 8006630:	6030      	str	r0, [r6, #0]
 8006632:	062e      	lsls	r6, r5, #24
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	d501      	bpl.n	800663c <_printf_i+0x1c0>
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	e002      	b.n	8006642 <_printf_i+0x1c6>
 800663c:	0668      	lsls	r0, r5, #25
 800663e:	d5fb      	bpl.n	8006638 <_printf_i+0x1bc>
 8006640:	8019      	strh	r1, [r3, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	4616      	mov	r6, r2
 8006648:	e7bc      	b.n	80065c4 <_printf_i+0x148>
 800664a:	6833      	ldr	r3, [r6, #0]
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	6032      	str	r2, [r6, #0]
 8006650:	681e      	ldr	r6, [r3, #0]
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	2100      	movs	r1, #0
 8006656:	4630      	mov	r0, r6
 8006658:	f7f9 fdda 	bl	8000210 <memchr>
 800665c:	b108      	cbz	r0, 8006662 <_printf_i+0x1e6>
 800665e:	1b80      	subs	r0, r0, r6
 8006660:	6060      	str	r0, [r4, #4]
 8006662:	6863      	ldr	r3, [r4, #4]
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	2300      	movs	r3, #0
 8006668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800666c:	e7aa      	b.n	80065c4 <_printf_i+0x148>
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	4632      	mov	r2, r6
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d0ad      	beq.n	80065d8 <_printf_i+0x15c>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	079b      	lsls	r3, r3, #30
 8006680:	d413      	bmi.n	80066aa <_printf_i+0x22e>
 8006682:	68e0      	ldr	r0, [r4, #12]
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	4298      	cmp	r0, r3
 8006688:	bfb8      	it	lt
 800668a:	4618      	movlt	r0, r3
 800668c:	e7a6      	b.n	80065dc <_printf_i+0x160>
 800668e:	2301      	movs	r3, #1
 8006690:	4632      	mov	r2, r6
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	47d0      	blx	sl
 8006698:	3001      	adds	r0, #1
 800669a:	d09d      	beq.n	80065d8 <_printf_i+0x15c>
 800669c:	3501      	adds	r5, #1
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	9903      	ldr	r1, [sp, #12]
 80066a2:	1a5b      	subs	r3, r3, r1
 80066a4:	42ab      	cmp	r3, r5
 80066a6:	dcf2      	bgt.n	800668e <_printf_i+0x212>
 80066a8:	e7eb      	b.n	8006682 <_printf_i+0x206>
 80066aa:	2500      	movs	r5, #0
 80066ac:	f104 0619 	add.w	r6, r4, #25
 80066b0:	e7f5      	b.n	800669e <_printf_i+0x222>
 80066b2:	bf00      	nop
 80066b4:	08009e02 	.word	0x08009e02
 80066b8:	08009e13 	.word	0x08009e13

080066bc <_scanf_float>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	b087      	sub	sp, #28
 80066c2:	4617      	mov	r7, r2
 80066c4:	9303      	str	r3, [sp, #12]
 80066c6:	688b      	ldr	r3, [r1, #8]
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80066ce:	bf81      	itttt	hi
 80066d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80066d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80066d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80066dc:	608b      	strhi	r3, [r1, #8]
 80066de:	680b      	ldr	r3, [r1, #0]
 80066e0:	460a      	mov	r2, r1
 80066e2:	f04f 0500 	mov.w	r5, #0
 80066e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80066ea:	f842 3b1c 	str.w	r3, [r2], #28
 80066ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066f2:	4680      	mov	r8, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	bf98      	it	ls
 80066f8:	f04f 0b00 	movls.w	fp, #0
 80066fc:	9201      	str	r2, [sp, #4]
 80066fe:	4616      	mov	r6, r2
 8006700:	46aa      	mov	sl, r5
 8006702:	46a9      	mov	r9, r5
 8006704:	9502      	str	r5, [sp, #8]
 8006706:	68a2      	ldr	r2, [r4, #8]
 8006708:	b152      	cbz	r2, 8006720 <_scanf_float+0x64>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006710:	d864      	bhi.n	80067dc <_scanf_float+0x120>
 8006712:	2b40      	cmp	r3, #64	@ 0x40
 8006714:	d83c      	bhi.n	8006790 <_scanf_float+0xd4>
 8006716:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800671a:	b2c8      	uxtb	r0, r1
 800671c:	280e      	cmp	r0, #14
 800671e:	d93a      	bls.n	8006796 <_scanf_float+0xda>
 8006720:	f1b9 0f00 	cmp.w	r9, #0
 8006724:	d003      	beq.n	800672e <_scanf_float+0x72>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006732:	f1ba 0f01 	cmp.w	sl, #1
 8006736:	f200 8117 	bhi.w	8006968 <_scanf_float+0x2ac>
 800673a:	9b01      	ldr	r3, [sp, #4]
 800673c:	429e      	cmp	r6, r3
 800673e:	f200 8108 	bhi.w	8006952 <_scanf_float+0x296>
 8006742:	2001      	movs	r0, #1
 8006744:	b007      	add	sp, #28
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800674e:	2a0d      	cmp	r2, #13
 8006750:	d8e6      	bhi.n	8006720 <_scanf_float+0x64>
 8006752:	a101      	add	r1, pc, #4	@ (adr r1, 8006758 <_scanf_float+0x9c>)
 8006754:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006758:	0800689f 	.word	0x0800689f
 800675c:	08006721 	.word	0x08006721
 8006760:	08006721 	.word	0x08006721
 8006764:	08006721 	.word	0x08006721
 8006768:	080068ff 	.word	0x080068ff
 800676c:	080068d7 	.word	0x080068d7
 8006770:	08006721 	.word	0x08006721
 8006774:	08006721 	.word	0x08006721
 8006778:	080068ad 	.word	0x080068ad
 800677c:	08006721 	.word	0x08006721
 8006780:	08006721 	.word	0x08006721
 8006784:	08006721 	.word	0x08006721
 8006788:	08006721 	.word	0x08006721
 800678c:	08006865 	.word	0x08006865
 8006790:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006794:	e7db      	b.n	800674e <_scanf_float+0x92>
 8006796:	290e      	cmp	r1, #14
 8006798:	d8c2      	bhi.n	8006720 <_scanf_float+0x64>
 800679a:	a001      	add	r0, pc, #4	@ (adr r0, 80067a0 <_scanf_float+0xe4>)
 800679c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067a0:	08006855 	.word	0x08006855
 80067a4:	08006721 	.word	0x08006721
 80067a8:	08006855 	.word	0x08006855
 80067ac:	080068eb 	.word	0x080068eb
 80067b0:	08006721 	.word	0x08006721
 80067b4:	080067fd 	.word	0x080067fd
 80067b8:	0800683b 	.word	0x0800683b
 80067bc:	0800683b 	.word	0x0800683b
 80067c0:	0800683b 	.word	0x0800683b
 80067c4:	0800683b 	.word	0x0800683b
 80067c8:	0800683b 	.word	0x0800683b
 80067cc:	0800683b 	.word	0x0800683b
 80067d0:	0800683b 	.word	0x0800683b
 80067d4:	0800683b 	.word	0x0800683b
 80067d8:	0800683b 	.word	0x0800683b
 80067dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80067de:	d809      	bhi.n	80067f4 <_scanf_float+0x138>
 80067e0:	2b60      	cmp	r3, #96	@ 0x60
 80067e2:	d8b2      	bhi.n	800674a <_scanf_float+0x8e>
 80067e4:	2b54      	cmp	r3, #84	@ 0x54
 80067e6:	d07b      	beq.n	80068e0 <_scanf_float+0x224>
 80067e8:	2b59      	cmp	r3, #89	@ 0x59
 80067ea:	d199      	bne.n	8006720 <_scanf_float+0x64>
 80067ec:	2d07      	cmp	r5, #7
 80067ee:	d197      	bne.n	8006720 <_scanf_float+0x64>
 80067f0:	2508      	movs	r5, #8
 80067f2:	e02c      	b.n	800684e <_scanf_float+0x192>
 80067f4:	2b74      	cmp	r3, #116	@ 0x74
 80067f6:	d073      	beq.n	80068e0 <_scanf_float+0x224>
 80067f8:	2b79      	cmp	r3, #121	@ 0x79
 80067fa:	e7f6      	b.n	80067ea <_scanf_float+0x12e>
 80067fc:	6821      	ldr	r1, [r4, #0]
 80067fe:	05c8      	lsls	r0, r1, #23
 8006800:	d51b      	bpl.n	800683a <_scanf_float+0x17e>
 8006802:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006806:	6021      	str	r1, [r4, #0]
 8006808:	f109 0901 	add.w	r9, r9, #1
 800680c:	f1bb 0f00 	cmp.w	fp, #0
 8006810:	d003      	beq.n	800681a <_scanf_float+0x15e>
 8006812:	3201      	adds	r2, #1
 8006814:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006818:	60a2      	str	r2, [r4, #8]
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	3b01      	subs	r3, #1
 800681e:	60a3      	str	r3, [r4, #8]
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	3301      	adds	r3, #1
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3b01      	subs	r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
 800682e:	f340 8087 	ble.w	8006940 <_scanf_float+0x284>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	e765      	b.n	8006706 <_scanf_float+0x4a>
 800683a:	eb1a 0105 	adds.w	r1, sl, r5
 800683e:	f47f af6f 	bne.w	8006720 <_scanf_float+0x64>
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	460d      	mov	r5, r1
 800684c:	468a      	mov	sl, r1
 800684e:	f806 3b01 	strb.w	r3, [r6], #1
 8006852:	e7e2      	b.n	800681a <_scanf_float+0x15e>
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	0610      	lsls	r0, r2, #24
 8006858:	f57f af62 	bpl.w	8006720 <_scanf_float+0x64>
 800685c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006860:	6022      	str	r2, [r4, #0]
 8006862:	e7f4      	b.n	800684e <_scanf_float+0x192>
 8006864:	f1ba 0f00 	cmp.w	sl, #0
 8006868:	d10e      	bne.n	8006888 <_scanf_float+0x1cc>
 800686a:	f1b9 0f00 	cmp.w	r9, #0
 800686e:	d10e      	bne.n	800688e <_scanf_float+0x1d2>
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006876:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800687a:	d108      	bne.n	800688e <_scanf_float+0x1d2>
 800687c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006880:	6022      	str	r2, [r4, #0]
 8006882:	f04f 0a01 	mov.w	sl, #1
 8006886:	e7e2      	b.n	800684e <_scanf_float+0x192>
 8006888:	f1ba 0f02 	cmp.w	sl, #2
 800688c:	d055      	beq.n	800693a <_scanf_float+0x27e>
 800688e:	2d01      	cmp	r5, #1
 8006890:	d002      	beq.n	8006898 <_scanf_float+0x1dc>
 8006892:	2d04      	cmp	r5, #4
 8006894:	f47f af44 	bne.w	8006720 <_scanf_float+0x64>
 8006898:	3501      	adds	r5, #1
 800689a:	b2ed      	uxtb	r5, r5
 800689c:	e7d7      	b.n	800684e <_scanf_float+0x192>
 800689e:	f1ba 0f01 	cmp.w	sl, #1
 80068a2:	f47f af3d 	bne.w	8006720 <_scanf_float+0x64>
 80068a6:	f04f 0a02 	mov.w	sl, #2
 80068aa:	e7d0      	b.n	800684e <_scanf_float+0x192>
 80068ac:	b97d      	cbnz	r5, 80068ce <_scanf_float+0x212>
 80068ae:	f1b9 0f00 	cmp.w	r9, #0
 80068b2:	f47f af38 	bne.w	8006726 <_scanf_float+0x6a>
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80068bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80068c0:	f040 8108 	bne.w	8006ad4 <_scanf_float+0x418>
 80068c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068c8:	6022      	str	r2, [r4, #0]
 80068ca:	2501      	movs	r5, #1
 80068cc:	e7bf      	b.n	800684e <_scanf_float+0x192>
 80068ce:	2d03      	cmp	r5, #3
 80068d0:	d0e2      	beq.n	8006898 <_scanf_float+0x1dc>
 80068d2:	2d05      	cmp	r5, #5
 80068d4:	e7de      	b.n	8006894 <_scanf_float+0x1d8>
 80068d6:	2d02      	cmp	r5, #2
 80068d8:	f47f af22 	bne.w	8006720 <_scanf_float+0x64>
 80068dc:	2503      	movs	r5, #3
 80068de:	e7b6      	b.n	800684e <_scanf_float+0x192>
 80068e0:	2d06      	cmp	r5, #6
 80068e2:	f47f af1d 	bne.w	8006720 <_scanf_float+0x64>
 80068e6:	2507      	movs	r5, #7
 80068e8:	e7b1      	b.n	800684e <_scanf_float+0x192>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	0591      	lsls	r1, r2, #22
 80068ee:	f57f af17 	bpl.w	8006720 <_scanf_float+0x64>
 80068f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80068f6:	6022      	str	r2, [r4, #0]
 80068f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80068fc:	e7a7      	b.n	800684e <_scanf_float+0x192>
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006904:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006908:	d006      	beq.n	8006918 <_scanf_float+0x25c>
 800690a:	0550      	lsls	r0, r2, #21
 800690c:	f57f af08 	bpl.w	8006720 <_scanf_float+0x64>
 8006910:	f1b9 0f00 	cmp.w	r9, #0
 8006914:	f000 80de 	beq.w	8006ad4 <_scanf_float+0x418>
 8006918:	0591      	lsls	r1, r2, #22
 800691a:	bf58      	it	pl
 800691c:	9902      	ldrpl	r1, [sp, #8]
 800691e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006922:	bf58      	it	pl
 8006924:	eba9 0101 	subpl.w	r1, r9, r1
 8006928:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800692c:	bf58      	it	pl
 800692e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	f04f 0900 	mov.w	r9, #0
 8006938:	e789      	b.n	800684e <_scanf_float+0x192>
 800693a:	f04f 0a03 	mov.w	sl, #3
 800693e:	e786      	b.n	800684e <_scanf_float+0x192>
 8006940:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006944:	4639      	mov	r1, r7
 8006946:	4640      	mov	r0, r8
 8006948:	4798      	blx	r3
 800694a:	2800      	cmp	r0, #0
 800694c:	f43f aedb 	beq.w	8006706 <_scanf_float+0x4a>
 8006950:	e6e6      	b.n	8006720 <_scanf_float+0x64>
 8006952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800695a:	463a      	mov	r2, r7
 800695c:	4640      	mov	r0, r8
 800695e:	4798      	blx	r3
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	3b01      	subs	r3, #1
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	e6e8      	b.n	800673a <_scanf_float+0x7e>
 8006968:	1e6b      	subs	r3, r5, #1
 800696a:	2b06      	cmp	r3, #6
 800696c:	d824      	bhi.n	80069b8 <_scanf_float+0x2fc>
 800696e:	2d02      	cmp	r5, #2
 8006970:	d836      	bhi.n	80069e0 <_scanf_float+0x324>
 8006972:	9b01      	ldr	r3, [sp, #4]
 8006974:	429e      	cmp	r6, r3
 8006976:	f67f aee4 	bls.w	8006742 <_scanf_float+0x86>
 800697a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800697e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006982:	463a      	mov	r2, r7
 8006984:	4640      	mov	r0, r8
 8006986:	4798      	blx	r3
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	3b01      	subs	r3, #1
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	e7f0      	b.n	8006972 <_scanf_float+0x2b6>
 8006990:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006994:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006998:	463a      	mov	r2, r7
 800699a:	4640      	mov	r0, r8
 800699c:	4798      	blx	r3
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069a8:	fa5f fa8a 	uxtb.w	sl, sl
 80069ac:	f1ba 0f02 	cmp.w	sl, #2
 80069b0:	d1ee      	bne.n	8006990 <_scanf_float+0x2d4>
 80069b2:	3d03      	subs	r5, #3
 80069b4:	b2ed      	uxtb	r5, r5
 80069b6:	1b76      	subs	r6, r6, r5
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	05da      	lsls	r2, r3, #23
 80069bc:	d530      	bpl.n	8006a20 <_scanf_float+0x364>
 80069be:	055b      	lsls	r3, r3, #21
 80069c0:	d511      	bpl.n	80069e6 <_scanf_float+0x32a>
 80069c2:	9b01      	ldr	r3, [sp, #4]
 80069c4:	429e      	cmp	r6, r3
 80069c6:	f67f aebc 	bls.w	8006742 <_scanf_float+0x86>
 80069ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069d2:	463a      	mov	r2, r7
 80069d4:	4640      	mov	r0, r8
 80069d6:	4798      	blx	r3
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	3b01      	subs	r3, #1
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	e7f0      	b.n	80069c2 <_scanf_float+0x306>
 80069e0:	46aa      	mov	sl, r5
 80069e2:	46b3      	mov	fp, r6
 80069e4:	e7de      	b.n	80069a4 <_scanf_float+0x2e8>
 80069e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	2965      	cmp	r1, #101	@ 0x65
 80069ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80069f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	d00c      	beq.n	8006a14 <_scanf_float+0x358>
 80069fa:	2945      	cmp	r1, #69	@ 0x45
 80069fc:	d00a      	beq.n	8006a14 <_scanf_float+0x358>
 80069fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a02:	463a      	mov	r2, r7
 8006a04:	4640      	mov	r0, r8
 8006a06:	4798      	blx	r3
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	1eb5      	subs	r5, r6, #2
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a18:	463a      	mov	r2, r7
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4798      	blx	r3
 8006a1e:	462e      	mov	r6, r5
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	f012 0210 	ands.w	r2, r2, #16
 8006a26:	d001      	beq.n	8006a2c <_scanf_float+0x370>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e68b      	b.n	8006744 <_scanf_float+0x88>
 8006a2c:	7032      	strb	r2, [r6, #0]
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a38:	d11c      	bne.n	8006a74 <_scanf_float+0x3b8>
 8006a3a:	9b02      	ldr	r3, [sp, #8]
 8006a3c:	454b      	cmp	r3, r9
 8006a3e:	eba3 0209 	sub.w	r2, r3, r9
 8006a42:	d123      	bne.n	8006a8c <_scanf_float+0x3d0>
 8006a44:	9901      	ldr	r1, [sp, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	4640      	mov	r0, r8
 8006a4a:	f7ff f9cd 	bl	8005de8 <_strtod_r>
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	6821      	ldr	r1, [r4, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f011 0f02 	tst.w	r1, #2
 8006a58:	ec57 6b10 	vmov	r6, r7, d0
 8006a5c:	f103 0204 	add.w	r2, r3, #4
 8006a60:	d01f      	beq.n	8006aa2 <_scanf_float+0x3e6>
 8006a62:	9903      	ldr	r1, [sp, #12]
 8006a64:	600a      	str	r2, [r1, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	e9c3 6700 	strd	r6, r7, [r3]
 8006a6c:	68e3      	ldr	r3, [r4, #12]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60e3      	str	r3, [r4, #12]
 8006a72:	e7d9      	b.n	8006a28 <_scanf_float+0x36c>
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0e4      	beq.n	8006a44 <_scanf_float+0x388>
 8006a7a:	9905      	ldr	r1, [sp, #20]
 8006a7c:	230a      	movs	r3, #10
 8006a7e:	3101      	adds	r1, #1
 8006a80:	4640      	mov	r0, r8
 8006a82:	f002 fa89 	bl	8008f98 <_strtol_r>
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	9e05      	ldr	r6, [sp, #20]
 8006a8a:	1ac2      	subs	r2, r0, r3
 8006a8c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006a90:	429e      	cmp	r6, r3
 8006a92:	bf28      	it	cs
 8006a94:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006a98:	4910      	ldr	r1, [pc, #64]	@ (8006adc <_scanf_float+0x420>)
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f000 f918 	bl	8006cd0 <siprintf>
 8006aa0:	e7d0      	b.n	8006a44 <_scanf_float+0x388>
 8006aa2:	f011 0f04 	tst.w	r1, #4
 8006aa6:	9903      	ldr	r1, [sp, #12]
 8006aa8:	600a      	str	r2, [r1, #0]
 8006aaa:	d1dc      	bne.n	8006a66 <_scanf_float+0x3aa>
 8006aac:	681d      	ldr	r5, [r3, #0]
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	f7fa f859 	bl	8000b6c <__aeabi_dcmpun>
 8006aba:	b128      	cbz	r0, 8006ac8 <_scanf_float+0x40c>
 8006abc:	4808      	ldr	r0, [pc, #32]	@ (8006ae0 <_scanf_float+0x424>)
 8006abe:	f000 fa83 	bl	8006fc8 <nanf>
 8006ac2:	ed85 0a00 	vstr	s0, [r5]
 8006ac6:	e7d1      	b.n	8006a6c <_scanf_float+0x3b0>
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7fa f8ac 	bl	8000c28 <__aeabi_d2f>
 8006ad0:	6028      	str	r0, [r5, #0]
 8006ad2:	e7cb      	b.n	8006a6c <_scanf_float+0x3b0>
 8006ad4:	f04f 0900 	mov.w	r9, #0
 8006ad8:	e629      	b.n	800672e <_scanf_float+0x72>
 8006ada:	bf00      	nop
 8006adc:	08009e24 	.word	0x08009e24
 8006ae0:	08009edd 	.word	0x08009edd

08006ae4 <std>:
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	4604      	mov	r4, r0
 8006aea:	e9c0 3300 	strd	r3, r3, [r0]
 8006aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006af2:	6083      	str	r3, [r0, #8]
 8006af4:	8181      	strh	r1, [r0, #12]
 8006af6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006af8:	81c2      	strh	r2, [r0, #14]
 8006afa:	6183      	str	r3, [r0, #24]
 8006afc:	4619      	mov	r1, r3
 8006afe:	2208      	movs	r2, #8
 8006b00:	305c      	adds	r0, #92	@ 0x5c
 8006b02:	f000 f948 	bl	8006d96 <memset>
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <std+0x58>)
 8006b08:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <std+0x5c>)
 8006b0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <std+0x60>)
 8006b10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <std+0x64>)
 8006b14:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <std+0x68>)
 8006b18:	6224      	str	r4, [r4, #32]
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d006      	beq.n	8006b2c <std+0x48>
 8006b1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b22:	4294      	cmp	r4, r2
 8006b24:	d002      	beq.n	8006b2c <std+0x48>
 8006b26:	33d0      	adds	r3, #208	@ 0xd0
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	d105      	bne.n	8006b38 <std+0x54>
 8006b2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b34:	f000 ba2c 	b.w	8006f90 <__retarget_lock_init_recursive>
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08006d11 	.word	0x08006d11
 8006b40:	08006d33 	.word	0x08006d33
 8006b44:	08006d6b 	.word	0x08006d6b
 8006b48:	08006d8f 	.word	0x08006d8f
 8006b4c:	200003fc 	.word	0x200003fc

08006b50 <stdio_exit_handler>:
 8006b50:	4a02      	ldr	r2, [pc, #8]	@ (8006b5c <stdio_exit_handler+0xc>)
 8006b52:	4903      	ldr	r1, [pc, #12]	@ (8006b60 <stdio_exit_handler+0x10>)
 8006b54:	4803      	ldr	r0, [pc, #12]	@ (8006b64 <stdio_exit_handler+0x14>)
 8006b56:	f000 b869 	b.w	8006c2c <_fwalk_sglue>
 8006b5a:	bf00      	nop
 8006b5c:	2000004c 	.word	0x2000004c
 8006b60:	0800936d 	.word	0x0800936d
 8006b64:	200001c8 	.word	0x200001c8

08006b68 <cleanup_stdio>:
 8006b68:	6841      	ldr	r1, [r0, #4]
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b9c <cleanup_stdio+0x34>)
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	d001      	beq.n	8006b78 <cleanup_stdio+0x10>
 8006b74:	f002 fbfa 	bl	800936c <_fflush_r>
 8006b78:	68a1      	ldr	r1, [r4, #8]
 8006b7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ba0 <cleanup_stdio+0x38>)
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	d002      	beq.n	8006b86 <cleanup_stdio+0x1e>
 8006b80:	4620      	mov	r0, r4
 8006b82:	f002 fbf3 	bl	800936c <_fflush_r>
 8006b86:	68e1      	ldr	r1, [r4, #12]
 8006b88:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <cleanup_stdio+0x3c>)
 8006b8a:	4299      	cmp	r1, r3
 8006b8c:	d004      	beq.n	8006b98 <cleanup_stdio+0x30>
 8006b8e:	4620      	mov	r0, r4
 8006b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b94:	f002 bbea 	b.w	800936c <_fflush_r>
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200003fc 	.word	0x200003fc
 8006ba0:	20000464 	.word	0x20000464
 8006ba4:	200004cc 	.word	0x200004cc

08006ba8 <global_stdio_init.part.0>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <global_stdio_init.part.0+0x30>)
 8006bac:	4c0b      	ldr	r4, [pc, #44]	@ (8006bdc <global_stdio_init.part.0+0x34>)
 8006bae:	4a0c      	ldr	r2, [pc, #48]	@ (8006be0 <global_stdio_init.part.0+0x38>)
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	f7ff ff94 	bl	8006ae4 <std>
 8006bbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	2109      	movs	r1, #9
 8006bc4:	f7ff ff8e 	bl	8006ae4 <std>
 8006bc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bcc:	2202      	movs	r2, #2
 8006bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd2:	2112      	movs	r1, #18
 8006bd4:	f7ff bf86 	b.w	8006ae4 <std>
 8006bd8:	20000534 	.word	0x20000534
 8006bdc:	200003fc 	.word	0x200003fc
 8006be0:	08006b51 	.word	0x08006b51

08006be4 <__sfp_lock_acquire>:
 8006be4:	4801      	ldr	r0, [pc, #4]	@ (8006bec <__sfp_lock_acquire+0x8>)
 8006be6:	f000 b9d4 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 8006bea:	bf00      	nop
 8006bec:	2000053d 	.word	0x2000053d

08006bf0 <__sfp_lock_release>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	@ (8006bf8 <__sfp_lock_release+0x8>)
 8006bf2:	f000 b9cf 	b.w	8006f94 <__retarget_lock_release_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	2000053d 	.word	0x2000053d

08006bfc <__sinit>:
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	4604      	mov	r4, r0
 8006c00:	f7ff fff0 	bl	8006be4 <__sfp_lock_acquire>
 8006c04:	6a23      	ldr	r3, [r4, #32]
 8006c06:	b11b      	cbz	r3, 8006c10 <__sinit+0x14>
 8006c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0c:	f7ff bff0 	b.w	8006bf0 <__sfp_lock_release>
 8006c10:	4b04      	ldr	r3, [pc, #16]	@ (8006c24 <__sinit+0x28>)
 8006c12:	6223      	str	r3, [r4, #32]
 8006c14:	4b04      	ldr	r3, [pc, #16]	@ (8006c28 <__sinit+0x2c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f5      	bne.n	8006c08 <__sinit+0xc>
 8006c1c:	f7ff ffc4 	bl	8006ba8 <global_stdio_init.part.0>
 8006c20:	e7f2      	b.n	8006c08 <__sinit+0xc>
 8006c22:	bf00      	nop
 8006c24:	08006b69 	.word	0x08006b69
 8006c28:	20000534 	.word	0x20000534

08006c2c <_fwalk_sglue>:
 8006c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c30:	4607      	mov	r7, r0
 8006c32:	4688      	mov	r8, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	2600      	movs	r6, #0
 8006c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c40:	d505      	bpl.n	8006c4e <_fwalk_sglue+0x22>
 8006c42:	6824      	ldr	r4, [r4, #0]
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	d1f7      	bne.n	8006c38 <_fwalk_sglue+0xc>
 8006c48:	4630      	mov	r0, r6
 8006c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d907      	bls.n	8006c64 <_fwalk_sglue+0x38>
 8006c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	d003      	beq.n	8006c64 <_fwalk_sglue+0x38>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4638      	mov	r0, r7
 8006c60:	47c0      	blx	r8
 8006c62:	4306      	orrs	r6, r0
 8006c64:	3568      	adds	r5, #104	@ 0x68
 8006c66:	e7e9      	b.n	8006c3c <_fwalk_sglue+0x10>

08006c68 <sniprintf>:
 8006c68:	b40c      	push	{r2, r3}
 8006c6a:	b530      	push	{r4, r5, lr}
 8006c6c:	4b17      	ldr	r3, [pc, #92]	@ (8006ccc <sniprintf+0x64>)
 8006c6e:	1e0c      	subs	r4, r1, #0
 8006c70:	681d      	ldr	r5, [r3, #0]
 8006c72:	b09d      	sub	sp, #116	@ 0x74
 8006c74:	da08      	bge.n	8006c88 <sniprintf+0x20>
 8006c76:	238b      	movs	r3, #139	@ 0x8b
 8006c78:	602b      	str	r3, [r5, #0]
 8006c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7e:	b01d      	add	sp, #116	@ 0x74
 8006c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c84:	b002      	add	sp, #8
 8006c86:	4770      	bx	lr
 8006c88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c90:	bf14      	ite	ne
 8006c92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c96:	4623      	moveq	r3, r4
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	9307      	str	r3, [sp, #28]
 8006c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ca0:	9002      	str	r0, [sp, #8]
 8006ca2:	9006      	str	r0, [sp, #24]
 8006ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ca8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006caa:	ab21      	add	r3, sp, #132	@ 0x84
 8006cac:	a902      	add	r1, sp, #8
 8006cae:	4628      	mov	r0, r5
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	f002 f9db 	bl	800906c <_svfiprintf_r>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	bfbc      	itt	lt
 8006cba:	238b      	movlt	r3, #139	@ 0x8b
 8006cbc:	602b      	strlt	r3, [r5, #0]
 8006cbe:	2c00      	cmp	r4, #0
 8006cc0:	d0dd      	beq.n	8006c7e <sniprintf+0x16>
 8006cc2:	9b02      	ldr	r3, [sp, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e7d9      	b.n	8006c7e <sniprintf+0x16>
 8006cca:	bf00      	nop
 8006ccc:	200001c4 	.word	0x200001c4

08006cd0 <siprintf>:
 8006cd0:	b40e      	push	{r1, r2, r3}
 8006cd2:	b500      	push	{lr}
 8006cd4:	b09c      	sub	sp, #112	@ 0x70
 8006cd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006cd8:	9002      	str	r0, [sp, #8]
 8006cda:	9006      	str	r0, [sp, #24]
 8006cdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ce0:	4809      	ldr	r0, [pc, #36]	@ (8006d08 <siprintf+0x38>)
 8006ce2:	9107      	str	r1, [sp, #28]
 8006ce4:	9104      	str	r1, [sp, #16]
 8006ce6:	4909      	ldr	r1, [pc, #36]	@ (8006d0c <siprintf+0x3c>)
 8006ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cec:	9105      	str	r1, [sp, #20]
 8006cee:	6800      	ldr	r0, [r0, #0]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	a902      	add	r1, sp, #8
 8006cf4:	f002 f9ba 	bl	800906c <_svfiprintf_r>
 8006cf8:	9b02      	ldr	r3, [sp, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	b01c      	add	sp, #112	@ 0x70
 8006d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d04:	b003      	add	sp, #12
 8006d06:	4770      	bx	lr
 8006d08:	200001c4 	.word	0x200001c4
 8006d0c:	ffff0208 	.word	0xffff0208

08006d10 <__sread>:
 8006d10:	b510      	push	{r4, lr}
 8006d12:	460c      	mov	r4, r1
 8006d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d18:	f000 f8ec 	bl	8006ef4 <_read_r>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	bfab      	itete	ge
 8006d20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d22:	89a3      	ldrhlt	r3, [r4, #12]
 8006d24:	181b      	addge	r3, r3, r0
 8006d26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d2a:	bfac      	ite	ge
 8006d2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d2e:	81a3      	strhlt	r3, [r4, #12]
 8006d30:	bd10      	pop	{r4, pc}

08006d32 <__swrite>:
 8006d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d36:	461f      	mov	r7, r3
 8006d38:	898b      	ldrh	r3, [r1, #12]
 8006d3a:	05db      	lsls	r3, r3, #23
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	4616      	mov	r6, r2
 8006d42:	d505      	bpl.n	8006d50 <__swrite+0x1e>
 8006d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d48:	2302      	movs	r3, #2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f000 f8c0 	bl	8006ed0 <_lseek_r>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	463b      	mov	r3, r7
 8006d60:	4628      	mov	r0, r5
 8006d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	f000 b8d7 	b.w	8006f18 <_write_r>

08006d6a <__sseek>:
 8006d6a:	b510      	push	{r4, lr}
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d72:	f000 f8ad 	bl	8006ed0 <_lseek_r>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	bf15      	itete	ne
 8006d7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d86:	81a3      	strheq	r3, [r4, #12]
 8006d88:	bf18      	it	ne
 8006d8a:	81a3      	strhne	r3, [r4, #12]
 8006d8c:	bd10      	pop	{r4, pc}

08006d8e <__sclose>:
 8006d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d92:	f000 b88d 	b.w	8006eb0 <_close_r>

08006d96 <memset>:
 8006d96:	4402      	add	r2, r0
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d100      	bne.n	8006da0 <memset+0xa>
 8006d9e:	4770      	bx	lr
 8006da0:	f803 1b01 	strb.w	r1, [r3], #1
 8006da4:	e7f9      	b.n	8006d9a <memset+0x4>

08006da6 <strncmp>:
 8006da6:	b510      	push	{r4, lr}
 8006da8:	b16a      	cbz	r2, 8006dc6 <strncmp+0x20>
 8006daa:	3901      	subs	r1, #1
 8006dac:	1884      	adds	r4, r0, r2
 8006dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d103      	bne.n	8006dc2 <strncmp+0x1c>
 8006dba:	42a0      	cmp	r0, r4
 8006dbc:	d001      	beq.n	8006dc2 <strncmp+0x1c>
 8006dbe:	2a00      	cmp	r2, #0
 8006dc0:	d1f5      	bne.n	8006dae <strncmp+0x8>
 8006dc2:	1ad0      	subs	r0, r2, r3
 8006dc4:	bd10      	pop	{r4, pc}
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	e7fc      	b.n	8006dc4 <strncmp+0x1e>

08006dca <strncpy>:
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	3901      	subs	r1, #1
 8006dce:	4603      	mov	r3, r0
 8006dd0:	b132      	cbz	r2, 8006de0 <strncpy+0x16>
 8006dd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006dd6:	f803 4b01 	strb.w	r4, [r3], #1
 8006dda:	3a01      	subs	r2, #1
 8006ddc:	2c00      	cmp	r4, #0
 8006dde:	d1f7      	bne.n	8006dd0 <strncpy+0x6>
 8006de0:	441a      	add	r2, r3
 8006de2:	2100      	movs	r1, #0
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d100      	bne.n	8006dea <strncpy+0x20>
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	f803 1b01 	strb.w	r1, [r3], #1
 8006dee:	e7f9      	b.n	8006de4 <strncpy+0x1a>

08006df0 <strtok>:
 8006df0:	4b16      	ldr	r3, [pc, #88]	@ (8006e4c <strtok+0x5c>)
 8006df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	681f      	ldr	r7, [r3, #0]
 8006df8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	460e      	mov	r6, r1
 8006dfe:	b9ec      	cbnz	r4, 8006e3c <strtok+0x4c>
 8006e00:	2050      	movs	r0, #80	@ 0x50
 8006e02:	f001 fad5 	bl	80083b0 <malloc>
 8006e06:	4602      	mov	r2, r0
 8006e08:	6478      	str	r0, [r7, #68]	@ 0x44
 8006e0a:	b920      	cbnz	r0, 8006e16 <strtok+0x26>
 8006e0c:	4b10      	ldr	r3, [pc, #64]	@ (8006e50 <strtok+0x60>)
 8006e0e:	4811      	ldr	r0, [pc, #68]	@ (8006e54 <strtok+0x64>)
 8006e10:	215b      	movs	r1, #91	@ 0x5b
 8006e12:	f000 f8df 	bl	8006fd4 <__assert_func>
 8006e16:	e9c0 4400 	strd	r4, r4, [r0]
 8006e1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006e1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006e22:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006e26:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006e2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006e2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006e32:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006e36:	6184      	str	r4, [r0, #24]
 8006e38:	7704      	strb	r4, [r0, #28]
 8006e3a:	6244      	str	r4, [r0, #36]	@ 0x24
 8006e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	2301      	movs	r3, #1
 8006e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	f000 b806 	b.w	8006e58 <__strtok_r>
 8006e4c:	200001c4 	.word	0x200001c4
 8006e50:	08009e29 	.word	0x08009e29
 8006e54:	08009e40 	.word	0x08009e40

08006e58 <__strtok_r>:
 8006e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	b908      	cbnz	r0, 8006e62 <__strtok_r+0xa>
 8006e5e:	6814      	ldr	r4, [r2, #0]
 8006e60:	b144      	cbz	r4, 8006e74 <__strtok_r+0x1c>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e68:	460f      	mov	r7, r1
 8006e6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e6e:	b91e      	cbnz	r6, 8006e78 <__strtok_r+0x20>
 8006e70:	b965      	cbnz	r5, 8006e8c <__strtok_r+0x34>
 8006e72:	6015      	str	r5, [r2, #0]
 8006e74:	2000      	movs	r0, #0
 8006e76:	e005      	b.n	8006e84 <__strtok_r+0x2c>
 8006e78:	42b5      	cmp	r5, r6
 8006e7a:	d1f6      	bne.n	8006e6a <__strtok_r+0x12>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1f0      	bne.n	8006e62 <__strtok_r+0xa>
 8006e80:	6014      	str	r4, [r2, #0]
 8006e82:	7003      	strb	r3, [r0, #0]
 8006e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e86:	461c      	mov	r4, r3
 8006e88:	e00c      	b.n	8006ea4 <__strtok_r+0x4c>
 8006e8a:	b915      	cbnz	r5, 8006e92 <__strtok_r+0x3a>
 8006e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e90:	460e      	mov	r6, r1
 8006e92:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e96:	42ab      	cmp	r3, r5
 8006e98:	d1f7      	bne.n	8006e8a <__strtok_r+0x32>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f3      	beq.n	8006e86 <__strtok_r+0x2e>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006ea4:	6014      	str	r4, [r2, #0]
 8006ea6:	e7ed      	b.n	8006e84 <__strtok_r+0x2c>

08006ea8 <_localeconv_r>:
 8006ea8:	4800      	ldr	r0, [pc, #0]	@ (8006eac <_localeconv_r+0x4>)
 8006eaa:	4770      	bx	lr
 8006eac:	20000148 	.word	0x20000148

08006eb0 <_close_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4d06      	ldr	r5, [pc, #24]	@ (8006ecc <_close_r+0x1c>)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	f7fb f85e 	bl	8001f7c <_close>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_close_r+0x1a>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_close_r+0x1a>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20000538 	.word	0x20000538

08006ed0 <_lseek_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d07      	ldr	r5, [pc, #28]	@ (8006ef0 <_lseek_r+0x20>)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	4608      	mov	r0, r1
 8006ed8:	4611      	mov	r1, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7fb f873 	bl	8001fca <_lseek>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_lseek_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_lseek_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	20000538 	.word	0x20000538

08006ef4 <_read_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d07      	ldr	r5, [pc, #28]	@ (8006f14 <_read_r+0x20>)
 8006ef8:	4604      	mov	r4, r0
 8006efa:	4608      	mov	r0, r1
 8006efc:	4611      	mov	r1, r2
 8006efe:	2200      	movs	r2, #0
 8006f00:	602a      	str	r2, [r5, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f7fb f801 	bl	8001f0a <_read>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_read_r+0x1e>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_read_r+0x1e>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20000538 	.word	0x20000538

08006f18 <_write_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4d07      	ldr	r5, [pc, #28]	@ (8006f38 <_write_r+0x20>)
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	4608      	mov	r0, r1
 8006f20:	4611      	mov	r1, r2
 8006f22:	2200      	movs	r2, #0
 8006f24:	602a      	str	r2, [r5, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f7fb f80c 	bl	8001f44 <_write>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_write_r+0x1e>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_write_r+0x1e>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	20000538 	.word	0x20000538

08006f3c <__errno>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	@ (8006f44 <__errno+0x8>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	200001c4 	.word	0x200001c4

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	@ (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f002 fd58 	bl	8009a10 <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	0800a22c 	.word	0x0800a22c
 8006f84:	0800a22c 	.word	0x0800a22c
 8006f88:	0800a22c 	.word	0x0800a22c
 8006f8c:	0800a230 	.word	0x0800a230

08006f90 <__retarget_lock_init_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <__retarget_lock_acquire_recursive>:
 8006f92:	4770      	bx	lr

08006f94 <__retarget_lock_release_recursive>:
 8006f94:	4770      	bx	lr

08006f96 <memcpy>:
 8006f96:	440a      	add	r2, r1
 8006f98:	4291      	cmp	r1, r2
 8006f9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f9e:	d100      	bne.n	8006fa2 <memcpy+0xc>
 8006fa0:	4770      	bx	lr
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fac:	4291      	cmp	r1, r2
 8006fae:	d1f9      	bne.n	8006fa4 <memcpy+0xe>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	0000      	movs	r0, r0
 8006fb4:	0000      	movs	r0, r0
	...

08006fb8 <nan>:
 8006fb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006fc0 <nan+0x8>
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	7ff80000 	.word	0x7ff80000

08006fc8 <nanf>:
 8006fc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006fd0 <nanf+0x8>
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	7fc00000 	.word	0x7fc00000

08006fd4 <__assert_func>:
 8006fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4b09      	ldr	r3, [pc, #36]	@ (8007000 <__assert_func+0x2c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4605      	mov	r5, r0
 8006fe0:	68d8      	ldr	r0, [r3, #12]
 8006fe2:	b954      	cbnz	r4, 8006ffa <__assert_func+0x26>
 8006fe4:	4b07      	ldr	r3, [pc, #28]	@ (8007004 <__assert_func+0x30>)
 8006fe6:	461c      	mov	r4, r3
 8006fe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fec:	9100      	str	r1, [sp, #0]
 8006fee:	462b      	mov	r3, r5
 8006ff0:	4905      	ldr	r1, [pc, #20]	@ (8007008 <__assert_func+0x34>)
 8006ff2:	f002 f9e3 	bl	80093bc <fiprintf>
 8006ff6:	f002 fa1d 	bl	8009434 <abort>
 8006ffa:	4b04      	ldr	r3, [pc, #16]	@ (800700c <__assert_func+0x38>)
 8006ffc:	e7f4      	b.n	8006fe8 <__assert_func+0x14>
 8006ffe:	bf00      	nop
 8007000:	200001c4 	.word	0x200001c4
 8007004:	08009edd 	.word	0x08009edd
 8007008:	08009eaf 	.word	0x08009eaf
 800700c:	08009ea2 	.word	0x08009ea2

08007010 <quorem>:
 8007010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	6903      	ldr	r3, [r0, #16]
 8007016:	690c      	ldr	r4, [r1, #16]
 8007018:	42a3      	cmp	r3, r4
 800701a:	4607      	mov	r7, r0
 800701c:	db7e      	blt.n	800711c <quorem+0x10c>
 800701e:	3c01      	subs	r4, #1
 8007020:	f101 0814 	add.w	r8, r1, #20
 8007024:	00a3      	lsls	r3, r4, #2
 8007026:	f100 0514 	add.w	r5, r0, #20
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800703a:	3301      	adds	r3, #1
 800703c:	429a      	cmp	r2, r3
 800703e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007042:	fbb2 f6f3 	udiv	r6, r2, r3
 8007046:	d32e      	bcc.n	80070a6 <quorem+0x96>
 8007048:	f04f 0a00 	mov.w	sl, #0
 800704c:	46c4      	mov	ip, r8
 800704e:	46ae      	mov	lr, r5
 8007050:	46d3      	mov	fp, sl
 8007052:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007056:	b298      	uxth	r0, r3
 8007058:	fb06 a000 	mla	r0, r6, r0, sl
 800705c:	0c02      	lsrs	r2, r0, #16
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	fb06 2303 	mla	r3, r6, r3, r2
 8007064:	f8de 2000 	ldr.w	r2, [lr]
 8007068:	b280      	uxth	r0, r0
 800706a:	b292      	uxth	r2, r2
 800706c:	1a12      	subs	r2, r2, r0
 800706e:	445a      	add	r2, fp
 8007070:	f8de 0000 	ldr.w	r0, [lr]
 8007074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007078:	b29b      	uxth	r3, r3
 800707a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800707e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007082:	b292      	uxth	r2, r2
 8007084:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007088:	45e1      	cmp	r9, ip
 800708a:	f84e 2b04 	str.w	r2, [lr], #4
 800708e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007092:	d2de      	bcs.n	8007052 <quorem+0x42>
 8007094:	9b00      	ldr	r3, [sp, #0]
 8007096:	58eb      	ldr	r3, [r5, r3]
 8007098:	b92b      	cbnz	r3, 80070a6 <quorem+0x96>
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	3b04      	subs	r3, #4
 800709e:	429d      	cmp	r5, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	d32f      	bcc.n	8007104 <quorem+0xf4>
 80070a4:	613c      	str	r4, [r7, #16]
 80070a6:	4638      	mov	r0, r7
 80070a8:	f001 fd0e 	bl	8008ac8 <__mcmp>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	db25      	blt.n	80070fc <quorem+0xec>
 80070b0:	4629      	mov	r1, r5
 80070b2:	2000      	movs	r0, #0
 80070b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80070b8:	f8d1 c000 	ldr.w	ip, [r1]
 80070bc:	fa1f fe82 	uxth.w	lr, r2
 80070c0:	fa1f f38c 	uxth.w	r3, ip
 80070c4:	eba3 030e 	sub.w	r3, r3, lr
 80070c8:	4403      	add	r3, r0
 80070ca:	0c12      	lsrs	r2, r2, #16
 80070cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070da:	45c1      	cmp	r9, r8
 80070dc:	f841 3b04 	str.w	r3, [r1], #4
 80070e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070e4:	d2e6      	bcs.n	80070b4 <quorem+0xa4>
 80070e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ee:	b922      	cbnz	r2, 80070fa <quorem+0xea>
 80070f0:	3b04      	subs	r3, #4
 80070f2:	429d      	cmp	r5, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	d30b      	bcc.n	8007110 <quorem+0x100>
 80070f8:	613c      	str	r4, [r7, #16]
 80070fa:	3601      	adds	r6, #1
 80070fc:	4630      	mov	r0, r6
 80070fe:	b003      	add	sp, #12
 8007100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	3b04      	subs	r3, #4
 8007108:	2a00      	cmp	r2, #0
 800710a:	d1cb      	bne.n	80070a4 <quorem+0x94>
 800710c:	3c01      	subs	r4, #1
 800710e:	e7c6      	b.n	800709e <quorem+0x8e>
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	3b04      	subs	r3, #4
 8007114:	2a00      	cmp	r2, #0
 8007116:	d1ef      	bne.n	80070f8 <quorem+0xe8>
 8007118:	3c01      	subs	r4, #1
 800711a:	e7ea      	b.n	80070f2 <quorem+0xe2>
 800711c:	2000      	movs	r0, #0
 800711e:	e7ee      	b.n	80070fe <quorem+0xee>

08007120 <_dtoa_r>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	69c7      	ldr	r7, [r0, #28]
 8007126:	b099      	sub	sp, #100	@ 0x64
 8007128:	ed8d 0b02 	vstr	d0, [sp, #8]
 800712c:	ec55 4b10 	vmov	r4, r5, d0
 8007130:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007132:	9109      	str	r1, [sp, #36]	@ 0x24
 8007134:	4683      	mov	fp, r0
 8007136:	920e      	str	r2, [sp, #56]	@ 0x38
 8007138:	9313      	str	r3, [sp, #76]	@ 0x4c
 800713a:	b97f      	cbnz	r7, 800715c <_dtoa_r+0x3c>
 800713c:	2010      	movs	r0, #16
 800713e:	f001 f937 	bl	80083b0 <malloc>
 8007142:	4602      	mov	r2, r0
 8007144:	f8cb 001c 	str.w	r0, [fp, #28]
 8007148:	b920      	cbnz	r0, 8007154 <_dtoa_r+0x34>
 800714a:	4ba7      	ldr	r3, [pc, #668]	@ (80073e8 <_dtoa_r+0x2c8>)
 800714c:	21ef      	movs	r1, #239	@ 0xef
 800714e:	48a7      	ldr	r0, [pc, #668]	@ (80073ec <_dtoa_r+0x2cc>)
 8007150:	f7ff ff40 	bl	8006fd4 <__assert_func>
 8007154:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007158:	6007      	str	r7, [r0, #0]
 800715a:	60c7      	str	r7, [r0, #12]
 800715c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007160:	6819      	ldr	r1, [r3, #0]
 8007162:	b159      	cbz	r1, 800717c <_dtoa_r+0x5c>
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	604a      	str	r2, [r1, #4]
 8007168:	2301      	movs	r3, #1
 800716a:	4093      	lsls	r3, r2
 800716c:	608b      	str	r3, [r1, #8]
 800716e:	4658      	mov	r0, fp
 8007170:	f001 fa26 	bl	80085c0 <_Bfree>
 8007174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	1e2b      	subs	r3, r5, #0
 800717e:	bfb9      	ittee	lt
 8007180:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	9303      	strlt	r3, [sp, #12]
 8007186:	2300      	movge	r3, #0
 8007188:	6033      	strge	r3, [r6, #0]
 800718a:	9f03      	ldr	r7, [sp, #12]
 800718c:	4b98      	ldr	r3, [pc, #608]	@ (80073f0 <_dtoa_r+0x2d0>)
 800718e:	bfbc      	itt	lt
 8007190:	2201      	movlt	r2, #1
 8007192:	6032      	strlt	r2, [r6, #0]
 8007194:	43bb      	bics	r3, r7
 8007196:	d112      	bne.n	80071be <_dtoa_r+0x9e>
 8007198:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800719a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071a4:	4323      	orrs	r3, r4
 80071a6:	f000 854d 	beq.w	8007c44 <_dtoa_r+0xb24>
 80071aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007404 <_dtoa_r+0x2e4>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 854f 	beq.w	8007c54 <_dtoa_r+0xb34>
 80071b6:	f10a 0303 	add.w	r3, sl, #3
 80071ba:	f000 bd49 	b.w	8007c50 <_dtoa_r+0xb30>
 80071be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	ec51 0b17 	vmov	r0, r1, d7
 80071c8:	2300      	movs	r3, #0
 80071ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80071ce:	f7f9 fc9b 	bl	8000b08 <__aeabi_dcmpeq>
 80071d2:	4680      	mov	r8, r0
 80071d4:	b158      	cbz	r0, 80071ee <_dtoa_r+0xce>
 80071d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071d8:	2301      	movs	r3, #1
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071de:	b113      	cbz	r3, 80071e6 <_dtoa_r+0xc6>
 80071e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071e2:	4b84      	ldr	r3, [pc, #528]	@ (80073f4 <_dtoa_r+0x2d4>)
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007408 <_dtoa_r+0x2e8>
 80071ea:	f000 bd33 	b.w	8007c54 <_dtoa_r+0xb34>
 80071ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80071f2:	aa16      	add	r2, sp, #88	@ 0x58
 80071f4:	a917      	add	r1, sp, #92	@ 0x5c
 80071f6:	4658      	mov	r0, fp
 80071f8:	f001 fd86 	bl	8008d08 <__d2b>
 80071fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007200:	4681      	mov	r9, r0
 8007202:	2e00      	cmp	r6, #0
 8007204:	d077      	beq.n	80072f6 <_dtoa_r+0x1d6>
 8007206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007208:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800720c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007214:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007218:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800721c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007220:	4619      	mov	r1, r3
 8007222:	2200      	movs	r2, #0
 8007224:	4b74      	ldr	r3, [pc, #464]	@ (80073f8 <_dtoa_r+0x2d8>)
 8007226:	f7f9 f84f 	bl	80002c8 <__aeabi_dsub>
 800722a:	a369      	add	r3, pc, #420	@ (adr r3, 80073d0 <_dtoa_r+0x2b0>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 fa02 	bl	8000638 <__aeabi_dmul>
 8007234:	a368      	add	r3, pc, #416	@ (adr r3, 80073d8 <_dtoa_r+0x2b8>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f9 f847 	bl	80002cc <__adddf3>
 800723e:	4604      	mov	r4, r0
 8007240:	4630      	mov	r0, r6
 8007242:	460d      	mov	r5, r1
 8007244:	f7f9 f98e 	bl	8000564 <__aeabi_i2d>
 8007248:	a365      	add	r3, pc, #404	@ (adr r3, 80073e0 <_dtoa_r+0x2c0>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f9 f9f3 	bl	8000638 <__aeabi_dmul>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 f837 	bl	80002cc <__adddf3>
 800725e:	4604      	mov	r4, r0
 8007260:	460d      	mov	r5, r1
 8007262:	f7f9 fc99 	bl	8000b98 <__aeabi_d2iz>
 8007266:	2200      	movs	r2, #0
 8007268:	4607      	mov	r7, r0
 800726a:	2300      	movs	r3, #0
 800726c:	4620      	mov	r0, r4
 800726e:	4629      	mov	r1, r5
 8007270:	f7f9 fc54 	bl	8000b1c <__aeabi_dcmplt>
 8007274:	b140      	cbz	r0, 8007288 <_dtoa_r+0x168>
 8007276:	4638      	mov	r0, r7
 8007278:	f7f9 f974 	bl	8000564 <__aeabi_i2d>
 800727c:	4622      	mov	r2, r4
 800727e:	462b      	mov	r3, r5
 8007280:	f7f9 fc42 	bl	8000b08 <__aeabi_dcmpeq>
 8007284:	b900      	cbnz	r0, 8007288 <_dtoa_r+0x168>
 8007286:	3f01      	subs	r7, #1
 8007288:	2f16      	cmp	r7, #22
 800728a:	d851      	bhi.n	8007330 <_dtoa_r+0x210>
 800728c:	4b5b      	ldr	r3, [pc, #364]	@ (80073fc <_dtoa_r+0x2dc>)
 800728e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800729a:	f7f9 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d048      	beq.n	8007334 <_dtoa_r+0x214>
 80072a2:	3f01      	subs	r7, #1
 80072a4:	2300      	movs	r3, #0
 80072a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80072a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072aa:	1b9b      	subs	r3, r3, r6
 80072ac:	1e5a      	subs	r2, r3, #1
 80072ae:	bf44      	itt	mi
 80072b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80072b4:	2300      	movmi	r3, #0
 80072b6:	9208      	str	r2, [sp, #32]
 80072b8:	bf54      	ite	pl
 80072ba:	f04f 0800 	movpl.w	r8, #0
 80072be:	9308      	strmi	r3, [sp, #32]
 80072c0:	2f00      	cmp	r7, #0
 80072c2:	db39      	blt.n	8007338 <_dtoa_r+0x218>
 80072c4:	9b08      	ldr	r3, [sp, #32]
 80072c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80072c8:	443b      	add	r3, r7
 80072ca:	9308      	str	r3, [sp, #32]
 80072cc:	2300      	movs	r3, #0
 80072ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d2:	2b09      	cmp	r3, #9
 80072d4:	d864      	bhi.n	80073a0 <_dtoa_r+0x280>
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	bfc4      	itt	gt
 80072da:	3b04      	subgt	r3, #4
 80072dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80072de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e0:	f1a3 0302 	sub.w	r3, r3, #2
 80072e4:	bfcc      	ite	gt
 80072e6:	2400      	movgt	r4, #0
 80072e8:	2401      	movle	r4, #1
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d863      	bhi.n	80073b6 <_dtoa_r+0x296>
 80072ee:	e8df f003 	tbb	[pc, r3]
 80072f2:	372a      	.short	0x372a
 80072f4:	5535      	.short	0x5535
 80072f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80072fa:	441e      	add	r6, r3
 80072fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007300:	2b20      	cmp	r3, #32
 8007302:	bfc1      	itttt	gt
 8007304:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007308:	409f      	lslgt	r7, r3
 800730a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800730e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007312:	bfd6      	itet	le
 8007314:	f1c3 0320 	rsble	r3, r3, #32
 8007318:	ea47 0003 	orrgt.w	r0, r7, r3
 800731c:	fa04 f003 	lslle.w	r0, r4, r3
 8007320:	f7f9 f910 	bl	8000544 <__aeabi_ui2d>
 8007324:	2201      	movs	r2, #1
 8007326:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800732a:	3e01      	subs	r6, #1
 800732c:	9214      	str	r2, [sp, #80]	@ 0x50
 800732e:	e777      	b.n	8007220 <_dtoa_r+0x100>
 8007330:	2301      	movs	r3, #1
 8007332:	e7b8      	b.n	80072a6 <_dtoa_r+0x186>
 8007334:	9012      	str	r0, [sp, #72]	@ 0x48
 8007336:	e7b7      	b.n	80072a8 <_dtoa_r+0x188>
 8007338:	427b      	negs	r3, r7
 800733a:	930a      	str	r3, [sp, #40]	@ 0x28
 800733c:	2300      	movs	r3, #0
 800733e:	eba8 0807 	sub.w	r8, r8, r7
 8007342:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007344:	e7c4      	b.n	80072d0 <_dtoa_r+0x1b0>
 8007346:	2300      	movs	r3, #0
 8007348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800734a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	dc35      	bgt.n	80073bc <_dtoa_r+0x29c>
 8007350:	2301      	movs	r3, #1
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	9307      	str	r3, [sp, #28]
 8007356:	461a      	mov	r2, r3
 8007358:	920e      	str	r2, [sp, #56]	@ 0x38
 800735a:	e00b      	b.n	8007374 <_dtoa_r+0x254>
 800735c:	2301      	movs	r3, #1
 800735e:	e7f3      	b.n	8007348 <_dtoa_r+0x228>
 8007360:	2300      	movs	r3, #0
 8007362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007366:	18fb      	adds	r3, r7, r3
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	9307      	str	r3, [sp, #28]
 8007370:	bfb8      	it	lt
 8007372:	2301      	movlt	r3, #1
 8007374:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007378:	2100      	movs	r1, #0
 800737a:	2204      	movs	r2, #4
 800737c:	f102 0514 	add.w	r5, r2, #20
 8007380:	429d      	cmp	r5, r3
 8007382:	d91f      	bls.n	80073c4 <_dtoa_r+0x2a4>
 8007384:	6041      	str	r1, [r0, #4]
 8007386:	4658      	mov	r0, fp
 8007388:	f001 f8da 	bl	8008540 <_Balloc>
 800738c:	4682      	mov	sl, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	d13c      	bne.n	800740c <_dtoa_r+0x2ec>
 8007392:	4b1b      	ldr	r3, [pc, #108]	@ (8007400 <_dtoa_r+0x2e0>)
 8007394:	4602      	mov	r2, r0
 8007396:	f240 11af 	movw	r1, #431	@ 0x1af
 800739a:	e6d8      	b.n	800714e <_dtoa_r+0x2e>
 800739c:	2301      	movs	r3, #1
 800739e:	e7e0      	b.n	8007362 <_dtoa_r+0x242>
 80073a0:	2401      	movs	r4, #1
 80073a2:	2300      	movs	r3, #0
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073a8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	9307      	str	r3, [sp, #28]
 80073b0:	2200      	movs	r2, #0
 80073b2:	2312      	movs	r3, #18
 80073b4:	e7d0      	b.n	8007358 <_dtoa_r+0x238>
 80073b6:	2301      	movs	r3, #1
 80073b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073ba:	e7f5      	b.n	80073a8 <_dtoa_r+0x288>
 80073bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	9307      	str	r3, [sp, #28]
 80073c2:	e7d7      	b.n	8007374 <_dtoa_r+0x254>
 80073c4:	3101      	adds	r1, #1
 80073c6:	0052      	lsls	r2, r2, #1
 80073c8:	e7d8      	b.n	800737c <_dtoa_r+0x25c>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	636f4361 	.word	0x636f4361
 80073d4:	3fd287a7 	.word	0x3fd287a7
 80073d8:	8b60c8b3 	.word	0x8b60c8b3
 80073dc:	3fc68a28 	.word	0x3fc68a28
 80073e0:	509f79fb 	.word	0x509f79fb
 80073e4:	3fd34413 	.word	0x3fd34413
 80073e8:	08009e29 	.word	0x08009e29
 80073ec:	08009eeb 	.word	0x08009eeb
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	08009e01 	.word	0x08009e01
 80073f8:	3ff80000 	.word	0x3ff80000
 80073fc:	0800a048 	.word	0x0800a048
 8007400:	08009f43 	.word	0x08009f43
 8007404:	08009ee7 	.word	0x08009ee7
 8007408:	08009e00 	.word	0x08009e00
 800740c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007410:	6018      	str	r0, [r3, #0]
 8007412:	9b07      	ldr	r3, [sp, #28]
 8007414:	2b0e      	cmp	r3, #14
 8007416:	f200 80a4 	bhi.w	8007562 <_dtoa_r+0x442>
 800741a:	2c00      	cmp	r4, #0
 800741c:	f000 80a1 	beq.w	8007562 <_dtoa_r+0x442>
 8007420:	2f00      	cmp	r7, #0
 8007422:	dd33      	ble.n	800748c <_dtoa_r+0x36c>
 8007424:	4bad      	ldr	r3, [pc, #692]	@ (80076dc <_dtoa_r+0x5bc>)
 8007426:	f007 020f 	and.w	r2, r7, #15
 800742a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800742e:	ed93 7b00 	vldr	d7, [r3]
 8007432:	05f8      	lsls	r0, r7, #23
 8007434:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007438:	ea4f 1427 	mov.w	r4, r7, asr #4
 800743c:	d516      	bpl.n	800746c <_dtoa_r+0x34c>
 800743e:	4ba8      	ldr	r3, [pc, #672]	@ (80076e0 <_dtoa_r+0x5c0>)
 8007440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007448:	f7f9 fa20 	bl	800088c <__aeabi_ddiv>
 800744c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007450:	f004 040f 	and.w	r4, r4, #15
 8007454:	2603      	movs	r6, #3
 8007456:	4da2      	ldr	r5, [pc, #648]	@ (80076e0 <_dtoa_r+0x5c0>)
 8007458:	b954      	cbnz	r4, 8007470 <_dtoa_r+0x350>
 800745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007462:	f7f9 fa13 	bl	800088c <__aeabi_ddiv>
 8007466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800746a:	e028      	b.n	80074be <_dtoa_r+0x39e>
 800746c:	2602      	movs	r6, #2
 800746e:	e7f2      	b.n	8007456 <_dtoa_r+0x336>
 8007470:	07e1      	lsls	r1, r4, #31
 8007472:	d508      	bpl.n	8007486 <_dtoa_r+0x366>
 8007474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800747c:	f7f9 f8dc 	bl	8000638 <__aeabi_dmul>
 8007480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007484:	3601      	adds	r6, #1
 8007486:	1064      	asrs	r4, r4, #1
 8007488:	3508      	adds	r5, #8
 800748a:	e7e5      	b.n	8007458 <_dtoa_r+0x338>
 800748c:	f000 80d2 	beq.w	8007634 <_dtoa_r+0x514>
 8007490:	427c      	negs	r4, r7
 8007492:	4b92      	ldr	r3, [pc, #584]	@ (80076dc <_dtoa_r+0x5bc>)
 8007494:	4d92      	ldr	r5, [pc, #584]	@ (80076e0 <_dtoa_r+0x5c0>)
 8007496:	f004 020f 	and.w	r2, r4, #15
 800749a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074a6:	f7f9 f8c7 	bl	8000638 <__aeabi_dmul>
 80074aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ae:	1124      	asrs	r4, r4, #4
 80074b0:	2300      	movs	r3, #0
 80074b2:	2602      	movs	r6, #2
 80074b4:	2c00      	cmp	r4, #0
 80074b6:	f040 80b2 	bne.w	800761e <_dtoa_r+0x4fe>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1d3      	bne.n	8007466 <_dtoa_r+0x346>
 80074be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80b7 	beq.w	8007638 <_dtoa_r+0x518>
 80074ca:	4b86      	ldr	r3, [pc, #536]	@ (80076e4 <_dtoa_r+0x5c4>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	4620      	mov	r0, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7f9 fb23 	bl	8000b1c <__aeabi_dcmplt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f000 80ae 	beq.w	8007638 <_dtoa_r+0x518>
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80aa 	beq.w	8007638 <_dtoa_r+0x518>
 80074e4:	9b00      	ldr	r3, [sp, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dd37      	ble.n	800755a <_dtoa_r+0x43a>
 80074ea:	1e7b      	subs	r3, r7, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	4620      	mov	r0, r4
 80074f0:	4b7d      	ldr	r3, [pc, #500]	@ (80076e8 <_dtoa_r+0x5c8>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 f89f 	bl	8000638 <__aeabi_dmul>
 80074fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074fe:	9c00      	ldr	r4, [sp, #0]
 8007500:	3601      	adds	r6, #1
 8007502:	4630      	mov	r0, r6
 8007504:	f7f9 f82e 	bl	8000564 <__aeabi_i2d>
 8007508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800750c:	f7f9 f894 	bl	8000638 <__aeabi_dmul>
 8007510:	4b76      	ldr	r3, [pc, #472]	@ (80076ec <_dtoa_r+0x5cc>)
 8007512:	2200      	movs	r2, #0
 8007514:	f7f8 feda 	bl	80002cc <__adddf3>
 8007518:	4605      	mov	r5, r0
 800751a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800751e:	2c00      	cmp	r4, #0
 8007520:	f040 808d 	bne.w	800763e <_dtoa_r+0x51e>
 8007524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007528:	4b71      	ldr	r3, [pc, #452]	@ (80076f0 <_dtoa_r+0x5d0>)
 800752a:	2200      	movs	r2, #0
 800752c:	f7f8 fecc 	bl	80002c8 <__aeabi_dsub>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007538:	462a      	mov	r2, r5
 800753a:	4633      	mov	r3, r6
 800753c:	f7f9 fb0c 	bl	8000b58 <__aeabi_dcmpgt>
 8007540:	2800      	cmp	r0, #0
 8007542:	f040 828b 	bne.w	8007a5c <_dtoa_r+0x93c>
 8007546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754a:	462a      	mov	r2, r5
 800754c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007550:	f7f9 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 8128 	bne.w	80077aa <_dtoa_r+0x68a>
 800755a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800755e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007562:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007564:	2b00      	cmp	r3, #0
 8007566:	f2c0 815a 	blt.w	800781e <_dtoa_r+0x6fe>
 800756a:	2f0e      	cmp	r7, #14
 800756c:	f300 8157 	bgt.w	800781e <_dtoa_r+0x6fe>
 8007570:	4b5a      	ldr	r3, [pc, #360]	@ (80076dc <_dtoa_r+0x5bc>)
 8007572:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007576:	ed93 7b00 	vldr	d7, [r3]
 800757a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	ed8d 7b00 	vstr	d7, [sp]
 8007582:	da03      	bge.n	800758c <_dtoa_r+0x46c>
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f340 8101 	ble.w	800778e <_dtoa_r+0x66e>
 800758c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007590:	4656      	mov	r6, sl
 8007592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f9 f977 	bl	800088c <__aeabi_ddiv>
 800759e:	f7f9 fafb 	bl	8000b98 <__aeabi_d2iz>
 80075a2:	4680      	mov	r8, r0
 80075a4:	f7f8 ffde 	bl	8000564 <__aeabi_i2d>
 80075a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ac:	f7f9 f844 	bl	8000638 <__aeabi_dmul>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075bc:	f7f8 fe84 	bl	80002c8 <__aeabi_dsub>
 80075c0:	f806 4b01 	strb.w	r4, [r6], #1
 80075c4:	9d07      	ldr	r5, [sp, #28]
 80075c6:	eba6 040a 	sub.w	r4, r6, sl
 80075ca:	42a5      	cmp	r5, r4
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	f040 8117 	bne.w	8007802 <_dtoa_r+0x6e2>
 80075d4:	f7f8 fe7a 	bl	80002cc <__adddf3>
 80075d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075dc:	4604      	mov	r4, r0
 80075de:	460d      	mov	r5, r1
 80075e0:	f7f9 faba 	bl	8000b58 <__aeabi_dcmpgt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f040 80f9 	bne.w	80077dc <_dtoa_r+0x6bc>
 80075ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80075f6:	b118      	cbz	r0, 8007600 <_dtoa_r+0x4e0>
 80075f8:	f018 0f01 	tst.w	r8, #1
 80075fc:	f040 80ee 	bne.w	80077dc <_dtoa_r+0x6bc>
 8007600:	4649      	mov	r1, r9
 8007602:	4658      	mov	r0, fp
 8007604:	f000 ffdc 	bl	80085c0 <_Bfree>
 8007608:	2300      	movs	r3, #0
 800760a:	7033      	strb	r3, [r6, #0]
 800760c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800760e:	3701      	adds	r7, #1
 8007610:	601f      	str	r7, [r3, #0]
 8007612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 831d 	beq.w	8007c54 <_dtoa_r+0xb34>
 800761a:	601e      	str	r6, [r3, #0]
 800761c:	e31a      	b.n	8007c54 <_dtoa_r+0xb34>
 800761e:	07e2      	lsls	r2, r4, #31
 8007620:	d505      	bpl.n	800762e <_dtoa_r+0x50e>
 8007622:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007626:	f7f9 f807 	bl	8000638 <__aeabi_dmul>
 800762a:	3601      	adds	r6, #1
 800762c:	2301      	movs	r3, #1
 800762e:	1064      	asrs	r4, r4, #1
 8007630:	3508      	adds	r5, #8
 8007632:	e73f      	b.n	80074b4 <_dtoa_r+0x394>
 8007634:	2602      	movs	r6, #2
 8007636:	e742      	b.n	80074be <_dtoa_r+0x39e>
 8007638:	9c07      	ldr	r4, [sp, #28]
 800763a:	9704      	str	r7, [sp, #16]
 800763c:	e761      	b.n	8007502 <_dtoa_r+0x3e2>
 800763e:	4b27      	ldr	r3, [pc, #156]	@ (80076dc <_dtoa_r+0x5bc>)
 8007640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007646:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800764a:	4454      	add	r4, sl
 800764c:	2900      	cmp	r1, #0
 800764e:	d053      	beq.n	80076f8 <_dtoa_r+0x5d8>
 8007650:	4928      	ldr	r1, [pc, #160]	@ (80076f4 <_dtoa_r+0x5d4>)
 8007652:	2000      	movs	r0, #0
 8007654:	f7f9 f91a 	bl	800088c <__aeabi_ddiv>
 8007658:	4633      	mov	r3, r6
 800765a:	462a      	mov	r2, r5
 800765c:	f7f8 fe34 	bl	80002c8 <__aeabi_dsub>
 8007660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007664:	4656      	mov	r6, sl
 8007666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766a:	f7f9 fa95 	bl	8000b98 <__aeabi_d2iz>
 800766e:	4605      	mov	r5, r0
 8007670:	f7f8 ff78 	bl	8000564 <__aeabi_i2d>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767c:	f7f8 fe24 	bl	80002c8 <__aeabi_dsub>
 8007680:	3530      	adds	r5, #48	@ 0x30
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800768a:	f806 5b01 	strb.w	r5, [r6], #1
 800768e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007692:	f7f9 fa43 	bl	8000b1c <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	d171      	bne.n	800777e <_dtoa_r+0x65e>
 800769a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800769e:	4911      	ldr	r1, [pc, #68]	@ (80076e4 <_dtoa_r+0x5c4>)
 80076a0:	2000      	movs	r0, #0
 80076a2:	f7f8 fe11 	bl	80002c8 <__aeabi_dsub>
 80076a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076aa:	f7f9 fa37 	bl	8000b1c <__aeabi_dcmplt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f040 8095 	bne.w	80077de <_dtoa_r+0x6be>
 80076b4:	42a6      	cmp	r6, r4
 80076b6:	f43f af50 	beq.w	800755a <_dtoa_r+0x43a>
 80076ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076be:	4b0a      	ldr	r3, [pc, #40]	@ (80076e8 <_dtoa_r+0x5c8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7f8 ffb9 	bl	8000638 <__aeabi_dmul>
 80076c6:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <_dtoa_r+0x5c8>)
 80076c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076cc:	2200      	movs	r2, #0
 80076ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d2:	f7f8 ffb1 	bl	8000638 <__aeabi_dmul>
 80076d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076da:	e7c4      	b.n	8007666 <_dtoa_r+0x546>
 80076dc:	0800a048 	.word	0x0800a048
 80076e0:	0800a020 	.word	0x0800a020
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	40240000 	.word	0x40240000
 80076ec:	401c0000 	.word	0x401c0000
 80076f0:	40140000 	.word	0x40140000
 80076f4:	3fe00000 	.word	0x3fe00000
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	f7f8 ff9c 	bl	8000638 <__aeabi_dmul>
 8007700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007704:	9415      	str	r4, [sp, #84]	@ 0x54
 8007706:	4656      	mov	r6, sl
 8007708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770c:	f7f9 fa44 	bl	8000b98 <__aeabi_d2iz>
 8007710:	4605      	mov	r5, r0
 8007712:	f7f8 ff27 	bl	8000564 <__aeabi_i2d>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771e:	f7f8 fdd3 	bl	80002c8 <__aeabi_dsub>
 8007722:	3530      	adds	r5, #48	@ 0x30
 8007724:	f806 5b01 	strb.w	r5, [r6], #1
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	42a6      	cmp	r6, r4
 800772e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	d124      	bne.n	8007782 <_dtoa_r+0x662>
 8007738:	4bac      	ldr	r3, [pc, #688]	@ (80079ec <_dtoa_r+0x8cc>)
 800773a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800773e:	f7f8 fdc5 	bl	80002cc <__adddf3>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800774a:	f7f9 fa05 	bl	8000b58 <__aeabi_dcmpgt>
 800774e:	2800      	cmp	r0, #0
 8007750:	d145      	bne.n	80077de <_dtoa_r+0x6be>
 8007752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007756:	49a5      	ldr	r1, [pc, #660]	@ (80079ec <_dtoa_r+0x8cc>)
 8007758:	2000      	movs	r0, #0
 800775a:	f7f8 fdb5 	bl	80002c8 <__aeabi_dsub>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007766:	f7f9 f9d9 	bl	8000b1c <__aeabi_dcmplt>
 800776a:	2800      	cmp	r0, #0
 800776c:	f43f aef5 	beq.w	800755a <_dtoa_r+0x43a>
 8007770:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007772:	1e73      	subs	r3, r6, #1
 8007774:	9315      	str	r3, [sp, #84]	@ 0x54
 8007776:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800777a:	2b30      	cmp	r3, #48	@ 0x30
 800777c:	d0f8      	beq.n	8007770 <_dtoa_r+0x650>
 800777e:	9f04      	ldr	r7, [sp, #16]
 8007780:	e73e      	b.n	8007600 <_dtoa_r+0x4e0>
 8007782:	4b9b      	ldr	r3, [pc, #620]	@ (80079f0 <_dtoa_r+0x8d0>)
 8007784:	f7f8 ff58 	bl	8000638 <__aeabi_dmul>
 8007788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778c:	e7bc      	b.n	8007708 <_dtoa_r+0x5e8>
 800778e:	d10c      	bne.n	80077aa <_dtoa_r+0x68a>
 8007790:	4b98      	ldr	r3, [pc, #608]	@ (80079f4 <_dtoa_r+0x8d4>)
 8007792:	2200      	movs	r2, #0
 8007794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007798:	f7f8 ff4e 	bl	8000638 <__aeabi_dmul>
 800779c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077a0:	f7f9 f9d0 	bl	8000b44 <__aeabi_dcmpge>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f000 8157 	beq.w	8007a58 <_dtoa_r+0x938>
 80077aa:	2400      	movs	r4, #0
 80077ac:	4625      	mov	r5, r4
 80077ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b0:	43db      	mvns	r3, r3
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	4656      	mov	r6, sl
 80077b6:	2700      	movs	r7, #0
 80077b8:	4621      	mov	r1, r4
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 ff00 	bl	80085c0 <_Bfree>
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	d0dc      	beq.n	800777e <_dtoa_r+0x65e>
 80077c4:	b12f      	cbz	r7, 80077d2 <_dtoa_r+0x6b2>
 80077c6:	42af      	cmp	r7, r5
 80077c8:	d003      	beq.n	80077d2 <_dtoa_r+0x6b2>
 80077ca:	4639      	mov	r1, r7
 80077cc:	4658      	mov	r0, fp
 80077ce:	f000 fef7 	bl	80085c0 <_Bfree>
 80077d2:	4629      	mov	r1, r5
 80077d4:	4658      	mov	r0, fp
 80077d6:	f000 fef3 	bl	80085c0 <_Bfree>
 80077da:	e7d0      	b.n	800777e <_dtoa_r+0x65e>
 80077dc:	9704      	str	r7, [sp, #16]
 80077de:	4633      	mov	r3, r6
 80077e0:	461e      	mov	r6, r3
 80077e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e6:	2a39      	cmp	r2, #57	@ 0x39
 80077e8:	d107      	bne.n	80077fa <_dtoa_r+0x6da>
 80077ea:	459a      	cmp	sl, r3
 80077ec:	d1f8      	bne.n	80077e0 <_dtoa_r+0x6c0>
 80077ee:	9a04      	ldr	r2, [sp, #16]
 80077f0:	3201      	adds	r2, #1
 80077f2:	9204      	str	r2, [sp, #16]
 80077f4:	2230      	movs	r2, #48	@ 0x30
 80077f6:	f88a 2000 	strb.w	r2, [sl]
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	3201      	adds	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e7bd      	b.n	800777e <_dtoa_r+0x65e>
 8007802:	4b7b      	ldr	r3, [pc, #492]	@ (80079f0 <_dtoa_r+0x8d0>)
 8007804:	2200      	movs	r2, #0
 8007806:	f7f8 ff17 	bl	8000638 <__aeabi_dmul>
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	460d      	mov	r5, r1
 8007812:	f7f9 f979 	bl	8000b08 <__aeabi_dcmpeq>
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f aebb 	beq.w	8007592 <_dtoa_r+0x472>
 800781c:	e6f0      	b.n	8007600 <_dtoa_r+0x4e0>
 800781e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007820:	2a00      	cmp	r2, #0
 8007822:	f000 80db 	beq.w	80079dc <_dtoa_r+0x8bc>
 8007826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007828:	2a01      	cmp	r2, #1
 800782a:	f300 80bf 	bgt.w	80079ac <_dtoa_r+0x88c>
 800782e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007830:	2a00      	cmp	r2, #0
 8007832:	f000 80b7 	beq.w	80079a4 <_dtoa_r+0x884>
 8007836:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800783a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800783c:	4646      	mov	r6, r8
 800783e:	9a08      	ldr	r2, [sp, #32]
 8007840:	2101      	movs	r1, #1
 8007842:	441a      	add	r2, r3
 8007844:	4658      	mov	r0, fp
 8007846:	4498      	add	r8, r3
 8007848:	9208      	str	r2, [sp, #32]
 800784a:	f000 ffb7 	bl	80087bc <__i2b>
 800784e:	4605      	mov	r5, r0
 8007850:	b15e      	cbz	r6, 800786a <_dtoa_r+0x74a>
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd08      	ble.n	800786a <_dtoa_r+0x74a>
 8007858:	42b3      	cmp	r3, r6
 800785a:	9a08      	ldr	r2, [sp, #32]
 800785c:	bfa8      	it	ge
 800785e:	4633      	movge	r3, r6
 8007860:	eba8 0803 	sub.w	r8, r8, r3
 8007864:	1af6      	subs	r6, r6, r3
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	9308      	str	r3, [sp, #32]
 800786a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786c:	b1f3      	cbz	r3, 80078ac <_dtoa_r+0x78c>
 800786e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80b7 	beq.w	80079e4 <_dtoa_r+0x8c4>
 8007876:	b18c      	cbz	r4, 800789c <_dtoa_r+0x77c>
 8007878:	4629      	mov	r1, r5
 800787a:	4622      	mov	r2, r4
 800787c:	4658      	mov	r0, fp
 800787e:	f001 f85d 	bl	800893c <__pow5mult>
 8007882:	464a      	mov	r2, r9
 8007884:	4601      	mov	r1, r0
 8007886:	4605      	mov	r5, r0
 8007888:	4658      	mov	r0, fp
 800788a:	f000 ffad 	bl	80087e8 <__multiply>
 800788e:	4649      	mov	r1, r9
 8007890:	9004      	str	r0, [sp, #16]
 8007892:	4658      	mov	r0, fp
 8007894:	f000 fe94 	bl	80085c0 <_Bfree>
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	4699      	mov	r9, r3
 800789c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800789e:	1b1a      	subs	r2, r3, r4
 80078a0:	d004      	beq.n	80078ac <_dtoa_r+0x78c>
 80078a2:	4649      	mov	r1, r9
 80078a4:	4658      	mov	r0, fp
 80078a6:	f001 f849 	bl	800893c <__pow5mult>
 80078aa:	4681      	mov	r9, r0
 80078ac:	2101      	movs	r1, #1
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 ff84 	bl	80087bc <__i2b>
 80078b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b6:	4604      	mov	r4, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 81cf 	beq.w	8007c5c <_dtoa_r+0xb3c>
 80078be:	461a      	mov	r2, r3
 80078c0:	4601      	mov	r1, r0
 80078c2:	4658      	mov	r0, fp
 80078c4:	f001 f83a 	bl	800893c <__pow5mult>
 80078c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	4604      	mov	r4, r0
 80078ce:	f300 8095 	bgt.w	80079fc <_dtoa_r+0x8dc>
 80078d2:	9b02      	ldr	r3, [sp, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 8087 	bne.w	80079e8 <_dtoa_r+0x8c8>
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f040 8089 	bne.w	80079f8 <_dtoa_r+0x8d8>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ec:	0d1b      	lsrs	r3, r3, #20
 80078ee:	051b      	lsls	r3, r3, #20
 80078f0:	b12b      	cbz	r3, 80078fe <_dtoa_r+0x7de>
 80078f2:	9b08      	ldr	r3, [sp, #32]
 80078f4:	3301      	adds	r3, #1
 80078f6:	9308      	str	r3, [sp, #32]
 80078f8:	f108 0801 	add.w	r8, r8, #1
 80078fc:	2301      	movs	r3, #1
 80078fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 81b0 	beq.w	8007c68 <_dtoa_r+0xb48>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800790e:	6918      	ldr	r0, [r3, #16]
 8007910:	f000 ff08 	bl	8008724 <__hi0bits>
 8007914:	f1c0 0020 	rsb	r0, r0, #32
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	4418      	add	r0, r3
 800791c:	f010 001f 	ands.w	r0, r0, #31
 8007920:	d077      	beq.n	8007a12 <_dtoa_r+0x8f2>
 8007922:	f1c0 0320 	rsb	r3, r0, #32
 8007926:	2b04      	cmp	r3, #4
 8007928:	dd6b      	ble.n	8007a02 <_dtoa_r+0x8e2>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	f1c0 001c 	rsb	r0, r0, #28
 8007930:	4403      	add	r3, r0
 8007932:	4480      	add	r8, r0
 8007934:	4406      	add	r6, r0
 8007936:	9308      	str	r3, [sp, #32]
 8007938:	f1b8 0f00 	cmp.w	r8, #0
 800793c:	dd05      	ble.n	800794a <_dtoa_r+0x82a>
 800793e:	4649      	mov	r1, r9
 8007940:	4642      	mov	r2, r8
 8007942:	4658      	mov	r0, fp
 8007944:	f001 f854 	bl	80089f0 <__lshift>
 8007948:	4681      	mov	r9, r0
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd05      	ble.n	800795c <_dtoa_r+0x83c>
 8007950:	4621      	mov	r1, r4
 8007952:	461a      	mov	r2, r3
 8007954:	4658      	mov	r0, fp
 8007956:	f001 f84b 	bl	80089f0 <__lshift>
 800795a:	4604      	mov	r4, r0
 800795c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800795e:	2b00      	cmp	r3, #0
 8007960:	d059      	beq.n	8007a16 <_dtoa_r+0x8f6>
 8007962:	4621      	mov	r1, r4
 8007964:	4648      	mov	r0, r9
 8007966:	f001 f8af 	bl	8008ac8 <__mcmp>
 800796a:	2800      	cmp	r0, #0
 800796c:	da53      	bge.n	8007a16 <_dtoa_r+0x8f6>
 800796e:	1e7b      	subs	r3, r7, #1
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	4649      	mov	r1, r9
 8007974:	2300      	movs	r3, #0
 8007976:	220a      	movs	r2, #10
 8007978:	4658      	mov	r0, fp
 800797a:	f000 fe43 	bl	8008604 <__multadd>
 800797e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007980:	4681      	mov	r9, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8172 	beq.w	8007c6c <_dtoa_r+0xb4c>
 8007988:	2300      	movs	r3, #0
 800798a:	4629      	mov	r1, r5
 800798c:	220a      	movs	r2, #10
 800798e:	4658      	mov	r0, fp
 8007990:	f000 fe38 	bl	8008604 <__multadd>
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	4605      	mov	r5, r0
 800799a:	dc67      	bgt.n	8007a6c <_dtoa_r+0x94c>
 800799c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799e:	2b02      	cmp	r3, #2
 80079a0:	dc41      	bgt.n	8007a26 <_dtoa_r+0x906>
 80079a2:	e063      	b.n	8007a6c <_dtoa_r+0x94c>
 80079a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079aa:	e746      	b.n	800783a <_dtoa_r+0x71a>
 80079ac:	9b07      	ldr	r3, [sp, #28]
 80079ae:	1e5c      	subs	r4, r3, #1
 80079b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	bfbf      	itttt	lt
 80079b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80079b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80079ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80079bc:	1ae3      	sublt	r3, r4, r3
 80079be:	bfb4      	ite	lt
 80079c0:	18d2      	addlt	r2, r2, r3
 80079c2:	1b1c      	subge	r4, r3, r4
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	bfbc      	itt	lt
 80079c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80079ca:	2400      	movlt	r4, #0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfb5      	itete	lt
 80079d0:	eba8 0603 	sublt.w	r6, r8, r3
 80079d4:	9b07      	ldrge	r3, [sp, #28]
 80079d6:	2300      	movlt	r3, #0
 80079d8:	4646      	movge	r6, r8
 80079da:	e730      	b.n	800783e <_dtoa_r+0x71e>
 80079dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079e0:	4646      	mov	r6, r8
 80079e2:	e735      	b.n	8007850 <_dtoa_r+0x730>
 80079e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079e6:	e75c      	b.n	80078a2 <_dtoa_r+0x782>
 80079e8:	2300      	movs	r3, #0
 80079ea:	e788      	b.n	80078fe <_dtoa_r+0x7de>
 80079ec:	3fe00000 	.word	0x3fe00000
 80079f0:	40240000 	.word	0x40240000
 80079f4:	40140000 	.word	0x40140000
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	e780      	b.n	80078fe <_dtoa_r+0x7de>
 80079fc:	2300      	movs	r3, #0
 80079fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a00:	e782      	b.n	8007908 <_dtoa_r+0x7e8>
 8007a02:	d099      	beq.n	8007938 <_dtoa_r+0x818>
 8007a04:	9a08      	ldr	r2, [sp, #32]
 8007a06:	331c      	adds	r3, #28
 8007a08:	441a      	add	r2, r3
 8007a0a:	4498      	add	r8, r3
 8007a0c:	441e      	add	r6, r3
 8007a0e:	9208      	str	r2, [sp, #32]
 8007a10:	e792      	b.n	8007938 <_dtoa_r+0x818>
 8007a12:	4603      	mov	r3, r0
 8007a14:	e7f6      	b.n	8007a04 <_dtoa_r+0x8e4>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	9704      	str	r7, [sp, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dc20      	bgt.n	8007a60 <_dtoa_r+0x940>
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	dd1e      	ble.n	8007a64 <_dtoa_r+0x944>
 8007a26:	9b00      	ldr	r3, [sp, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f aec0 	bne.w	80077ae <_dtoa_r+0x68e>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	2205      	movs	r2, #5
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 fde6 	bl	8008604 <__multadd>
 8007a38:	4601      	mov	r1, r0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f001 f843 	bl	8008ac8 <__mcmp>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	f77f aeb3 	ble.w	80077ae <_dtoa_r+0x68e>
 8007a48:	4656      	mov	r6, sl
 8007a4a:	2331      	movs	r3, #49	@ 0x31
 8007a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007a50:	9b04      	ldr	r3, [sp, #16]
 8007a52:	3301      	adds	r3, #1
 8007a54:	9304      	str	r3, [sp, #16]
 8007a56:	e6ae      	b.n	80077b6 <_dtoa_r+0x696>
 8007a58:	9c07      	ldr	r4, [sp, #28]
 8007a5a:	9704      	str	r7, [sp, #16]
 8007a5c:	4625      	mov	r5, r4
 8007a5e:	e7f3      	b.n	8007a48 <_dtoa_r+0x928>
 8007a60:	9b07      	ldr	r3, [sp, #28]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8104 	beq.w	8007c74 <_dtoa_r+0xb54>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	dd05      	ble.n	8007a7c <_dtoa_r+0x95c>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4632      	mov	r2, r6
 8007a74:	4658      	mov	r0, fp
 8007a76:	f000 ffbb 	bl	80089f0 <__lshift>
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d05a      	beq.n	8007b38 <_dtoa_r+0xa18>
 8007a82:	6869      	ldr	r1, [r5, #4]
 8007a84:	4658      	mov	r0, fp
 8007a86:	f000 fd5b 	bl	8008540 <_Balloc>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	b928      	cbnz	r0, 8007a9a <_dtoa_r+0x97a>
 8007a8e:	4b84      	ldr	r3, [pc, #528]	@ (8007ca0 <_dtoa_r+0xb80>)
 8007a90:	4602      	mov	r2, r0
 8007a92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a96:	f7ff bb5a 	b.w	800714e <_dtoa_r+0x2e>
 8007a9a:	692a      	ldr	r2, [r5, #16]
 8007a9c:	3202      	adds	r2, #2
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	f105 010c 	add.w	r1, r5, #12
 8007aa4:	300c      	adds	r0, #12
 8007aa6:	f7ff fa76 	bl	8006f96 <memcpy>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4631      	mov	r1, r6
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f000 ff9e 	bl	80089f0 <__lshift>
 8007ab4:	f10a 0301 	add.w	r3, sl, #1
 8007ab8:	9307      	str	r3, [sp, #28]
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	4453      	add	r3, sl
 8007abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	462f      	mov	r7, r5
 8007ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aca:	4605      	mov	r5, r0
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	4648      	mov	r0, r9
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	f7ff fa9b 	bl	8007010 <quorem>
 8007ada:	4639      	mov	r1, r7
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	f000 fff0 	bl	8008ac8 <__mcmp>
 8007ae8:	462a      	mov	r2, r5
 8007aea:	9008      	str	r0, [sp, #32]
 8007aec:	4621      	mov	r1, r4
 8007aee:	4658      	mov	r0, fp
 8007af0:	f001 f806 	bl	8008b00 <__mdiff>
 8007af4:	68c2      	ldr	r2, [r0, #12]
 8007af6:	4606      	mov	r6, r0
 8007af8:	bb02      	cbnz	r2, 8007b3c <_dtoa_r+0xa1c>
 8007afa:	4601      	mov	r1, r0
 8007afc:	4648      	mov	r0, r9
 8007afe:	f000 ffe3 	bl	8008ac8 <__mcmp>
 8007b02:	4602      	mov	r2, r0
 8007b04:	4631      	mov	r1, r6
 8007b06:	4658      	mov	r0, fp
 8007b08:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b0a:	f000 fd59 	bl	80085c0 <_Bfree>
 8007b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b12:	9e07      	ldr	r6, [sp, #28]
 8007b14:	ea43 0102 	orr.w	r1, r3, r2
 8007b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b1a:	4319      	orrs	r1, r3
 8007b1c:	d110      	bne.n	8007b40 <_dtoa_r+0xa20>
 8007b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b22:	d029      	beq.n	8007b78 <_dtoa_r+0xa58>
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd02      	ble.n	8007b30 <_dtoa_r+0xa10>
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	f883 8000 	strb.w	r8, [r3]
 8007b36:	e63f      	b.n	80077b8 <_dtoa_r+0x698>
 8007b38:	4628      	mov	r0, r5
 8007b3a:	e7bb      	b.n	8007ab4 <_dtoa_r+0x994>
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	e7e1      	b.n	8007b04 <_dtoa_r+0x9e4>
 8007b40:	9b08      	ldr	r3, [sp, #32]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	db04      	blt.n	8007b50 <_dtoa_r+0xa30>
 8007b46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	d120      	bne.n	8007b92 <_dtoa_r+0xa72>
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	dded      	ble.n	8007b30 <_dtoa_r+0xa10>
 8007b54:	4649      	mov	r1, r9
 8007b56:	2201      	movs	r2, #1
 8007b58:	4658      	mov	r0, fp
 8007b5a:	f000 ff49 	bl	80089f0 <__lshift>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4681      	mov	r9, r0
 8007b62:	f000 ffb1 	bl	8008ac8 <__mcmp>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	dc03      	bgt.n	8007b72 <_dtoa_r+0xa52>
 8007b6a:	d1e1      	bne.n	8007b30 <_dtoa_r+0xa10>
 8007b6c:	f018 0f01 	tst.w	r8, #1
 8007b70:	d0de      	beq.n	8007b30 <_dtoa_r+0xa10>
 8007b72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b76:	d1d8      	bne.n	8007b2a <_dtoa_r+0xa0a>
 8007b78:	9a00      	ldr	r2, [sp, #0]
 8007b7a:	2339      	movs	r3, #57	@ 0x39
 8007b7c:	7013      	strb	r3, [r2, #0]
 8007b7e:	4633      	mov	r3, r6
 8007b80:	461e      	mov	r6, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b88:	2a39      	cmp	r2, #57	@ 0x39
 8007b8a:	d052      	beq.n	8007c32 <_dtoa_r+0xb12>
 8007b8c:	3201      	adds	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	e612      	b.n	80077b8 <_dtoa_r+0x698>
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	dd07      	ble.n	8007ba6 <_dtoa_r+0xa86>
 8007b96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b9a:	d0ed      	beq.n	8007b78 <_dtoa_r+0xa58>
 8007b9c:	9a00      	ldr	r2, [sp, #0]
 8007b9e:	f108 0301 	add.w	r3, r8, #1
 8007ba2:	7013      	strb	r3, [r2, #0]
 8007ba4:	e608      	b.n	80077b8 <_dtoa_r+0x698>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	9a07      	ldr	r2, [sp, #28]
 8007baa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d028      	beq.n	8007c06 <_dtoa_r+0xae6>
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	220a      	movs	r2, #10
 8007bba:	4658      	mov	r0, fp
 8007bbc:	f000 fd22 	bl	8008604 <__multadd>
 8007bc0:	42af      	cmp	r7, r5
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	f04f 020a 	mov.w	r2, #10
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4658      	mov	r0, fp
 8007bd0:	d107      	bne.n	8007be2 <_dtoa_r+0xac2>
 8007bd2:	f000 fd17 	bl	8008604 <__multadd>
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	4605      	mov	r5, r0
 8007bda:	9b07      	ldr	r3, [sp, #28]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	e774      	b.n	8007acc <_dtoa_r+0x9ac>
 8007be2:	f000 fd0f 	bl	8008604 <__multadd>
 8007be6:	4629      	mov	r1, r5
 8007be8:	4607      	mov	r7, r0
 8007bea:	2300      	movs	r3, #0
 8007bec:	220a      	movs	r2, #10
 8007bee:	4658      	mov	r0, fp
 8007bf0:	f000 fd08 	bl	8008604 <__multadd>
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	e7f0      	b.n	8007bda <_dtoa_r+0xaba>
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfcc      	ite	gt
 8007bfe:	461e      	movgt	r6, r3
 8007c00:	2601      	movle	r6, #1
 8007c02:	4456      	add	r6, sl
 8007c04:	2700      	movs	r7, #0
 8007c06:	4649      	mov	r1, r9
 8007c08:	2201      	movs	r2, #1
 8007c0a:	4658      	mov	r0, fp
 8007c0c:	f000 fef0 	bl	80089f0 <__lshift>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4681      	mov	r9, r0
 8007c14:	f000 ff58 	bl	8008ac8 <__mcmp>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	dcb0      	bgt.n	8007b7e <_dtoa_r+0xa5e>
 8007c1c:	d102      	bne.n	8007c24 <_dtoa_r+0xb04>
 8007c1e:	f018 0f01 	tst.w	r8, #1
 8007c22:	d1ac      	bne.n	8007b7e <_dtoa_r+0xa5e>
 8007c24:	4633      	mov	r3, r6
 8007c26:	461e      	mov	r6, r3
 8007c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c2c:	2a30      	cmp	r2, #48	@ 0x30
 8007c2e:	d0fa      	beq.n	8007c26 <_dtoa_r+0xb06>
 8007c30:	e5c2      	b.n	80077b8 <_dtoa_r+0x698>
 8007c32:	459a      	cmp	sl, r3
 8007c34:	d1a4      	bne.n	8007b80 <_dtoa_r+0xa60>
 8007c36:	9b04      	ldr	r3, [sp, #16]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	9304      	str	r3, [sp, #16]
 8007c3c:	2331      	movs	r3, #49	@ 0x31
 8007c3e:	f88a 3000 	strb.w	r3, [sl]
 8007c42:	e5b9      	b.n	80077b8 <_dtoa_r+0x698>
 8007c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ca4 <_dtoa_r+0xb84>
 8007c4a:	b11b      	cbz	r3, 8007c54 <_dtoa_r+0xb34>
 8007c4c:	f10a 0308 	add.w	r3, sl, #8
 8007c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4650      	mov	r0, sl
 8007c56:	b019      	add	sp, #100	@ 0x64
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	f77f ae37 	ble.w	80078d2 <_dtoa_r+0x7b2>
 8007c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c68:	2001      	movs	r0, #1
 8007c6a:	e655      	b.n	8007918 <_dtoa_r+0x7f8>
 8007c6c:	9b00      	ldr	r3, [sp, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f77f aed6 	ble.w	8007a20 <_dtoa_r+0x900>
 8007c74:	4656      	mov	r6, sl
 8007c76:	4621      	mov	r1, r4
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f7ff f9c9 	bl	8007010 <quorem>
 8007c7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c82:	f806 8b01 	strb.w	r8, [r6], #1
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	eba6 020a 	sub.w	r2, r6, sl
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	ddb3      	ble.n	8007bf8 <_dtoa_r+0xad8>
 8007c90:	4649      	mov	r1, r9
 8007c92:	2300      	movs	r3, #0
 8007c94:	220a      	movs	r2, #10
 8007c96:	4658      	mov	r0, fp
 8007c98:	f000 fcb4 	bl	8008604 <__multadd>
 8007c9c:	4681      	mov	r9, r0
 8007c9e:	e7ea      	b.n	8007c76 <_dtoa_r+0xb56>
 8007ca0:	08009f43 	.word	0x08009f43
 8007ca4:	08009ede 	.word	0x08009ede

08007ca8 <_free_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4605      	mov	r5, r0
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d041      	beq.n	8007d34 <_free_r+0x8c>
 8007cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb4:	1f0c      	subs	r4, r1, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	18e4      	addlt	r4, r4, r3
 8007cbc:	f000 fc34 	bl	8008528 <__malloc_lock>
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d38 <_free_r+0x90>)
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	b933      	cbnz	r3, 8007cd4 <_free_r+0x2c>
 8007cc6:	6063      	str	r3, [r4, #4]
 8007cc8:	6014      	str	r4, [r2, #0]
 8007cca:	4628      	mov	r0, r5
 8007ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd0:	f000 bc30 	b.w	8008534 <__malloc_unlock>
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	d908      	bls.n	8007cea <_free_r+0x42>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	1821      	adds	r1, r4, r0
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	bf01      	itttt	eq
 8007ce0:	6819      	ldreq	r1, [r3, #0]
 8007ce2:	685b      	ldreq	r3, [r3, #4]
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	e7ed      	b.n	8007cc6 <_free_r+0x1e>
 8007cea:	461a      	mov	r2, r3
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	b10b      	cbz	r3, 8007cf4 <_free_r+0x4c>
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d9fa      	bls.n	8007cea <_free_r+0x42>
 8007cf4:	6811      	ldr	r1, [r2, #0]
 8007cf6:	1850      	adds	r0, r2, r1
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	d10b      	bne.n	8007d14 <_free_r+0x6c>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	4401      	add	r1, r0
 8007d00:	1850      	adds	r0, r2, r1
 8007d02:	4283      	cmp	r3, r0
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	d1e0      	bne.n	8007cca <_free_r+0x22>
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	6053      	str	r3, [r2, #4]
 8007d0e:	4408      	add	r0, r1
 8007d10:	6010      	str	r0, [r2, #0]
 8007d12:	e7da      	b.n	8007cca <_free_r+0x22>
 8007d14:	d902      	bls.n	8007d1c <_free_r+0x74>
 8007d16:	230c      	movs	r3, #12
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	e7d6      	b.n	8007cca <_free_r+0x22>
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	1821      	adds	r1, r4, r0
 8007d20:	428b      	cmp	r3, r1
 8007d22:	bf04      	itt	eq
 8007d24:	6819      	ldreq	r1, [r3, #0]
 8007d26:	685b      	ldreq	r3, [r3, #4]
 8007d28:	6063      	str	r3, [r4, #4]
 8007d2a:	bf04      	itt	eq
 8007d2c:	1809      	addeq	r1, r1, r0
 8007d2e:	6021      	streq	r1, [r4, #0]
 8007d30:	6054      	str	r4, [r2, #4]
 8007d32:	e7ca      	b.n	8007cca <_free_r+0x22>
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	bf00      	nop
 8007d38:	20000544 	.word	0x20000544

08007d3c <rshift>:
 8007d3c:	6903      	ldr	r3, [r0, #16]
 8007d3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d4a:	f100 0414 	add.w	r4, r0, #20
 8007d4e:	dd45      	ble.n	8007ddc <rshift+0xa0>
 8007d50:	f011 011f 	ands.w	r1, r1, #31
 8007d54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d5c:	d10c      	bne.n	8007d78 <rshift+0x3c>
 8007d5e:	f100 0710 	add.w	r7, r0, #16
 8007d62:	4629      	mov	r1, r5
 8007d64:	42b1      	cmp	r1, r6
 8007d66:	d334      	bcc.n	8007dd2 <rshift+0x96>
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	1eea      	subs	r2, r5, #3
 8007d6e:	4296      	cmp	r6, r2
 8007d70:	bf38      	it	cc
 8007d72:	2300      	movcc	r3, #0
 8007d74:	4423      	add	r3, r4
 8007d76:	e015      	b.n	8007da4 <rshift+0x68>
 8007d78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d7c:	f1c1 0820 	rsb	r8, r1, #32
 8007d80:	40cf      	lsrs	r7, r1
 8007d82:	f105 0e04 	add.w	lr, r5, #4
 8007d86:	46a1      	mov	r9, r4
 8007d88:	4576      	cmp	r6, lr
 8007d8a:	46f4      	mov	ip, lr
 8007d8c:	d815      	bhi.n	8007dba <rshift+0x7e>
 8007d8e:	1a9a      	subs	r2, r3, r2
 8007d90:	0092      	lsls	r2, r2, #2
 8007d92:	3a04      	subs	r2, #4
 8007d94:	3501      	adds	r5, #1
 8007d96:	42ae      	cmp	r6, r5
 8007d98:	bf38      	it	cc
 8007d9a:	2200      	movcc	r2, #0
 8007d9c:	18a3      	adds	r3, r4, r2
 8007d9e:	50a7      	str	r7, [r4, r2]
 8007da0:	b107      	cbz	r7, 8007da4 <rshift+0x68>
 8007da2:	3304      	adds	r3, #4
 8007da4:	1b1a      	subs	r2, r3, r4
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007dac:	bf08      	it	eq
 8007dae:	2300      	moveq	r3, #0
 8007db0:	6102      	str	r2, [r0, #16]
 8007db2:	bf08      	it	eq
 8007db4:	6143      	streq	r3, [r0, #20]
 8007db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dba:	f8dc c000 	ldr.w	ip, [ip]
 8007dbe:	fa0c fc08 	lsl.w	ip, ip, r8
 8007dc2:	ea4c 0707 	orr.w	r7, ip, r7
 8007dc6:	f849 7b04 	str.w	r7, [r9], #4
 8007dca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007dce:	40cf      	lsrs	r7, r1
 8007dd0:	e7da      	b.n	8007d88 <rshift+0x4c>
 8007dd2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007dd6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007dda:	e7c3      	b.n	8007d64 <rshift+0x28>
 8007ddc:	4623      	mov	r3, r4
 8007dde:	e7e1      	b.n	8007da4 <rshift+0x68>

08007de0 <__hexdig_fun>:
 8007de0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d802      	bhi.n	8007dee <__hexdig_fun+0xe>
 8007de8:	3820      	subs	r0, #32
 8007dea:	b2c0      	uxtb	r0, r0
 8007dec:	4770      	bx	lr
 8007dee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d801      	bhi.n	8007dfa <__hexdig_fun+0x1a>
 8007df6:	3847      	subs	r0, #71	@ 0x47
 8007df8:	e7f7      	b.n	8007dea <__hexdig_fun+0xa>
 8007dfa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007dfe:	2b05      	cmp	r3, #5
 8007e00:	d801      	bhi.n	8007e06 <__hexdig_fun+0x26>
 8007e02:	3827      	subs	r0, #39	@ 0x27
 8007e04:	e7f1      	b.n	8007dea <__hexdig_fun+0xa>
 8007e06:	2000      	movs	r0, #0
 8007e08:	4770      	bx	lr
	...

08007e0c <__gethex>:
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	b085      	sub	sp, #20
 8007e12:	468a      	mov	sl, r1
 8007e14:	9302      	str	r3, [sp, #8]
 8007e16:	680b      	ldr	r3, [r1, #0]
 8007e18:	9001      	str	r0, [sp, #4]
 8007e1a:	4690      	mov	r8, r2
 8007e1c:	1c9c      	adds	r4, r3, #2
 8007e1e:	46a1      	mov	r9, r4
 8007e20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e24:	2830      	cmp	r0, #48	@ 0x30
 8007e26:	d0fa      	beq.n	8007e1e <__gethex+0x12>
 8007e28:	eba9 0303 	sub.w	r3, r9, r3
 8007e2c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007e30:	f7ff ffd6 	bl	8007de0 <__hexdig_fun>
 8007e34:	4605      	mov	r5, r0
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d168      	bne.n	8007f0c <__gethex+0x100>
 8007e3a:	49a0      	ldr	r1, [pc, #640]	@ (80080bc <__gethex+0x2b0>)
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4648      	mov	r0, r9
 8007e40:	f7fe ffb1 	bl	8006da6 <strncmp>
 8007e44:	4607      	mov	r7, r0
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d167      	bne.n	8007f1a <__gethex+0x10e>
 8007e4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007e4e:	4626      	mov	r6, r4
 8007e50:	f7ff ffc6 	bl	8007de0 <__hexdig_fun>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d062      	beq.n	8007f1e <__gethex+0x112>
 8007e58:	4623      	mov	r3, r4
 8007e5a:	7818      	ldrb	r0, [r3, #0]
 8007e5c:	2830      	cmp	r0, #48	@ 0x30
 8007e5e:	4699      	mov	r9, r3
 8007e60:	f103 0301 	add.w	r3, r3, #1
 8007e64:	d0f9      	beq.n	8007e5a <__gethex+0x4e>
 8007e66:	f7ff ffbb 	bl	8007de0 <__hexdig_fun>
 8007e6a:	fab0 f580 	clz	r5, r0
 8007e6e:	096d      	lsrs	r5, r5, #5
 8007e70:	f04f 0b01 	mov.w	fp, #1
 8007e74:	464a      	mov	r2, r9
 8007e76:	4616      	mov	r6, r2
 8007e78:	3201      	adds	r2, #1
 8007e7a:	7830      	ldrb	r0, [r6, #0]
 8007e7c:	f7ff ffb0 	bl	8007de0 <__hexdig_fun>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d1f8      	bne.n	8007e76 <__gethex+0x6a>
 8007e84:	498d      	ldr	r1, [pc, #564]	@ (80080bc <__gethex+0x2b0>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7fe ff8c 	bl	8006da6 <strncmp>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d13f      	bne.n	8007f12 <__gethex+0x106>
 8007e92:	b944      	cbnz	r4, 8007ea6 <__gethex+0x9a>
 8007e94:	1c74      	adds	r4, r6, #1
 8007e96:	4622      	mov	r2, r4
 8007e98:	4616      	mov	r6, r2
 8007e9a:	3201      	adds	r2, #1
 8007e9c:	7830      	ldrb	r0, [r6, #0]
 8007e9e:	f7ff ff9f 	bl	8007de0 <__hexdig_fun>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d1f8      	bne.n	8007e98 <__gethex+0x8c>
 8007ea6:	1ba4      	subs	r4, r4, r6
 8007ea8:	00a7      	lsls	r7, r4, #2
 8007eaa:	7833      	ldrb	r3, [r6, #0]
 8007eac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007eb0:	2b50      	cmp	r3, #80	@ 0x50
 8007eb2:	d13e      	bne.n	8007f32 <__gethex+0x126>
 8007eb4:	7873      	ldrb	r3, [r6, #1]
 8007eb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007eb8:	d033      	beq.n	8007f22 <__gethex+0x116>
 8007eba:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ebc:	d034      	beq.n	8007f28 <__gethex+0x11c>
 8007ebe:	1c71      	adds	r1, r6, #1
 8007ec0:	2400      	movs	r4, #0
 8007ec2:	7808      	ldrb	r0, [r1, #0]
 8007ec4:	f7ff ff8c 	bl	8007de0 <__hexdig_fun>
 8007ec8:	1e43      	subs	r3, r0, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b18      	cmp	r3, #24
 8007ece:	d830      	bhi.n	8007f32 <__gethex+0x126>
 8007ed0:	f1a0 0210 	sub.w	r2, r0, #16
 8007ed4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ed8:	f7ff ff82 	bl	8007de0 <__hexdig_fun>
 8007edc:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ee0:	fa5f fc8c 	uxtb.w	ip, ip
 8007ee4:	f1bc 0f18 	cmp.w	ip, #24
 8007ee8:	f04f 030a 	mov.w	r3, #10
 8007eec:	d91e      	bls.n	8007f2c <__gethex+0x120>
 8007eee:	b104      	cbz	r4, 8007ef2 <__gethex+0xe6>
 8007ef0:	4252      	negs	r2, r2
 8007ef2:	4417      	add	r7, r2
 8007ef4:	f8ca 1000 	str.w	r1, [sl]
 8007ef8:	b1ed      	cbz	r5, 8007f36 <__gethex+0x12a>
 8007efa:	f1bb 0f00 	cmp.w	fp, #0
 8007efe:	bf0c      	ite	eq
 8007f00:	2506      	moveq	r5, #6
 8007f02:	2500      	movne	r5, #0
 8007f04:	4628      	mov	r0, r5
 8007f06:	b005      	add	sp, #20
 8007f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	2500      	movs	r5, #0
 8007f0e:	462c      	mov	r4, r5
 8007f10:	e7b0      	b.n	8007e74 <__gethex+0x68>
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	d1c7      	bne.n	8007ea6 <__gethex+0x9a>
 8007f16:	4627      	mov	r7, r4
 8007f18:	e7c7      	b.n	8007eaa <__gethex+0x9e>
 8007f1a:	464e      	mov	r6, r9
 8007f1c:	462f      	mov	r7, r5
 8007f1e:	2501      	movs	r5, #1
 8007f20:	e7c3      	b.n	8007eaa <__gethex+0x9e>
 8007f22:	2400      	movs	r4, #0
 8007f24:	1cb1      	adds	r1, r6, #2
 8007f26:	e7cc      	b.n	8007ec2 <__gethex+0xb6>
 8007f28:	2401      	movs	r4, #1
 8007f2a:	e7fb      	b.n	8007f24 <__gethex+0x118>
 8007f2c:	fb03 0002 	mla	r0, r3, r2, r0
 8007f30:	e7ce      	b.n	8007ed0 <__gethex+0xc4>
 8007f32:	4631      	mov	r1, r6
 8007f34:	e7de      	b.n	8007ef4 <__gethex+0xe8>
 8007f36:	eba6 0309 	sub.w	r3, r6, r9
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	2b07      	cmp	r3, #7
 8007f40:	dc0a      	bgt.n	8007f58 <__gethex+0x14c>
 8007f42:	9801      	ldr	r0, [sp, #4]
 8007f44:	f000 fafc 	bl	8008540 <_Balloc>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	b940      	cbnz	r0, 8007f5e <__gethex+0x152>
 8007f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80080c0 <__gethex+0x2b4>)
 8007f4e:	4602      	mov	r2, r0
 8007f50:	21e4      	movs	r1, #228	@ 0xe4
 8007f52:	485c      	ldr	r0, [pc, #368]	@ (80080c4 <__gethex+0x2b8>)
 8007f54:	f7ff f83e 	bl	8006fd4 <__assert_func>
 8007f58:	3101      	adds	r1, #1
 8007f5a:	105b      	asrs	r3, r3, #1
 8007f5c:	e7ef      	b.n	8007f3e <__gethex+0x132>
 8007f5e:	f100 0a14 	add.w	sl, r0, #20
 8007f62:	2300      	movs	r3, #0
 8007f64:	4655      	mov	r5, sl
 8007f66:	469b      	mov	fp, r3
 8007f68:	45b1      	cmp	r9, r6
 8007f6a:	d337      	bcc.n	8007fdc <__gethex+0x1d0>
 8007f6c:	f845 bb04 	str.w	fp, [r5], #4
 8007f70:	eba5 050a 	sub.w	r5, r5, sl
 8007f74:	10ad      	asrs	r5, r5, #2
 8007f76:	6125      	str	r5, [r4, #16]
 8007f78:	4658      	mov	r0, fp
 8007f7a:	f000 fbd3 	bl	8008724 <__hi0bits>
 8007f7e:	016d      	lsls	r5, r5, #5
 8007f80:	f8d8 6000 	ldr.w	r6, [r8]
 8007f84:	1a2d      	subs	r5, r5, r0
 8007f86:	42b5      	cmp	r5, r6
 8007f88:	dd54      	ble.n	8008034 <__gethex+0x228>
 8007f8a:	1bad      	subs	r5, r5, r6
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 ff67 	bl	8008e62 <__any_on>
 8007f94:	4681      	mov	r9, r0
 8007f96:	b178      	cbz	r0, 8007fb8 <__gethex+0x1ac>
 8007f98:	1e6b      	subs	r3, r5, #1
 8007f9a:	1159      	asrs	r1, r3, #5
 8007f9c:	f003 021f 	and.w	r2, r3, #31
 8007fa0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007fa4:	f04f 0901 	mov.w	r9, #1
 8007fa8:	fa09 f202 	lsl.w	r2, r9, r2
 8007fac:	420a      	tst	r2, r1
 8007fae:	d003      	beq.n	8007fb8 <__gethex+0x1ac>
 8007fb0:	454b      	cmp	r3, r9
 8007fb2:	dc36      	bgt.n	8008022 <__gethex+0x216>
 8007fb4:	f04f 0902 	mov.w	r9, #2
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f7ff febe 	bl	8007d3c <rshift>
 8007fc0:	442f      	add	r7, r5
 8007fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fc6:	42bb      	cmp	r3, r7
 8007fc8:	da42      	bge.n	8008050 <__gethex+0x244>
 8007fca:	9801      	ldr	r0, [sp, #4]
 8007fcc:	4621      	mov	r1, r4
 8007fce:	f000 faf7 	bl	80085c0 <_Bfree>
 8007fd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	25a3      	movs	r5, #163	@ 0xa3
 8007fda:	e793      	b.n	8007f04 <__gethex+0xf8>
 8007fdc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007fe0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007fe2:	d012      	beq.n	800800a <__gethex+0x1fe>
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d104      	bne.n	8007ff2 <__gethex+0x1e6>
 8007fe8:	f845 bb04 	str.w	fp, [r5], #4
 8007fec:	f04f 0b00 	mov.w	fp, #0
 8007ff0:	465b      	mov	r3, fp
 8007ff2:	7830      	ldrb	r0, [r6, #0]
 8007ff4:	9303      	str	r3, [sp, #12]
 8007ff6:	f7ff fef3 	bl	8007de0 <__hexdig_fun>
 8007ffa:	9b03      	ldr	r3, [sp, #12]
 8007ffc:	f000 000f 	and.w	r0, r0, #15
 8008000:	4098      	lsls	r0, r3
 8008002:	ea4b 0b00 	orr.w	fp, fp, r0
 8008006:	3304      	adds	r3, #4
 8008008:	e7ae      	b.n	8007f68 <__gethex+0x15c>
 800800a:	45b1      	cmp	r9, r6
 800800c:	d8ea      	bhi.n	8007fe4 <__gethex+0x1d8>
 800800e:	492b      	ldr	r1, [pc, #172]	@ (80080bc <__gethex+0x2b0>)
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	4630      	mov	r0, r6
 8008016:	f7fe fec6 	bl	8006da6 <strncmp>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	2800      	cmp	r0, #0
 800801e:	d1e1      	bne.n	8007fe4 <__gethex+0x1d8>
 8008020:	e7a2      	b.n	8007f68 <__gethex+0x15c>
 8008022:	1ea9      	subs	r1, r5, #2
 8008024:	4620      	mov	r0, r4
 8008026:	f000 ff1c 	bl	8008e62 <__any_on>
 800802a:	2800      	cmp	r0, #0
 800802c:	d0c2      	beq.n	8007fb4 <__gethex+0x1a8>
 800802e:	f04f 0903 	mov.w	r9, #3
 8008032:	e7c1      	b.n	8007fb8 <__gethex+0x1ac>
 8008034:	da09      	bge.n	800804a <__gethex+0x23e>
 8008036:	1b75      	subs	r5, r6, r5
 8008038:	4621      	mov	r1, r4
 800803a:	9801      	ldr	r0, [sp, #4]
 800803c:	462a      	mov	r2, r5
 800803e:	f000 fcd7 	bl	80089f0 <__lshift>
 8008042:	1b7f      	subs	r7, r7, r5
 8008044:	4604      	mov	r4, r0
 8008046:	f100 0a14 	add.w	sl, r0, #20
 800804a:	f04f 0900 	mov.w	r9, #0
 800804e:	e7b8      	b.n	8007fc2 <__gethex+0x1b6>
 8008050:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008054:	42bd      	cmp	r5, r7
 8008056:	dd6f      	ble.n	8008138 <__gethex+0x32c>
 8008058:	1bed      	subs	r5, r5, r7
 800805a:	42ae      	cmp	r6, r5
 800805c:	dc34      	bgt.n	80080c8 <__gethex+0x2bc>
 800805e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d022      	beq.n	80080ac <__gethex+0x2a0>
 8008066:	2b03      	cmp	r3, #3
 8008068:	d024      	beq.n	80080b4 <__gethex+0x2a8>
 800806a:	2b01      	cmp	r3, #1
 800806c:	d115      	bne.n	800809a <__gethex+0x28e>
 800806e:	42ae      	cmp	r6, r5
 8008070:	d113      	bne.n	800809a <__gethex+0x28e>
 8008072:	2e01      	cmp	r6, #1
 8008074:	d10b      	bne.n	800808e <__gethex+0x282>
 8008076:	9a02      	ldr	r2, [sp, #8]
 8008078:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	2301      	movs	r3, #1
 8008080:	6123      	str	r3, [r4, #16]
 8008082:	f8ca 3000 	str.w	r3, [sl]
 8008086:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008088:	2562      	movs	r5, #98	@ 0x62
 800808a:	601c      	str	r4, [r3, #0]
 800808c:	e73a      	b.n	8007f04 <__gethex+0xf8>
 800808e:	1e71      	subs	r1, r6, #1
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fee6 	bl	8008e62 <__any_on>
 8008096:	2800      	cmp	r0, #0
 8008098:	d1ed      	bne.n	8008076 <__gethex+0x26a>
 800809a:	9801      	ldr	r0, [sp, #4]
 800809c:	4621      	mov	r1, r4
 800809e:	f000 fa8f 	bl	80085c0 <_Bfree>
 80080a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080a4:	2300      	movs	r3, #0
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	2550      	movs	r5, #80	@ 0x50
 80080aa:	e72b      	b.n	8007f04 <__gethex+0xf8>
 80080ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f3      	bne.n	800809a <__gethex+0x28e>
 80080b2:	e7e0      	b.n	8008076 <__gethex+0x26a>
 80080b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1dd      	bne.n	8008076 <__gethex+0x26a>
 80080ba:	e7ee      	b.n	800809a <__gethex+0x28e>
 80080bc:	08009d98 	.word	0x08009d98
 80080c0:	08009f43 	.word	0x08009f43
 80080c4:	08009f54 	.word	0x08009f54
 80080c8:	1e6f      	subs	r7, r5, #1
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	d130      	bne.n	8008132 <__gethex+0x326>
 80080d0:	b127      	cbz	r7, 80080dc <__gethex+0x2d0>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fec4 	bl	8008e62 <__any_on>
 80080da:	4681      	mov	r9, r0
 80080dc:	117a      	asrs	r2, r7, #5
 80080de:	2301      	movs	r3, #1
 80080e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80080e4:	f007 071f 	and.w	r7, r7, #31
 80080e8:	40bb      	lsls	r3, r7
 80080ea:	4213      	tst	r3, r2
 80080ec:	4629      	mov	r1, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	bf18      	it	ne
 80080f2:	f049 0902 	orrne.w	r9, r9, #2
 80080f6:	f7ff fe21 	bl	8007d3c <rshift>
 80080fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80080fe:	1b76      	subs	r6, r6, r5
 8008100:	2502      	movs	r5, #2
 8008102:	f1b9 0f00 	cmp.w	r9, #0
 8008106:	d047      	beq.n	8008198 <__gethex+0x38c>
 8008108:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d015      	beq.n	800813c <__gethex+0x330>
 8008110:	2b03      	cmp	r3, #3
 8008112:	d017      	beq.n	8008144 <__gethex+0x338>
 8008114:	2b01      	cmp	r3, #1
 8008116:	d109      	bne.n	800812c <__gethex+0x320>
 8008118:	f019 0f02 	tst.w	r9, #2
 800811c:	d006      	beq.n	800812c <__gethex+0x320>
 800811e:	f8da 3000 	ldr.w	r3, [sl]
 8008122:	ea49 0903 	orr.w	r9, r9, r3
 8008126:	f019 0f01 	tst.w	r9, #1
 800812a:	d10e      	bne.n	800814a <__gethex+0x33e>
 800812c:	f045 0510 	orr.w	r5, r5, #16
 8008130:	e032      	b.n	8008198 <__gethex+0x38c>
 8008132:	f04f 0901 	mov.w	r9, #1
 8008136:	e7d1      	b.n	80080dc <__gethex+0x2d0>
 8008138:	2501      	movs	r5, #1
 800813a:	e7e2      	b.n	8008102 <__gethex+0x2f6>
 800813c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800813e:	f1c3 0301 	rsb	r3, r3, #1
 8008142:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f0      	beq.n	800812c <__gethex+0x320>
 800814a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800814e:	f104 0314 	add.w	r3, r4, #20
 8008152:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008156:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800815a:	f04f 0c00 	mov.w	ip, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f853 2b04 	ldr.w	r2, [r3], #4
 8008164:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008168:	d01b      	beq.n	80081a2 <__gethex+0x396>
 800816a:	3201      	adds	r2, #1
 800816c:	6002      	str	r2, [r0, #0]
 800816e:	2d02      	cmp	r5, #2
 8008170:	f104 0314 	add.w	r3, r4, #20
 8008174:	d13c      	bne.n	80081f0 <__gethex+0x3e4>
 8008176:	f8d8 2000 	ldr.w	r2, [r8]
 800817a:	3a01      	subs	r2, #1
 800817c:	42b2      	cmp	r2, r6
 800817e:	d109      	bne.n	8008194 <__gethex+0x388>
 8008180:	1171      	asrs	r1, r6, #5
 8008182:	2201      	movs	r2, #1
 8008184:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008188:	f006 061f 	and.w	r6, r6, #31
 800818c:	fa02 f606 	lsl.w	r6, r2, r6
 8008190:	421e      	tst	r6, r3
 8008192:	d13a      	bne.n	800820a <__gethex+0x3fe>
 8008194:	f045 0520 	orr.w	r5, r5, #32
 8008198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800819a:	601c      	str	r4, [r3, #0]
 800819c:	9b02      	ldr	r3, [sp, #8]
 800819e:	601f      	str	r7, [r3, #0]
 80081a0:	e6b0      	b.n	8007f04 <__gethex+0xf8>
 80081a2:	4299      	cmp	r1, r3
 80081a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80081a8:	d8d9      	bhi.n	800815e <__gethex+0x352>
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	459b      	cmp	fp, r3
 80081ae:	db17      	blt.n	80081e0 <__gethex+0x3d4>
 80081b0:	6861      	ldr	r1, [r4, #4]
 80081b2:	9801      	ldr	r0, [sp, #4]
 80081b4:	3101      	adds	r1, #1
 80081b6:	f000 f9c3 	bl	8008540 <_Balloc>
 80081ba:	4681      	mov	r9, r0
 80081bc:	b918      	cbnz	r0, 80081c6 <__gethex+0x3ba>
 80081be:	4b1a      	ldr	r3, [pc, #104]	@ (8008228 <__gethex+0x41c>)
 80081c0:	4602      	mov	r2, r0
 80081c2:	2184      	movs	r1, #132	@ 0x84
 80081c4:	e6c5      	b.n	8007f52 <__gethex+0x146>
 80081c6:	6922      	ldr	r2, [r4, #16]
 80081c8:	3202      	adds	r2, #2
 80081ca:	f104 010c 	add.w	r1, r4, #12
 80081ce:	0092      	lsls	r2, r2, #2
 80081d0:	300c      	adds	r0, #12
 80081d2:	f7fe fee0 	bl	8006f96 <memcpy>
 80081d6:	4621      	mov	r1, r4
 80081d8:	9801      	ldr	r0, [sp, #4]
 80081da:	f000 f9f1 	bl	80085c0 <_Bfree>
 80081de:	464c      	mov	r4, r9
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081e8:	6122      	str	r2, [r4, #16]
 80081ea:	2201      	movs	r2, #1
 80081ec:	615a      	str	r2, [r3, #20]
 80081ee:	e7be      	b.n	800816e <__gethex+0x362>
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	455a      	cmp	r2, fp
 80081f4:	dd0b      	ble.n	800820e <__gethex+0x402>
 80081f6:	2101      	movs	r1, #1
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7ff fd9f 	bl	8007d3c <rshift>
 80081fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008202:	3701      	adds	r7, #1
 8008204:	42bb      	cmp	r3, r7
 8008206:	f6ff aee0 	blt.w	8007fca <__gethex+0x1be>
 800820a:	2501      	movs	r5, #1
 800820c:	e7c2      	b.n	8008194 <__gethex+0x388>
 800820e:	f016 061f 	ands.w	r6, r6, #31
 8008212:	d0fa      	beq.n	800820a <__gethex+0x3fe>
 8008214:	4453      	add	r3, sl
 8008216:	f1c6 0620 	rsb	r6, r6, #32
 800821a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800821e:	f000 fa81 	bl	8008724 <__hi0bits>
 8008222:	42b0      	cmp	r0, r6
 8008224:	dbe7      	blt.n	80081f6 <__gethex+0x3ea>
 8008226:	e7f0      	b.n	800820a <__gethex+0x3fe>
 8008228:	08009f43 	.word	0x08009f43

0800822c <L_shift>:
 800822c:	f1c2 0208 	rsb	r2, r2, #8
 8008230:	0092      	lsls	r2, r2, #2
 8008232:	b570      	push	{r4, r5, r6, lr}
 8008234:	f1c2 0620 	rsb	r6, r2, #32
 8008238:	6843      	ldr	r3, [r0, #4]
 800823a:	6804      	ldr	r4, [r0, #0]
 800823c:	fa03 f506 	lsl.w	r5, r3, r6
 8008240:	432c      	orrs	r4, r5
 8008242:	40d3      	lsrs	r3, r2
 8008244:	6004      	str	r4, [r0, #0]
 8008246:	f840 3f04 	str.w	r3, [r0, #4]!
 800824a:	4288      	cmp	r0, r1
 800824c:	d3f4      	bcc.n	8008238 <L_shift+0xc>
 800824e:	bd70      	pop	{r4, r5, r6, pc}

08008250 <__match>:
 8008250:	b530      	push	{r4, r5, lr}
 8008252:	6803      	ldr	r3, [r0, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800825a:	b914      	cbnz	r4, 8008262 <__match+0x12>
 800825c:	6003      	str	r3, [r0, #0]
 800825e:	2001      	movs	r0, #1
 8008260:	bd30      	pop	{r4, r5, pc}
 8008262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008266:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800826a:	2d19      	cmp	r5, #25
 800826c:	bf98      	it	ls
 800826e:	3220      	addls	r2, #32
 8008270:	42a2      	cmp	r2, r4
 8008272:	d0f0      	beq.n	8008256 <__match+0x6>
 8008274:	2000      	movs	r0, #0
 8008276:	e7f3      	b.n	8008260 <__match+0x10>

08008278 <__hexnan>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	680b      	ldr	r3, [r1, #0]
 800827e:	6801      	ldr	r1, [r0, #0]
 8008280:	115e      	asrs	r6, r3, #5
 8008282:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008286:	f013 031f 	ands.w	r3, r3, #31
 800828a:	b087      	sub	sp, #28
 800828c:	bf18      	it	ne
 800828e:	3604      	addne	r6, #4
 8008290:	2500      	movs	r5, #0
 8008292:	1f37      	subs	r7, r6, #4
 8008294:	4682      	mov	sl, r0
 8008296:	4690      	mov	r8, r2
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	f846 5c04 	str.w	r5, [r6, #-4]
 800829e:	46b9      	mov	r9, r7
 80082a0:	463c      	mov	r4, r7
 80082a2:	9502      	str	r5, [sp, #8]
 80082a4:	46ab      	mov	fp, r5
 80082a6:	784a      	ldrb	r2, [r1, #1]
 80082a8:	1c4b      	adds	r3, r1, #1
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	b342      	cbz	r2, 8008300 <__hexnan+0x88>
 80082ae:	4610      	mov	r0, r2
 80082b0:	9105      	str	r1, [sp, #20]
 80082b2:	9204      	str	r2, [sp, #16]
 80082b4:	f7ff fd94 	bl	8007de0 <__hexdig_fun>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d151      	bne.n	8008360 <__hexnan+0xe8>
 80082bc:	9a04      	ldr	r2, [sp, #16]
 80082be:	9905      	ldr	r1, [sp, #20]
 80082c0:	2a20      	cmp	r2, #32
 80082c2:	d818      	bhi.n	80082f6 <__hexnan+0x7e>
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	459b      	cmp	fp, r3
 80082c8:	dd13      	ble.n	80082f2 <__hexnan+0x7a>
 80082ca:	454c      	cmp	r4, r9
 80082cc:	d206      	bcs.n	80082dc <__hexnan+0x64>
 80082ce:	2d07      	cmp	r5, #7
 80082d0:	dc04      	bgt.n	80082dc <__hexnan+0x64>
 80082d2:	462a      	mov	r2, r5
 80082d4:	4649      	mov	r1, r9
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7ff ffa8 	bl	800822c <L_shift>
 80082dc:	4544      	cmp	r4, r8
 80082de:	d952      	bls.n	8008386 <__hexnan+0x10e>
 80082e0:	2300      	movs	r3, #0
 80082e2:	f1a4 0904 	sub.w	r9, r4, #4
 80082e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80082ea:	f8cd b008 	str.w	fp, [sp, #8]
 80082ee:	464c      	mov	r4, r9
 80082f0:	461d      	mov	r5, r3
 80082f2:	9903      	ldr	r1, [sp, #12]
 80082f4:	e7d7      	b.n	80082a6 <__hexnan+0x2e>
 80082f6:	2a29      	cmp	r2, #41	@ 0x29
 80082f8:	d157      	bne.n	80083aa <__hexnan+0x132>
 80082fa:	3102      	adds	r1, #2
 80082fc:	f8ca 1000 	str.w	r1, [sl]
 8008300:	f1bb 0f00 	cmp.w	fp, #0
 8008304:	d051      	beq.n	80083aa <__hexnan+0x132>
 8008306:	454c      	cmp	r4, r9
 8008308:	d206      	bcs.n	8008318 <__hexnan+0xa0>
 800830a:	2d07      	cmp	r5, #7
 800830c:	dc04      	bgt.n	8008318 <__hexnan+0xa0>
 800830e:	462a      	mov	r2, r5
 8008310:	4649      	mov	r1, r9
 8008312:	4620      	mov	r0, r4
 8008314:	f7ff ff8a 	bl	800822c <L_shift>
 8008318:	4544      	cmp	r4, r8
 800831a:	d936      	bls.n	800838a <__hexnan+0x112>
 800831c:	f1a8 0204 	sub.w	r2, r8, #4
 8008320:	4623      	mov	r3, r4
 8008322:	f853 1b04 	ldr.w	r1, [r3], #4
 8008326:	f842 1f04 	str.w	r1, [r2, #4]!
 800832a:	429f      	cmp	r7, r3
 800832c:	d2f9      	bcs.n	8008322 <__hexnan+0xaa>
 800832e:	1b3b      	subs	r3, r7, r4
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	3304      	adds	r3, #4
 8008336:	3401      	adds	r4, #1
 8008338:	3e03      	subs	r6, #3
 800833a:	42b4      	cmp	r4, r6
 800833c:	bf88      	it	hi
 800833e:	2304      	movhi	r3, #4
 8008340:	4443      	add	r3, r8
 8008342:	2200      	movs	r2, #0
 8008344:	f843 2b04 	str.w	r2, [r3], #4
 8008348:	429f      	cmp	r7, r3
 800834a:	d2fb      	bcs.n	8008344 <__hexnan+0xcc>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	b91b      	cbnz	r3, 8008358 <__hexnan+0xe0>
 8008350:	4547      	cmp	r7, r8
 8008352:	d128      	bne.n	80083a6 <__hexnan+0x12e>
 8008354:	2301      	movs	r3, #1
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	2005      	movs	r0, #5
 800835a:	b007      	add	sp, #28
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	3501      	adds	r5, #1
 8008362:	2d08      	cmp	r5, #8
 8008364:	f10b 0b01 	add.w	fp, fp, #1
 8008368:	dd06      	ble.n	8008378 <__hexnan+0x100>
 800836a:	4544      	cmp	r4, r8
 800836c:	d9c1      	bls.n	80082f2 <__hexnan+0x7a>
 800836e:	2300      	movs	r3, #0
 8008370:	f844 3c04 	str.w	r3, [r4, #-4]
 8008374:	2501      	movs	r5, #1
 8008376:	3c04      	subs	r4, #4
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	f000 000f 	and.w	r0, r0, #15
 800837e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008382:	6020      	str	r0, [r4, #0]
 8008384:	e7b5      	b.n	80082f2 <__hexnan+0x7a>
 8008386:	2508      	movs	r5, #8
 8008388:	e7b3      	b.n	80082f2 <__hexnan+0x7a>
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0dd      	beq.n	800834c <__hexnan+0xd4>
 8008390:	f1c3 0320 	rsb	r3, r3, #32
 8008394:	f04f 32ff 	mov.w	r2, #4294967295
 8008398:	40da      	lsrs	r2, r3
 800839a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800839e:	4013      	ands	r3, r2
 80083a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80083a4:	e7d2      	b.n	800834c <__hexnan+0xd4>
 80083a6:	3f04      	subs	r7, #4
 80083a8:	e7d0      	b.n	800834c <__hexnan+0xd4>
 80083aa:	2004      	movs	r0, #4
 80083ac:	e7d5      	b.n	800835a <__hexnan+0xe2>
	...

080083b0 <malloc>:
 80083b0:	4b02      	ldr	r3, [pc, #8]	@ (80083bc <malloc+0xc>)
 80083b2:	4601      	mov	r1, r0
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f000 b825 	b.w	8008404 <_malloc_r>
 80083ba:	bf00      	nop
 80083bc:	200001c4 	.word	0x200001c4

080083c0 <sbrk_aligned>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	4e0f      	ldr	r6, [pc, #60]	@ (8008400 <sbrk_aligned+0x40>)
 80083c4:	460c      	mov	r4, r1
 80083c6:	6831      	ldr	r1, [r6, #0]
 80083c8:	4605      	mov	r5, r0
 80083ca:	b911      	cbnz	r1, 80083d2 <sbrk_aligned+0x12>
 80083cc:	f001 f822 	bl	8009414 <_sbrk_r>
 80083d0:	6030      	str	r0, [r6, #0]
 80083d2:	4621      	mov	r1, r4
 80083d4:	4628      	mov	r0, r5
 80083d6:	f001 f81d 	bl	8009414 <_sbrk_r>
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	d103      	bne.n	80083e6 <sbrk_aligned+0x26>
 80083de:	f04f 34ff 	mov.w	r4, #4294967295
 80083e2:	4620      	mov	r0, r4
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	1cc4      	adds	r4, r0, #3
 80083e8:	f024 0403 	bic.w	r4, r4, #3
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d0f8      	beq.n	80083e2 <sbrk_aligned+0x22>
 80083f0:	1a21      	subs	r1, r4, r0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f001 f80e 	bl	8009414 <_sbrk_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d1f2      	bne.n	80083e2 <sbrk_aligned+0x22>
 80083fc:	e7ef      	b.n	80083de <sbrk_aligned+0x1e>
 80083fe:	bf00      	nop
 8008400:	20000540 	.word	0x20000540

08008404 <_malloc_r>:
 8008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008408:	1ccd      	adds	r5, r1, #3
 800840a:	f025 0503 	bic.w	r5, r5, #3
 800840e:	3508      	adds	r5, #8
 8008410:	2d0c      	cmp	r5, #12
 8008412:	bf38      	it	cc
 8008414:	250c      	movcc	r5, #12
 8008416:	2d00      	cmp	r5, #0
 8008418:	4606      	mov	r6, r0
 800841a:	db01      	blt.n	8008420 <_malloc_r+0x1c>
 800841c:	42a9      	cmp	r1, r5
 800841e:	d904      	bls.n	800842a <_malloc_r+0x26>
 8008420:	230c      	movs	r3, #12
 8008422:	6033      	str	r3, [r6, #0]
 8008424:	2000      	movs	r0, #0
 8008426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008500 <_malloc_r+0xfc>
 800842e:	f000 f87b 	bl	8008528 <__malloc_lock>
 8008432:	f8d8 3000 	ldr.w	r3, [r8]
 8008436:	461c      	mov	r4, r3
 8008438:	bb44      	cbnz	r4, 800848c <_malloc_r+0x88>
 800843a:	4629      	mov	r1, r5
 800843c:	4630      	mov	r0, r6
 800843e:	f7ff ffbf 	bl	80083c0 <sbrk_aligned>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	4604      	mov	r4, r0
 8008446:	d158      	bne.n	80084fa <_malloc_r+0xf6>
 8008448:	f8d8 4000 	ldr.w	r4, [r8]
 800844c:	4627      	mov	r7, r4
 800844e:	2f00      	cmp	r7, #0
 8008450:	d143      	bne.n	80084da <_malloc_r+0xd6>
 8008452:	2c00      	cmp	r4, #0
 8008454:	d04b      	beq.n	80084ee <_malloc_r+0xea>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	4639      	mov	r1, r7
 800845a:	4630      	mov	r0, r6
 800845c:	eb04 0903 	add.w	r9, r4, r3
 8008460:	f000 ffd8 	bl	8009414 <_sbrk_r>
 8008464:	4581      	cmp	r9, r0
 8008466:	d142      	bne.n	80084ee <_malloc_r+0xea>
 8008468:	6821      	ldr	r1, [r4, #0]
 800846a:	1a6d      	subs	r5, r5, r1
 800846c:	4629      	mov	r1, r5
 800846e:	4630      	mov	r0, r6
 8008470:	f7ff ffa6 	bl	80083c0 <sbrk_aligned>
 8008474:	3001      	adds	r0, #1
 8008476:	d03a      	beq.n	80084ee <_malloc_r+0xea>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	442b      	add	r3, r5
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	f8d8 3000 	ldr.w	r3, [r8]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	bb62      	cbnz	r2, 80084e0 <_malloc_r+0xdc>
 8008486:	f8c8 7000 	str.w	r7, [r8]
 800848a:	e00f      	b.n	80084ac <_malloc_r+0xa8>
 800848c:	6822      	ldr	r2, [r4, #0]
 800848e:	1b52      	subs	r2, r2, r5
 8008490:	d420      	bmi.n	80084d4 <_malloc_r+0xd0>
 8008492:	2a0b      	cmp	r2, #11
 8008494:	d917      	bls.n	80084c6 <_malloc_r+0xc2>
 8008496:	1961      	adds	r1, r4, r5
 8008498:	42a3      	cmp	r3, r4
 800849a:	6025      	str	r5, [r4, #0]
 800849c:	bf18      	it	ne
 800849e:	6059      	strne	r1, [r3, #4]
 80084a0:	6863      	ldr	r3, [r4, #4]
 80084a2:	bf08      	it	eq
 80084a4:	f8c8 1000 	streq.w	r1, [r8]
 80084a8:	5162      	str	r2, [r4, r5]
 80084aa:	604b      	str	r3, [r1, #4]
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 f841 	bl	8008534 <__malloc_unlock>
 80084b2:	f104 000b 	add.w	r0, r4, #11
 80084b6:	1d23      	adds	r3, r4, #4
 80084b8:	f020 0007 	bic.w	r0, r0, #7
 80084bc:	1ac2      	subs	r2, r0, r3
 80084be:	bf1c      	itt	ne
 80084c0:	1a1b      	subne	r3, r3, r0
 80084c2:	50a3      	strne	r3, [r4, r2]
 80084c4:	e7af      	b.n	8008426 <_malloc_r+0x22>
 80084c6:	6862      	ldr	r2, [r4, #4]
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	bf0c      	ite	eq
 80084cc:	f8c8 2000 	streq.w	r2, [r8]
 80084d0:	605a      	strne	r2, [r3, #4]
 80084d2:	e7eb      	b.n	80084ac <_malloc_r+0xa8>
 80084d4:	4623      	mov	r3, r4
 80084d6:	6864      	ldr	r4, [r4, #4]
 80084d8:	e7ae      	b.n	8008438 <_malloc_r+0x34>
 80084da:	463c      	mov	r4, r7
 80084dc:	687f      	ldr	r7, [r7, #4]
 80084de:	e7b6      	b.n	800844e <_malloc_r+0x4a>
 80084e0:	461a      	mov	r2, r3
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	d1fb      	bne.n	80084e0 <_malloc_r+0xdc>
 80084e8:	2300      	movs	r3, #0
 80084ea:	6053      	str	r3, [r2, #4]
 80084ec:	e7de      	b.n	80084ac <_malloc_r+0xa8>
 80084ee:	230c      	movs	r3, #12
 80084f0:	6033      	str	r3, [r6, #0]
 80084f2:	4630      	mov	r0, r6
 80084f4:	f000 f81e 	bl	8008534 <__malloc_unlock>
 80084f8:	e794      	b.n	8008424 <_malloc_r+0x20>
 80084fa:	6005      	str	r5, [r0, #0]
 80084fc:	e7d6      	b.n	80084ac <_malloc_r+0xa8>
 80084fe:	bf00      	nop
 8008500:	20000544 	.word	0x20000544

08008504 <__ascii_mbtowc>:
 8008504:	b082      	sub	sp, #8
 8008506:	b901      	cbnz	r1, 800850a <__ascii_mbtowc+0x6>
 8008508:	a901      	add	r1, sp, #4
 800850a:	b142      	cbz	r2, 800851e <__ascii_mbtowc+0x1a>
 800850c:	b14b      	cbz	r3, 8008522 <__ascii_mbtowc+0x1e>
 800850e:	7813      	ldrb	r3, [r2, #0]
 8008510:	600b      	str	r3, [r1, #0]
 8008512:	7812      	ldrb	r2, [r2, #0]
 8008514:	1e10      	subs	r0, r2, #0
 8008516:	bf18      	it	ne
 8008518:	2001      	movne	r0, #1
 800851a:	b002      	add	sp, #8
 800851c:	4770      	bx	lr
 800851e:	4610      	mov	r0, r2
 8008520:	e7fb      	b.n	800851a <__ascii_mbtowc+0x16>
 8008522:	f06f 0001 	mvn.w	r0, #1
 8008526:	e7f8      	b.n	800851a <__ascii_mbtowc+0x16>

08008528 <__malloc_lock>:
 8008528:	4801      	ldr	r0, [pc, #4]	@ (8008530 <__malloc_lock+0x8>)
 800852a:	f7fe bd32 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 800852e:	bf00      	nop
 8008530:	2000053c 	.word	0x2000053c

08008534 <__malloc_unlock>:
 8008534:	4801      	ldr	r0, [pc, #4]	@ (800853c <__malloc_unlock+0x8>)
 8008536:	f7fe bd2d 	b.w	8006f94 <__retarget_lock_release_recursive>
 800853a:	bf00      	nop
 800853c:	2000053c 	.word	0x2000053c

08008540 <_Balloc>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	69c6      	ldr	r6, [r0, #28]
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	b976      	cbnz	r6, 8008568 <_Balloc+0x28>
 800854a:	2010      	movs	r0, #16
 800854c:	f7ff ff30 	bl	80083b0 <malloc>
 8008550:	4602      	mov	r2, r0
 8008552:	61e0      	str	r0, [r4, #28]
 8008554:	b920      	cbnz	r0, 8008560 <_Balloc+0x20>
 8008556:	4b18      	ldr	r3, [pc, #96]	@ (80085b8 <_Balloc+0x78>)
 8008558:	4818      	ldr	r0, [pc, #96]	@ (80085bc <_Balloc+0x7c>)
 800855a:	216b      	movs	r1, #107	@ 0x6b
 800855c:	f7fe fd3a 	bl	8006fd4 <__assert_func>
 8008560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008564:	6006      	str	r6, [r0, #0]
 8008566:	60c6      	str	r6, [r0, #12]
 8008568:	69e6      	ldr	r6, [r4, #28]
 800856a:	68f3      	ldr	r3, [r6, #12]
 800856c:	b183      	cbz	r3, 8008590 <_Balloc+0x50>
 800856e:	69e3      	ldr	r3, [r4, #28]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008576:	b9b8      	cbnz	r0, 80085a8 <_Balloc+0x68>
 8008578:	2101      	movs	r1, #1
 800857a:	fa01 f605 	lsl.w	r6, r1, r5
 800857e:	1d72      	adds	r2, r6, #5
 8008580:	0092      	lsls	r2, r2, #2
 8008582:	4620      	mov	r0, r4
 8008584:	f000 ff5d 	bl	8009442 <_calloc_r>
 8008588:	b160      	cbz	r0, 80085a4 <_Balloc+0x64>
 800858a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800858e:	e00e      	b.n	80085ae <_Balloc+0x6e>
 8008590:	2221      	movs	r2, #33	@ 0x21
 8008592:	2104      	movs	r1, #4
 8008594:	4620      	mov	r0, r4
 8008596:	f000 ff54 	bl	8009442 <_calloc_r>
 800859a:	69e3      	ldr	r3, [r4, #28]
 800859c:	60f0      	str	r0, [r6, #12]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e4      	bne.n	800856e <_Balloc+0x2e>
 80085a4:	2000      	movs	r0, #0
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	6802      	ldr	r2, [r0, #0]
 80085aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ae:	2300      	movs	r3, #0
 80085b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085b4:	e7f7      	b.n	80085a6 <_Balloc+0x66>
 80085b6:	bf00      	nop
 80085b8:	08009e29 	.word	0x08009e29
 80085bc:	08009fb4 	.word	0x08009fb4

080085c0 <_Bfree>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	69c6      	ldr	r6, [r0, #28]
 80085c4:	4605      	mov	r5, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	b976      	cbnz	r6, 80085e8 <_Bfree+0x28>
 80085ca:	2010      	movs	r0, #16
 80085cc:	f7ff fef0 	bl	80083b0 <malloc>
 80085d0:	4602      	mov	r2, r0
 80085d2:	61e8      	str	r0, [r5, #28]
 80085d4:	b920      	cbnz	r0, 80085e0 <_Bfree+0x20>
 80085d6:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <_Bfree+0x3c>)
 80085d8:	4809      	ldr	r0, [pc, #36]	@ (8008600 <_Bfree+0x40>)
 80085da:	218f      	movs	r1, #143	@ 0x8f
 80085dc:	f7fe fcfa 	bl	8006fd4 <__assert_func>
 80085e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e4:	6006      	str	r6, [r0, #0]
 80085e6:	60c6      	str	r6, [r0, #12]
 80085e8:	b13c      	cbz	r4, 80085fa <_Bfree+0x3a>
 80085ea:	69eb      	ldr	r3, [r5, #28]
 80085ec:	6862      	ldr	r2, [r4, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f4:	6021      	str	r1, [r4, #0]
 80085f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	08009e29 	.word	0x08009e29
 8008600:	08009fb4 	.word	0x08009fb4

08008604 <__multadd>:
 8008604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008608:	690d      	ldr	r5, [r1, #16]
 800860a:	4607      	mov	r7, r0
 800860c:	460c      	mov	r4, r1
 800860e:	461e      	mov	r6, r3
 8008610:	f101 0c14 	add.w	ip, r1, #20
 8008614:	2000      	movs	r0, #0
 8008616:	f8dc 3000 	ldr.w	r3, [ip]
 800861a:	b299      	uxth	r1, r3
 800861c:	fb02 6101 	mla	r1, r2, r1, r6
 8008620:	0c1e      	lsrs	r6, r3, #16
 8008622:	0c0b      	lsrs	r3, r1, #16
 8008624:	fb02 3306 	mla	r3, r2, r6, r3
 8008628:	b289      	uxth	r1, r1
 800862a:	3001      	adds	r0, #1
 800862c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008630:	4285      	cmp	r5, r0
 8008632:	f84c 1b04 	str.w	r1, [ip], #4
 8008636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800863a:	dcec      	bgt.n	8008616 <__multadd+0x12>
 800863c:	b30e      	cbz	r6, 8008682 <__multadd+0x7e>
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	42ab      	cmp	r3, r5
 8008642:	dc19      	bgt.n	8008678 <__multadd+0x74>
 8008644:	6861      	ldr	r1, [r4, #4]
 8008646:	4638      	mov	r0, r7
 8008648:	3101      	adds	r1, #1
 800864a:	f7ff ff79 	bl	8008540 <_Balloc>
 800864e:	4680      	mov	r8, r0
 8008650:	b928      	cbnz	r0, 800865e <__multadd+0x5a>
 8008652:	4602      	mov	r2, r0
 8008654:	4b0c      	ldr	r3, [pc, #48]	@ (8008688 <__multadd+0x84>)
 8008656:	480d      	ldr	r0, [pc, #52]	@ (800868c <__multadd+0x88>)
 8008658:	21ba      	movs	r1, #186	@ 0xba
 800865a:	f7fe fcbb 	bl	8006fd4 <__assert_func>
 800865e:	6922      	ldr	r2, [r4, #16]
 8008660:	3202      	adds	r2, #2
 8008662:	f104 010c 	add.w	r1, r4, #12
 8008666:	0092      	lsls	r2, r2, #2
 8008668:	300c      	adds	r0, #12
 800866a:	f7fe fc94 	bl	8006f96 <memcpy>
 800866e:	4621      	mov	r1, r4
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff ffa5 	bl	80085c0 <_Bfree>
 8008676:	4644      	mov	r4, r8
 8008678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800867c:	3501      	adds	r5, #1
 800867e:	615e      	str	r6, [r3, #20]
 8008680:	6125      	str	r5, [r4, #16]
 8008682:	4620      	mov	r0, r4
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008688:	08009f43 	.word	0x08009f43
 800868c:	08009fb4 	.word	0x08009fb4

08008690 <__s2b>:
 8008690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008694:	460c      	mov	r4, r1
 8008696:	4615      	mov	r5, r2
 8008698:	461f      	mov	r7, r3
 800869a:	2209      	movs	r2, #9
 800869c:	3308      	adds	r3, #8
 800869e:	4606      	mov	r6, r0
 80086a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086a4:	2100      	movs	r1, #0
 80086a6:	2201      	movs	r2, #1
 80086a8:	429a      	cmp	r2, r3
 80086aa:	db09      	blt.n	80086c0 <__s2b+0x30>
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff ff47 	bl	8008540 <_Balloc>
 80086b2:	b940      	cbnz	r0, 80086c6 <__s2b+0x36>
 80086b4:	4602      	mov	r2, r0
 80086b6:	4b19      	ldr	r3, [pc, #100]	@ (800871c <__s2b+0x8c>)
 80086b8:	4819      	ldr	r0, [pc, #100]	@ (8008720 <__s2b+0x90>)
 80086ba:	21d3      	movs	r1, #211	@ 0xd3
 80086bc:	f7fe fc8a 	bl	8006fd4 <__assert_func>
 80086c0:	0052      	lsls	r2, r2, #1
 80086c2:	3101      	adds	r1, #1
 80086c4:	e7f0      	b.n	80086a8 <__s2b+0x18>
 80086c6:	9b08      	ldr	r3, [sp, #32]
 80086c8:	6143      	str	r3, [r0, #20]
 80086ca:	2d09      	cmp	r5, #9
 80086cc:	f04f 0301 	mov.w	r3, #1
 80086d0:	6103      	str	r3, [r0, #16]
 80086d2:	dd16      	ble.n	8008702 <__s2b+0x72>
 80086d4:	f104 0909 	add.w	r9, r4, #9
 80086d8:	46c8      	mov	r8, r9
 80086da:	442c      	add	r4, r5
 80086dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086e0:	4601      	mov	r1, r0
 80086e2:	3b30      	subs	r3, #48	@ 0x30
 80086e4:	220a      	movs	r2, #10
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7ff ff8c 	bl	8008604 <__multadd>
 80086ec:	45a0      	cmp	r8, r4
 80086ee:	d1f5      	bne.n	80086dc <__s2b+0x4c>
 80086f0:	f1a5 0408 	sub.w	r4, r5, #8
 80086f4:	444c      	add	r4, r9
 80086f6:	1b2d      	subs	r5, r5, r4
 80086f8:	1963      	adds	r3, r4, r5
 80086fa:	42bb      	cmp	r3, r7
 80086fc:	db04      	blt.n	8008708 <__s2b+0x78>
 80086fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008702:	340a      	adds	r4, #10
 8008704:	2509      	movs	r5, #9
 8008706:	e7f6      	b.n	80086f6 <__s2b+0x66>
 8008708:	f814 3b01 	ldrb.w	r3, [r4], #1
 800870c:	4601      	mov	r1, r0
 800870e:	3b30      	subs	r3, #48	@ 0x30
 8008710:	220a      	movs	r2, #10
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff ff76 	bl	8008604 <__multadd>
 8008718:	e7ee      	b.n	80086f8 <__s2b+0x68>
 800871a:	bf00      	nop
 800871c:	08009f43 	.word	0x08009f43
 8008720:	08009fb4 	.word	0x08009fb4

08008724 <__hi0bits>:
 8008724:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008728:	4603      	mov	r3, r0
 800872a:	bf36      	itet	cc
 800872c:	0403      	lslcc	r3, r0, #16
 800872e:	2000      	movcs	r0, #0
 8008730:	2010      	movcc	r0, #16
 8008732:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008736:	bf3c      	itt	cc
 8008738:	021b      	lslcc	r3, r3, #8
 800873a:	3008      	addcc	r0, #8
 800873c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008740:	bf3c      	itt	cc
 8008742:	011b      	lslcc	r3, r3, #4
 8008744:	3004      	addcc	r0, #4
 8008746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800874a:	bf3c      	itt	cc
 800874c:	009b      	lslcc	r3, r3, #2
 800874e:	3002      	addcc	r0, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	db05      	blt.n	8008760 <__hi0bits+0x3c>
 8008754:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008758:	f100 0001 	add.w	r0, r0, #1
 800875c:	bf08      	it	eq
 800875e:	2020      	moveq	r0, #32
 8008760:	4770      	bx	lr

08008762 <__lo0bits>:
 8008762:	6803      	ldr	r3, [r0, #0]
 8008764:	4602      	mov	r2, r0
 8008766:	f013 0007 	ands.w	r0, r3, #7
 800876a:	d00b      	beq.n	8008784 <__lo0bits+0x22>
 800876c:	07d9      	lsls	r1, r3, #31
 800876e:	d421      	bmi.n	80087b4 <__lo0bits+0x52>
 8008770:	0798      	lsls	r0, r3, #30
 8008772:	bf49      	itett	mi
 8008774:	085b      	lsrmi	r3, r3, #1
 8008776:	089b      	lsrpl	r3, r3, #2
 8008778:	2001      	movmi	r0, #1
 800877a:	6013      	strmi	r3, [r2, #0]
 800877c:	bf5c      	itt	pl
 800877e:	6013      	strpl	r3, [r2, #0]
 8008780:	2002      	movpl	r0, #2
 8008782:	4770      	bx	lr
 8008784:	b299      	uxth	r1, r3
 8008786:	b909      	cbnz	r1, 800878c <__lo0bits+0x2a>
 8008788:	0c1b      	lsrs	r3, r3, #16
 800878a:	2010      	movs	r0, #16
 800878c:	b2d9      	uxtb	r1, r3
 800878e:	b909      	cbnz	r1, 8008794 <__lo0bits+0x32>
 8008790:	3008      	adds	r0, #8
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	0719      	lsls	r1, r3, #28
 8008796:	bf04      	itt	eq
 8008798:	091b      	lsreq	r3, r3, #4
 800879a:	3004      	addeq	r0, #4
 800879c:	0799      	lsls	r1, r3, #30
 800879e:	bf04      	itt	eq
 80087a0:	089b      	lsreq	r3, r3, #2
 80087a2:	3002      	addeq	r0, #2
 80087a4:	07d9      	lsls	r1, r3, #31
 80087a6:	d403      	bmi.n	80087b0 <__lo0bits+0x4e>
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	f100 0001 	add.w	r0, r0, #1
 80087ae:	d003      	beq.n	80087b8 <__lo0bits+0x56>
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	4770      	bx	lr
 80087b4:	2000      	movs	r0, #0
 80087b6:	4770      	bx	lr
 80087b8:	2020      	movs	r0, #32
 80087ba:	4770      	bx	lr

080087bc <__i2b>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	460c      	mov	r4, r1
 80087c0:	2101      	movs	r1, #1
 80087c2:	f7ff febd 	bl	8008540 <_Balloc>
 80087c6:	4602      	mov	r2, r0
 80087c8:	b928      	cbnz	r0, 80087d6 <__i2b+0x1a>
 80087ca:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <__i2b+0x24>)
 80087cc:	4805      	ldr	r0, [pc, #20]	@ (80087e4 <__i2b+0x28>)
 80087ce:	f240 1145 	movw	r1, #325	@ 0x145
 80087d2:	f7fe fbff 	bl	8006fd4 <__assert_func>
 80087d6:	2301      	movs	r3, #1
 80087d8:	6144      	str	r4, [r0, #20]
 80087da:	6103      	str	r3, [r0, #16]
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	bf00      	nop
 80087e0:	08009f43 	.word	0x08009f43
 80087e4:	08009fb4 	.word	0x08009fb4

080087e8 <__multiply>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	4614      	mov	r4, r2
 80087ee:	690a      	ldr	r2, [r1, #16]
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	bfa8      	it	ge
 80087f6:	4623      	movge	r3, r4
 80087f8:	460f      	mov	r7, r1
 80087fa:	bfa4      	itt	ge
 80087fc:	460c      	movge	r4, r1
 80087fe:	461f      	movge	r7, r3
 8008800:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008804:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	6861      	ldr	r1, [r4, #4]
 800880c:	eb0a 0609 	add.w	r6, sl, r9
 8008810:	42b3      	cmp	r3, r6
 8008812:	b085      	sub	sp, #20
 8008814:	bfb8      	it	lt
 8008816:	3101      	addlt	r1, #1
 8008818:	f7ff fe92 	bl	8008540 <_Balloc>
 800881c:	b930      	cbnz	r0, 800882c <__multiply+0x44>
 800881e:	4602      	mov	r2, r0
 8008820:	4b44      	ldr	r3, [pc, #272]	@ (8008934 <__multiply+0x14c>)
 8008822:	4845      	ldr	r0, [pc, #276]	@ (8008938 <__multiply+0x150>)
 8008824:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008828:	f7fe fbd4 	bl	8006fd4 <__assert_func>
 800882c:	f100 0514 	add.w	r5, r0, #20
 8008830:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008834:	462b      	mov	r3, r5
 8008836:	2200      	movs	r2, #0
 8008838:	4543      	cmp	r3, r8
 800883a:	d321      	bcc.n	8008880 <__multiply+0x98>
 800883c:	f107 0114 	add.w	r1, r7, #20
 8008840:	f104 0214 	add.w	r2, r4, #20
 8008844:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008848:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800884c:	9302      	str	r3, [sp, #8]
 800884e:	1b13      	subs	r3, r2, r4
 8008850:	3b15      	subs	r3, #21
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	3304      	adds	r3, #4
 8008858:	f104 0715 	add.w	r7, r4, #21
 800885c:	42ba      	cmp	r2, r7
 800885e:	bf38      	it	cc
 8008860:	2304      	movcc	r3, #4
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	9103      	str	r1, [sp, #12]
 8008868:	428b      	cmp	r3, r1
 800886a:	d80c      	bhi.n	8008886 <__multiply+0x9e>
 800886c:	2e00      	cmp	r6, #0
 800886e:	dd03      	ble.n	8008878 <__multiply+0x90>
 8008870:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008874:	2b00      	cmp	r3, #0
 8008876:	d05b      	beq.n	8008930 <__multiply+0x148>
 8008878:	6106      	str	r6, [r0, #16]
 800887a:	b005      	add	sp, #20
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	f843 2b04 	str.w	r2, [r3], #4
 8008884:	e7d8      	b.n	8008838 <__multiply+0x50>
 8008886:	f8b1 a000 	ldrh.w	sl, [r1]
 800888a:	f1ba 0f00 	cmp.w	sl, #0
 800888e:	d024      	beq.n	80088da <__multiply+0xf2>
 8008890:	f104 0e14 	add.w	lr, r4, #20
 8008894:	46a9      	mov	r9, r5
 8008896:	f04f 0c00 	mov.w	ip, #0
 800889a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800889e:	f8d9 3000 	ldr.w	r3, [r9]
 80088a2:	fa1f fb87 	uxth.w	fp, r7
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80088ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088b0:	f8d9 7000 	ldr.w	r7, [r9]
 80088b4:	4463      	add	r3, ip
 80088b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80088be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088c8:	4572      	cmp	r2, lr
 80088ca:	f849 3b04 	str.w	r3, [r9], #4
 80088ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088d2:	d8e2      	bhi.n	800889a <__multiply+0xb2>
 80088d4:	9b01      	ldr	r3, [sp, #4]
 80088d6:	f845 c003 	str.w	ip, [r5, r3]
 80088da:	9b03      	ldr	r3, [sp, #12]
 80088dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088e0:	3104      	adds	r1, #4
 80088e2:	f1b9 0f00 	cmp.w	r9, #0
 80088e6:	d021      	beq.n	800892c <__multiply+0x144>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	f104 0c14 	add.w	ip, r4, #20
 80088ee:	46ae      	mov	lr, r5
 80088f0:	f04f 0a00 	mov.w	sl, #0
 80088f4:	f8bc b000 	ldrh.w	fp, [ip]
 80088f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80088fc:	fb09 770b 	mla	r7, r9, fp, r7
 8008900:	4457      	add	r7, sl
 8008902:	b29b      	uxth	r3, r3
 8008904:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008908:	f84e 3b04 	str.w	r3, [lr], #4
 800890c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008910:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008914:	f8be 3000 	ldrh.w	r3, [lr]
 8008918:	fb09 330a 	mla	r3, r9, sl, r3
 800891c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008920:	4562      	cmp	r2, ip
 8008922:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008926:	d8e5      	bhi.n	80088f4 <__multiply+0x10c>
 8008928:	9f01      	ldr	r7, [sp, #4]
 800892a:	51eb      	str	r3, [r5, r7]
 800892c:	3504      	adds	r5, #4
 800892e:	e799      	b.n	8008864 <__multiply+0x7c>
 8008930:	3e01      	subs	r6, #1
 8008932:	e79b      	b.n	800886c <__multiply+0x84>
 8008934:	08009f43 	.word	0x08009f43
 8008938:	08009fb4 	.word	0x08009fb4

0800893c <__pow5mult>:
 800893c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008940:	4615      	mov	r5, r2
 8008942:	f012 0203 	ands.w	r2, r2, #3
 8008946:	4607      	mov	r7, r0
 8008948:	460e      	mov	r6, r1
 800894a:	d007      	beq.n	800895c <__pow5mult+0x20>
 800894c:	4c25      	ldr	r4, [pc, #148]	@ (80089e4 <__pow5mult+0xa8>)
 800894e:	3a01      	subs	r2, #1
 8008950:	2300      	movs	r3, #0
 8008952:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008956:	f7ff fe55 	bl	8008604 <__multadd>
 800895a:	4606      	mov	r6, r0
 800895c:	10ad      	asrs	r5, r5, #2
 800895e:	d03d      	beq.n	80089dc <__pow5mult+0xa0>
 8008960:	69fc      	ldr	r4, [r7, #28]
 8008962:	b97c      	cbnz	r4, 8008984 <__pow5mult+0x48>
 8008964:	2010      	movs	r0, #16
 8008966:	f7ff fd23 	bl	80083b0 <malloc>
 800896a:	4602      	mov	r2, r0
 800896c:	61f8      	str	r0, [r7, #28]
 800896e:	b928      	cbnz	r0, 800897c <__pow5mult+0x40>
 8008970:	4b1d      	ldr	r3, [pc, #116]	@ (80089e8 <__pow5mult+0xac>)
 8008972:	481e      	ldr	r0, [pc, #120]	@ (80089ec <__pow5mult+0xb0>)
 8008974:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008978:	f7fe fb2c 	bl	8006fd4 <__assert_func>
 800897c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008980:	6004      	str	r4, [r0, #0]
 8008982:	60c4      	str	r4, [r0, #12]
 8008984:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008988:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800898c:	b94c      	cbnz	r4, 80089a2 <__pow5mult+0x66>
 800898e:	f240 2171 	movw	r1, #625	@ 0x271
 8008992:	4638      	mov	r0, r7
 8008994:	f7ff ff12 	bl	80087bc <__i2b>
 8008998:	2300      	movs	r3, #0
 800899a:	f8c8 0008 	str.w	r0, [r8, #8]
 800899e:	4604      	mov	r4, r0
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	07eb      	lsls	r3, r5, #31
 80089a8:	d50a      	bpl.n	80089c0 <__pow5mult+0x84>
 80089aa:	4631      	mov	r1, r6
 80089ac:	4622      	mov	r2, r4
 80089ae:	4638      	mov	r0, r7
 80089b0:	f7ff ff1a 	bl	80087e8 <__multiply>
 80089b4:	4631      	mov	r1, r6
 80089b6:	4680      	mov	r8, r0
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff fe01 	bl	80085c0 <_Bfree>
 80089be:	4646      	mov	r6, r8
 80089c0:	106d      	asrs	r5, r5, #1
 80089c2:	d00b      	beq.n	80089dc <__pow5mult+0xa0>
 80089c4:	6820      	ldr	r0, [r4, #0]
 80089c6:	b938      	cbnz	r0, 80089d8 <__pow5mult+0x9c>
 80089c8:	4622      	mov	r2, r4
 80089ca:	4621      	mov	r1, r4
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff ff0b 	bl	80087e8 <__multiply>
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	f8c0 9000 	str.w	r9, [r0]
 80089d8:	4604      	mov	r4, r0
 80089da:	e7e4      	b.n	80089a6 <__pow5mult+0x6a>
 80089dc:	4630      	mov	r0, r6
 80089de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e2:	bf00      	nop
 80089e4:	0800a010 	.word	0x0800a010
 80089e8:	08009e29 	.word	0x08009e29
 80089ec:	08009fb4 	.word	0x08009fb4

080089f0 <__lshift>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	6849      	ldr	r1, [r1, #4]
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	4607      	mov	r7, r0
 8008a02:	4691      	mov	r9, r2
 8008a04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a08:	f108 0601 	add.w	r6, r8, #1
 8008a0c:	42b3      	cmp	r3, r6
 8008a0e:	db0b      	blt.n	8008a28 <__lshift+0x38>
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7ff fd95 	bl	8008540 <_Balloc>
 8008a16:	4605      	mov	r5, r0
 8008a18:	b948      	cbnz	r0, 8008a2e <__lshift+0x3e>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	4b28      	ldr	r3, [pc, #160]	@ (8008ac0 <__lshift+0xd0>)
 8008a1e:	4829      	ldr	r0, [pc, #164]	@ (8008ac4 <__lshift+0xd4>)
 8008a20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a24:	f7fe fad6 	bl	8006fd4 <__assert_func>
 8008a28:	3101      	adds	r1, #1
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	e7ee      	b.n	8008a0c <__lshift+0x1c>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f100 0114 	add.w	r1, r0, #20
 8008a34:	f100 0210 	add.w	r2, r0, #16
 8008a38:	4618      	mov	r0, r3
 8008a3a:	4553      	cmp	r3, sl
 8008a3c:	db33      	blt.n	8008aa6 <__lshift+0xb6>
 8008a3e:	6920      	ldr	r0, [r4, #16]
 8008a40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a44:	f104 0314 	add.w	r3, r4, #20
 8008a48:	f019 091f 	ands.w	r9, r9, #31
 8008a4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a54:	d02b      	beq.n	8008aae <__lshift+0xbe>
 8008a56:	f1c9 0e20 	rsb	lr, r9, #32
 8008a5a:	468a      	mov	sl, r1
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	fa00 f009 	lsl.w	r0, r0, r9
 8008a64:	4310      	orrs	r0, r2
 8008a66:	f84a 0b04 	str.w	r0, [sl], #4
 8008a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6e:	459c      	cmp	ip, r3
 8008a70:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a74:	d8f3      	bhi.n	8008a5e <__lshift+0x6e>
 8008a76:	ebac 0304 	sub.w	r3, ip, r4
 8008a7a:	3b15      	subs	r3, #21
 8008a7c:	f023 0303 	bic.w	r3, r3, #3
 8008a80:	3304      	adds	r3, #4
 8008a82:	f104 0015 	add.w	r0, r4, #21
 8008a86:	4584      	cmp	ip, r0
 8008a88:	bf38      	it	cc
 8008a8a:	2304      	movcc	r3, #4
 8008a8c:	50ca      	str	r2, [r1, r3]
 8008a8e:	b10a      	cbz	r2, 8008a94 <__lshift+0xa4>
 8008a90:	f108 0602 	add.w	r6, r8, #2
 8008a94:	3e01      	subs	r6, #1
 8008a96:	4638      	mov	r0, r7
 8008a98:	612e      	str	r6, [r5, #16]
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f7ff fd90 	bl	80085c0 <_Bfree>
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aaa:	3301      	adds	r3, #1
 8008aac:	e7c5      	b.n	8008a3a <__lshift+0x4a>
 8008aae:	3904      	subs	r1, #4
 8008ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ab8:	459c      	cmp	ip, r3
 8008aba:	d8f9      	bhi.n	8008ab0 <__lshift+0xc0>
 8008abc:	e7ea      	b.n	8008a94 <__lshift+0xa4>
 8008abe:	bf00      	nop
 8008ac0:	08009f43 	.word	0x08009f43
 8008ac4:	08009fb4 	.word	0x08009fb4

08008ac8 <__mcmp>:
 8008ac8:	690a      	ldr	r2, [r1, #16]
 8008aca:	4603      	mov	r3, r0
 8008acc:	6900      	ldr	r0, [r0, #16]
 8008ace:	1a80      	subs	r0, r0, r2
 8008ad0:	b530      	push	{r4, r5, lr}
 8008ad2:	d10e      	bne.n	8008af2 <__mcmp+0x2a>
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	3114      	adds	r1, #20
 8008ad8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008adc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ae0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ae4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ae8:	4295      	cmp	r5, r2
 8008aea:	d003      	beq.n	8008af4 <__mcmp+0x2c>
 8008aec:	d205      	bcs.n	8008afa <__mcmp+0x32>
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295
 8008af2:	bd30      	pop	{r4, r5, pc}
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d3f3      	bcc.n	8008ae0 <__mcmp+0x18>
 8008af8:	e7fb      	b.n	8008af2 <__mcmp+0x2a>
 8008afa:	2001      	movs	r0, #1
 8008afc:	e7f9      	b.n	8008af2 <__mcmp+0x2a>
	...

08008b00 <__mdiff>:
 8008b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	4689      	mov	r9, r1
 8008b06:	4606      	mov	r6, r0
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4648      	mov	r0, r9
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	f7ff ffdb 	bl	8008ac8 <__mcmp>
 8008b12:	1e05      	subs	r5, r0, #0
 8008b14:	d112      	bne.n	8008b3c <__mdiff+0x3c>
 8008b16:	4629      	mov	r1, r5
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff fd11 	bl	8008540 <_Balloc>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	b928      	cbnz	r0, 8008b2e <__mdiff+0x2e>
 8008b22:	4b3f      	ldr	r3, [pc, #252]	@ (8008c20 <__mdiff+0x120>)
 8008b24:	f240 2137 	movw	r1, #567	@ 0x237
 8008b28:	483e      	ldr	r0, [pc, #248]	@ (8008c24 <__mdiff+0x124>)
 8008b2a:	f7fe fa53 	bl	8006fd4 <__assert_func>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b34:	4610      	mov	r0, r2
 8008b36:	b003      	add	sp, #12
 8008b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3c:	bfbc      	itt	lt
 8008b3e:	464b      	movlt	r3, r9
 8008b40:	46a1      	movlt	r9, r4
 8008b42:	4630      	mov	r0, r6
 8008b44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b48:	bfba      	itte	lt
 8008b4a:	461c      	movlt	r4, r3
 8008b4c:	2501      	movlt	r5, #1
 8008b4e:	2500      	movge	r5, #0
 8008b50:	f7ff fcf6 	bl	8008540 <_Balloc>
 8008b54:	4602      	mov	r2, r0
 8008b56:	b918      	cbnz	r0, 8008b60 <__mdiff+0x60>
 8008b58:	4b31      	ldr	r3, [pc, #196]	@ (8008c20 <__mdiff+0x120>)
 8008b5a:	f240 2145 	movw	r1, #581	@ 0x245
 8008b5e:	e7e3      	b.n	8008b28 <__mdiff+0x28>
 8008b60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b64:	6926      	ldr	r6, [r4, #16]
 8008b66:	60c5      	str	r5, [r0, #12]
 8008b68:	f109 0310 	add.w	r3, r9, #16
 8008b6c:	f109 0514 	add.w	r5, r9, #20
 8008b70:	f104 0e14 	add.w	lr, r4, #20
 8008b74:	f100 0b14 	add.w	fp, r0, #20
 8008b78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	46d9      	mov	r9, fp
 8008b84:	f04f 0c00 	mov.w	ip, #0
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	fa1f f38a 	uxth.w	r3, sl
 8008b98:	4619      	mov	r1, r3
 8008b9a:	b283      	uxth	r3, r0
 8008b9c:	1acb      	subs	r3, r1, r3
 8008b9e:	0c00      	lsrs	r0, r0, #16
 8008ba0:	4463      	add	r3, ip
 8008ba2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ba6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bb0:	4576      	cmp	r6, lr
 8008bb2:	f849 3b04 	str.w	r3, [r9], #4
 8008bb6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bba:	d8e5      	bhi.n	8008b88 <__mdiff+0x88>
 8008bbc:	1b33      	subs	r3, r6, r4
 8008bbe:	3b15      	subs	r3, #21
 8008bc0:	f023 0303 	bic.w	r3, r3, #3
 8008bc4:	3415      	adds	r4, #21
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	bf38      	it	cc
 8008bcc:	2304      	movcc	r3, #4
 8008bce:	441d      	add	r5, r3
 8008bd0:	445b      	add	r3, fp
 8008bd2:	461e      	mov	r6, r3
 8008bd4:	462c      	mov	r4, r5
 8008bd6:	4544      	cmp	r4, r8
 8008bd8:	d30e      	bcc.n	8008bf8 <__mdiff+0xf8>
 8008bda:	f108 0103 	add.w	r1, r8, #3
 8008bde:	1b49      	subs	r1, r1, r5
 8008be0:	f021 0103 	bic.w	r1, r1, #3
 8008be4:	3d03      	subs	r5, #3
 8008be6:	45a8      	cmp	r8, r5
 8008be8:	bf38      	it	cc
 8008bea:	2100      	movcc	r1, #0
 8008bec:	440b      	add	r3, r1
 8008bee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bf2:	b191      	cbz	r1, 8008c1a <__mdiff+0x11a>
 8008bf4:	6117      	str	r7, [r2, #16]
 8008bf6:	e79d      	b.n	8008b34 <__mdiff+0x34>
 8008bf8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008bfc:	46e6      	mov	lr, ip
 8008bfe:	0c08      	lsrs	r0, r1, #16
 8008c00:	fa1c fc81 	uxtah	ip, ip, r1
 8008c04:	4471      	add	r1, lr
 8008c06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c0a:	b289      	uxth	r1, r1
 8008c0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c10:	f846 1b04 	str.w	r1, [r6], #4
 8008c14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c18:	e7dd      	b.n	8008bd6 <__mdiff+0xd6>
 8008c1a:	3f01      	subs	r7, #1
 8008c1c:	e7e7      	b.n	8008bee <__mdiff+0xee>
 8008c1e:	bf00      	nop
 8008c20:	08009f43 	.word	0x08009f43
 8008c24:	08009fb4 	.word	0x08009fb4

08008c28 <__ulp>:
 8008c28:	b082      	sub	sp, #8
 8008c2a:	ed8d 0b00 	vstr	d0, [sp]
 8008c2e:	9a01      	ldr	r2, [sp, #4]
 8008c30:	4b0f      	ldr	r3, [pc, #60]	@ (8008c70 <__ulp+0x48>)
 8008c32:	4013      	ands	r3, r2
 8008c34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc08      	bgt.n	8008c4e <__ulp+0x26>
 8008c3c:	425b      	negs	r3, r3
 8008c3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008c42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c46:	da04      	bge.n	8008c52 <__ulp+0x2a>
 8008c48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c4c:	4113      	asrs	r3, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	e008      	b.n	8008c64 <__ulp+0x3c>
 8008c52:	f1a2 0314 	sub.w	r3, r2, #20
 8008c56:	2b1e      	cmp	r3, #30
 8008c58:	bfda      	itte	le
 8008c5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008c5e:	40da      	lsrle	r2, r3
 8008c60:	2201      	movgt	r2, #1
 8008c62:	2300      	movs	r3, #0
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	ec41 0b10 	vmov	d0, r0, r1
 8008c6c:	b002      	add	sp, #8
 8008c6e:	4770      	bx	lr
 8008c70:	7ff00000 	.word	0x7ff00000

08008c74 <__b2d>:
 8008c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c78:	6906      	ldr	r6, [r0, #16]
 8008c7a:	f100 0814 	add.w	r8, r0, #20
 8008c7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c82:	1f37      	subs	r7, r6, #4
 8008c84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f7ff fd4b 	bl	8008724 <__hi0bits>
 8008c8e:	f1c0 0320 	rsb	r3, r0, #32
 8008c92:	280a      	cmp	r0, #10
 8008c94:	600b      	str	r3, [r1, #0]
 8008c96:	491b      	ldr	r1, [pc, #108]	@ (8008d04 <__b2d+0x90>)
 8008c98:	dc15      	bgt.n	8008cc6 <__b2d+0x52>
 8008c9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ca2:	45b8      	cmp	r8, r7
 8008ca4:	ea43 0501 	orr.w	r5, r3, r1
 8008ca8:	bf34      	ite	cc
 8008caa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cae:	2300      	movcs	r3, #0
 8008cb0:	3015      	adds	r0, #21
 8008cb2:	fa02 f000 	lsl.w	r0, r2, r0
 8008cb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008cba:	4303      	orrs	r3, r0
 8008cbc:	461c      	mov	r4, r3
 8008cbe:	ec45 4b10 	vmov	d0, r4, r5
 8008cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc6:	45b8      	cmp	r8, r7
 8008cc8:	bf3a      	itte	cc
 8008cca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cce:	f1a6 0708 	subcc.w	r7, r6, #8
 8008cd2:	2300      	movcs	r3, #0
 8008cd4:	380b      	subs	r0, #11
 8008cd6:	d012      	beq.n	8008cfe <__b2d+0x8a>
 8008cd8:	f1c0 0120 	rsb	r1, r0, #32
 8008cdc:	fa23 f401 	lsr.w	r4, r3, r1
 8008ce0:	4082      	lsls	r2, r0
 8008ce2:	4322      	orrs	r2, r4
 8008ce4:	4547      	cmp	r7, r8
 8008ce6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008cea:	bf8c      	ite	hi
 8008cec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008cf0:	2200      	movls	r2, #0
 8008cf2:	4083      	lsls	r3, r0
 8008cf4:	40ca      	lsrs	r2, r1
 8008cf6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	e7de      	b.n	8008cbc <__b2d+0x48>
 8008cfe:	ea42 0501 	orr.w	r5, r2, r1
 8008d02:	e7db      	b.n	8008cbc <__b2d+0x48>
 8008d04:	3ff00000 	.word	0x3ff00000

08008d08 <__d2b>:
 8008d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	2101      	movs	r1, #1
 8008d10:	ec59 8b10 	vmov	r8, r9, d0
 8008d14:	4616      	mov	r6, r2
 8008d16:	f7ff fc13 	bl	8008540 <_Balloc>
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	b930      	cbnz	r0, 8008d2c <__d2b+0x24>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4b23      	ldr	r3, [pc, #140]	@ (8008db0 <__d2b+0xa8>)
 8008d22:	4824      	ldr	r0, [pc, #144]	@ (8008db4 <__d2b+0xac>)
 8008d24:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d28:	f7fe f954 	bl	8006fd4 <__assert_func>
 8008d2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d34:	b10d      	cbz	r5, 8008d3a <__d2b+0x32>
 8008d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d40:	d023      	beq.n	8008d8a <__d2b+0x82>
 8008d42:	4668      	mov	r0, sp
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	f7ff fd0c 	bl	8008762 <__lo0bits>
 8008d4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d4e:	b1d0      	cbz	r0, 8008d86 <__d2b+0x7e>
 8008d50:	f1c0 0320 	rsb	r3, r0, #32
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	40c2      	lsrs	r2, r0
 8008d5c:	6163      	str	r3, [r4, #20]
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	61a3      	str	r3, [r4, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf0c      	ite	eq
 8008d68:	2201      	moveq	r2, #1
 8008d6a:	2202      	movne	r2, #2
 8008d6c:	6122      	str	r2, [r4, #16]
 8008d6e:	b1a5      	cbz	r5, 8008d9a <__d2b+0x92>
 8008d70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d74:	4405      	add	r5, r0
 8008d76:	603d      	str	r5, [r7, #0]
 8008d78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d7c:	6030      	str	r0, [r6, #0]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	b003      	add	sp, #12
 8008d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d86:	6161      	str	r1, [r4, #20]
 8008d88:	e7ea      	b.n	8008d60 <__d2b+0x58>
 8008d8a:	a801      	add	r0, sp, #4
 8008d8c:	f7ff fce9 	bl	8008762 <__lo0bits>
 8008d90:	9b01      	ldr	r3, [sp, #4]
 8008d92:	6163      	str	r3, [r4, #20]
 8008d94:	3020      	adds	r0, #32
 8008d96:	2201      	movs	r2, #1
 8008d98:	e7e8      	b.n	8008d6c <__d2b+0x64>
 8008d9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008da2:	6038      	str	r0, [r7, #0]
 8008da4:	6918      	ldr	r0, [r3, #16]
 8008da6:	f7ff fcbd 	bl	8008724 <__hi0bits>
 8008daa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dae:	e7e5      	b.n	8008d7c <__d2b+0x74>
 8008db0:	08009f43 	.word	0x08009f43
 8008db4:	08009fb4 	.word	0x08009fb4

08008db8 <__ratio>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	e9cd 1000 	strd	r1, r0, [sp]
 8008dc2:	a902      	add	r1, sp, #8
 8008dc4:	f7ff ff56 	bl	8008c74 <__b2d>
 8008dc8:	9800      	ldr	r0, [sp, #0]
 8008dca:	a903      	add	r1, sp, #12
 8008dcc:	ec55 4b10 	vmov	r4, r5, d0
 8008dd0:	f7ff ff50 	bl	8008c74 <__b2d>
 8008dd4:	9b01      	ldr	r3, [sp, #4]
 8008dd6:	6919      	ldr	r1, [r3, #16]
 8008dd8:	9b00      	ldr	r3, [sp, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	1ac9      	subs	r1, r1, r3
 8008dde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	ec5b ab10 	vmov	sl, fp, d0
 8008de8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bfce      	itee	gt
 8008df0:	462a      	movgt	r2, r5
 8008df2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008df6:	465a      	movle	r2, fp
 8008df8:	462f      	mov	r7, r5
 8008dfa:	46d9      	mov	r9, fp
 8008dfc:	bfcc      	ite	gt
 8008dfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008e06:	464b      	mov	r3, r9
 8008e08:	4652      	mov	r2, sl
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 fd3d 	bl	800088c <__aeabi_ddiv>
 8008e12:	ec41 0b10 	vmov	d0, r0, r1
 8008e16:	b005      	add	sp, #20
 8008e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e1c <__copybits>:
 8008e1c:	3901      	subs	r1, #1
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	1149      	asrs	r1, r1, #5
 8008e22:	6914      	ldr	r4, [r2, #16]
 8008e24:	3101      	adds	r1, #1
 8008e26:	f102 0314 	add.w	r3, r2, #20
 8008e2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e32:	1f05      	subs	r5, r0, #4
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	d30c      	bcc.n	8008e52 <__copybits+0x36>
 8008e38:	1aa3      	subs	r3, r4, r2
 8008e3a:	3b11      	subs	r3, #17
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	3211      	adds	r2, #17
 8008e42:	42a2      	cmp	r2, r4
 8008e44:	bf88      	it	hi
 8008e46:	2300      	movhi	r3, #0
 8008e48:	4418      	add	r0, r3
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4288      	cmp	r0, r1
 8008e4e:	d305      	bcc.n	8008e5c <__copybits+0x40>
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
 8008e52:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e56:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e5a:	e7eb      	b.n	8008e34 <__copybits+0x18>
 8008e5c:	f840 3b04 	str.w	r3, [r0], #4
 8008e60:	e7f4      	b.n	8008e4c <__copybits+0x30>

08008e62 <__any_on>:
 8008e62:	f100 0214 	add.w	r2, r0, #20
 8008e66:	6900      	ldr	r0, [r0, #16]
 8008e68:	114b      	asrs	r3, r1, #5
 8008e6a:	4298      	cmp	r0, r3
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	db11      	blt.n	8008e94 <__any_on+0x32>
 8008e70:	dd0a      	ble.n	8008e88 <__any_on+0x26>
 8008e72:	f011 011f 	ands.w	r1, r1, #31
 8008e76:	d007      	beq.n	8008e88 <__any_on+0x26>
 8008e78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e7c:	fa24 f001 	lsr.w	r0, r4, r1
 8008e80:	fa00 f101 	lsl.w	r1, r0, r1
 8008e84:	428c      	cmp	r4, r1
 8008e86:	d10b      	bne.n	8008ea0 <__any_on+0x3e>
 8008e88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d803      	bhi.n	8008e98 <__any_on+0x36>
 8008e90:	2000      	movs	r0, #0
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	4603      	mov	r3, r0
 8008e96:	e7f7      	b.n	8008e88 <__any_on+0x26>
 8008e98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	d0f5      	beq.n	8008e8c <__any_on+0x2a>
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	e7f6      	b.n	8008e92 <__any_on+0x30>

08008ea4 <_strtol_l.constprop.0>:
 8008ea4:	2b24      	cmp	r3, #36	@ 0x24
 8008ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eaa:	4686      	mov	lr, r0
 8008eac:	4690      	mov	r8, r2
 8008eae:	d801      	bhi.n	8008eb4 <_strtol_l.constprop.0+0x10>
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d106      	bne.n	8008ec2 <_strtol_l.constprop.0+0x1e>
 8008eb4:	f7fe f842 	bl	8006f3c <__errno>
 8008eb8:	2316      	movs	r3, #22
 8008eba:	6003      	str	r3, [r0, #0]
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec2:	4834      	ldr	r0, [pc, #208]	@ (8008f94 <_strtol_l.constprop.0+0xf0>)
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	462a      	mov	r2, r5
 8008ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ecc:	5d06      	ldrb	r6, [r0, r4]
 8008ece:	f016 0608 	ands.w	r6, r6, #8
 8008ed2:	d1f8      	bne.n	8008ec6 <_strtol_l.constprop.0+0x22>
 8008ed4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ed6:	d12d      	bne.n	8008f34 <_strtol_l.constprop.0+0x90>
 8008ed8:	782c      	ldrb	r4, [r5, #0]
 8008eda:	2601      	movs	r6, #1
 8008edc:	1c95      	adds	r5, r2, #2
 8008ede:	f033 0210 	bics.w	r2, r3, #16
 8008ee2:	d109      	bne.n	8008ef8 <_strtol_l.constprop.0+0x54>
 8008ee4:	2c30      	cmp	r4, #48	@ 0x30
 8008ee6:	d12a      	bne.n	8008f3e <_strtol_l.constprop.0+0x9a>
 8008ee8:	782a      	ldrb	r2, [r5, #0]
 8008eea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008eee:	2a58      	cmp	r2, #88	@ 0x58
 8008ef0:	d125      	bne.n	8008f3e <_strtol_l.constprop.0+0x9a>
 8008ef2:	786c      	ldrb	r4, [r5, #1]
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	3502      	adds	r5, #2
 8008ef8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008efc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f00:	2200      	movs	r2, #0
 8008f02:	fbbc f9f3 	udiv	r9, ip, r3
 8008f06:	4610      	mov	r0, r2
 8008f08:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008f10:	2f09      	cmp	r7, #9
 8008f12:	d81b      	bhi.n	8008f4c <_strtol_l.constprop.0+0xa8>
 8008f14:	463c      	mov	r4, r7
 8008f16:	42a3      	cmp	r3, r4
 8008f18:	dd27      	ble.n	8008f6a <_strtol_l.constprop.0+0xc6>
 8008f1a:	1c57      	adds	r7, r2, #1
 8008f1c:	d007      	beq.n	8008f2e <_strtol_l.constprop.0+0x8a>
 8008f1e:	4581      	cmp	r9, r0
 8008f20:	d320      	bcc.n	8008f64 <_strtol_l.constprop.0+0xc0>
 8008f22:	d101      	bne.n	8008f28 <_strtol_l.constprop.0+0x84>
 8008f24:	45a2      	cmp	sl, r4
 8008f26:	db1d      	blt.n	8008f64 <_strtol_l.constprop.0+0xc0>
 8008f28:	fb00 4003 	mla	r0, r0, r3, r4
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f32:	e7eb      	b.n	8008f0c <_strtol_l.constprop.0+0x68>
 8008f34:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f36:	bf04      	itt	eq
 8008f38:	782c      	ldrbeq	r4, [r5, #0]
 8008f3a:	1c95      	addeq	r5, r2, #2
 8008f3c:	e7cf      	b.n	8008ede <_strtol_l.constprop.0+0x3a>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1da      	bne.n	8008ef8 <_strtol_l.constprop.0+0x54>
 8008f42:	2c30      	cmp	r4, #48	@ 0x30
 8008f44:	bf0c      	ite	eq
 8008f46:	2308      	moveq	r3, #8
 8008f48:	230a      	movne	r3, #10
 8008f4a:	e7d5      	b.n	8008ef8 <_strtol_l.constprop.0+0x54>
 8008f4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f50:	2f19      	cmp	r7, #25
 8008f52:	d801      	bhi.n	8008f58 <_strtol_l.constprop.0+0xb4>
 8008f54:	3c37      	subs	r4, #55	@ 0x37
 8008f56:	e7de      	b.n	8008f16 <_strtol_l.constprop.0+0x72>
 8008f58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f5c:	2f19      	cmp	r7, #25
 8008f5e:	d804      	bhi.n	8008f6a <_strtol_l.constprop.0+0xc6>
 8008f60:	3c57      	subs	r4, #87	@ 0x57
 8008f62:	e7d8      	b.n	8008f16 <_strtol_l.constprop.0+0x72>
 8008f64:	f04f 32ff 	mov.w	r2, #4294967295
 8008f68:	e7e1      	b.n	8008f2e <_strtol_l.constprop.0+0x8a>
 8008f6a:	1c53      	adds	r3, r2, #1
 8008f6c:	d108      	bne.n	8008f80 <_strtol_l.constprop.0+0xdc>
 8008f6e:	2322      	movs	r3, #34	@ 0x22
 8008f70:	f8ce 3000 	str.w	r3, [lr]
 8008f74:	4660      	mov	r0, ip
 8008f76:	f1b8 0f00 	cmp.w	r8, #0
 8008f7a:	d0a0      	beq.n	8008ebe <_strtol_l.constprop.0+0x1a>
 8008f7c:	1e69      	subs	r1, r5, #1
 8008f7e:	e006      	b.n	8008f8e <_strtol_l.constprop.0+0xea>
 8008f80:	b106      	cbz	r6, 8008f84 <_strtol_l.constprop.0+0xe0>
 8008f82:	4240      	negs	r0, r0
 8008f84:	f1b8 0f00 	cmp.w	r8, #0
 8008f88:	d099      	beq.n	8008ebe <_strtol_l.constprop.0+0x1a>
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	d1f6      	bne.n	8008f7c <_strtol_l.constprop.0+0xd8>
 8008f8e:	f8c8 1000 	str.w	r1, [r8]
 8008f92:	e794      	b.n	8008ebe <_strtol_l.constprop.0+0x1a>
 8008f94:	0800a111 	.word	0x0800a111

08008f98 <_strtol_r>:
 8008f98:	f7ff bf84 	b.w	8008ea4 <_strtol_l.constprop.0>

08008f9c <__ascii_wctomb>:
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4608      	mov	r0, r1
 8008fa0:	b141      	cbz	r1, 8008fb4 <__ascii_wctomb+0x18>
 8008fa2:	2aff      	cmp	r2, #255	@ 0xff
 8008fa4:	d904      	bls.n	8008fb0 <__ascii_wctomb+0x14>
 8008fa6:	228a      	movs	r2, #138	@ 0x8a
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	f04f 30ff 	mov.w	r0, #4294967295
 8008fae:	4770      	bx	lr
 8008fb0:	700a      	strb	r2, [r1, #0]
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	4770      	bx	lr

08008fb6 <__ssputs_r>:
 8008fb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fba:	688e      	ldr	r6, [r1, #8]
 8008fbc:	461f      	mov	r7, r3
 8008fbe:	42be      	cmp	r6, r7
 8008fc0:	680b      	ldr	r3, [r1, #0]
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	4690      	mov	r8, r2
 8008fc8:	d82d      	bhi.n	8009026 <__ssputs_r+0x70>
 8008fca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fd2:	d026      	beq.n	8009022 <__ssputs_r+0x6c>
 8008fd4:	6965      	ldr	r5, [r4, #20]
 8008fd6:	6909      	ldr	r1, [r1, #16]
 8008fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fdc:	eba3 0901 	sub.w	r9, r3, r1
 8008fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fe4:	1c7b      	adds	r3, r7, #1
 8008fe6:	444b      	add	r3, r9
 8008fe8:	106d      	asrs	r5, r5, #1
 8008fea:	429d      	cmp	r5, r3
 8008fec:	bf38      	it	cc
 8008fee:	461d      	movcc	r5, r3
 8008ff0:	0553      	lsls	r3, r2, #21
 8008ff2:	d527      	bpl.n	8009044 <__ssputs_r+0x8e>
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7ff fa05 	bl	8008404 <_malloc_r>
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	b360      	cbz	r0, 8009058 <__ssputs_r+0xa2>
 8008ffe:	6921      	ldr	r1, [r4, #16]
 8009000:	464a      	mov	r2, r9
 8009002:	f7fd ffc8 	bl	8006f96 <memcpy>
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800900c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	6126      	str	r6, [r4, #16]
 8009014:	6165      	str	r5, [r4, #20]
 8009016:	444e      	add	r6, r9
 8009018:	eba5 0509 	sub.w	r5, r5, r9
 800901c:	6026      	str	r6, [r4, #0]
 800901e:	60a5      	str	r5, [r4, #8]
 8009020:	463e      	mov	r6, r7
 8009022:	42be      	cmp	r6, r7
 8009024:	d900      	bls.n	8009028 <__ssputs_r+0x72>
 8009026:	463e      	mov	r6, r7
 8009028:	6820      	ldr	r0, [r4, #0]
 800902a:	4632      	mov	r2, r6
 800902c:	4641      	mov	r1, r8
 800902e:	f000 f9d7 	bl	80093e0 <memmove>
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	1b9b      	subs	r3, r3, r6
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	4433      	add	r3, r6
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	2000      	movs	r0, #0
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	462a      	mov	r2, r5
 8009046:	f000 fa10 	bl	800946a <_realloc_r>
 800904a:	4606      	mov	r6, r0
 800904c:	2800      	cmp	r0, #0
 800904e:	d1e0      	bne.n	8009012 <__ssputs_r+0x5c>
 8009050:	6921      	ldr	r1, [r4, #16]
 8009052:	4650      	mov	r0, sl
 8009054:	f7fe fe28 	bl	8007ca8 <_free_r>
 8009058:	230c      	movs	r3, #12
 800905a:	f8ca 3000 	str.w	r3, [sl]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	f04f 30ff 	mov.w	r0, #4294967295
 800906a:	e7e9      	b.n	8009040 <__ssputs_r+0x8a>

0800906c <_svfiprintf_r>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	4698      	mov	r8, r3
 8009072:	898b      	ldrh	r3, [r1, #12]
 8009074:	061b      	lsls	r3, r3, #24
 8009076:	b09d      	sub	sp, #116	@ 0x74
 8009078:	4607      	mov	r7, r0
 800907a:	460d      	mov	r5, r1
 800907c:	4614      	mov	r4, r2
 800907e:	d510      	bpl.n	80090a2 <_svfiprintf_r+0x36>
 8009080:	690b      	ldr	r3, [r1, #16]
 8009082:	b973      	cbnz	r3, 80090a2 <_svfiprintf_r+0x36>
 8009084:	2140      	movs	r1, #64	@ 0x40
 8009086:	f7ff f9bd 	bl	8008404 <_malloc_r>
 800908a:	6028      	str	r0, [r5, #0]
 800908c:	6128      	str	r0, [r5, #16]
 800908e:	b930      	cbnz	r0, 800909e <_svfiprintf_r+0x32>
 8009090:	230c      	movs	r3, #12
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	b01d      	add	sp, #116	@ 0x74
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	2340      	movs	r3, #64	@ 0x40
 80090a0:	616b      	str	r3, [r5, #20]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a6:	2320      	movs	r3, #32
 80090a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b0:	2330      	movs	r3, #48	@ 0x30
 80090b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009250 <_svfiprintf_r+0x1e4>
 80090b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090ba:	f04f 0901 	mov.w	r9, #1
 80090be:	4623      	mov	r3, r4
 80090c0:	469a      	mov	sl, r3
 80090c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c6:	b10a      	cbz	r2, 80090cc <_svfiprintf_r+0x60>
 80090c8:	2a25      	cmp	r2, #37	@ 0x25
 80090ca:	d1f9      	bne.n	80090c0 <_svfiprintf_r+0x54>
 80090cc:	ebba 0b04 	subs.w	fp, sl, r4
 80090d0:	d00b      	beq.n	80090ea <_svfiprintf_r+0x7e>
 80090d2:	465b      	mov	r3, fp
 80090d4:	4622      	mov	r2, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ff6c 	bl	8008fb6 <__ssputs_r>
 80090de:	3001      	adds	r0, #1
 80090e0:	f000 80a7 	beq.w	8009232 <_svfiprintf_r+0x1c6>
 80090e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090e6:	445a      	add	r2, fp
 80090e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ea:	f89a 3000 	ldrb.w	r3, [sl]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 809f 	beq.w	8009232 <_svfiprintf_r+0x1c6>
 80090f4:	2300      	movs	r3, #0
 80090f6:	f04f 32ff 	mov.w	r2, #4294967295
 80090fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090fe:	f10a 0a01 	add.w	sl, sl, #1
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	9307      	str	r3, [sp, #28]
 8009106:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800910a:	931a      	str	r3, [sp, #104]	@ 0x68
 800910c:	4654      	mov	r4, sl
 800910e:	2205      	movs	r2, #5
 8009110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009114:	484e      	ldr	r0, [pc, #312]	@ (8009250 <_svfiprintf_r+0x1e4>)
 8009116:	f7f7 f87b 	bl	8000210 <memchr>
 800911a:	9a04      	ldr	r2, [sp, #16]
 800911c:	b9d8      	cbnz	r0, 8009156 <_svfiprintf_r+0xea>
 800911e:	06d0      	lsls	r0, r2, #27
 8009120:	bf44      	itt	mi
 8009122:	2320      	movmi	r3, #32
 8009124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009128:	0711      	lsls	r1, r2, #28
 800912a:	bf44      	itt	mi
 800912c:	232b      	movmi	r3, #43	@ 0x2b
 800912e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009132:	f89a 3000 	ldrb.w	r3, [sl]
 8009136:	2b2a      	cmp	r3, #42	@ 0x2a
 8009138:	d015      	beq.n	8009166 <_svfiprintf_r+0xfa>
 800913a:	9a07      	ldr	r2, [sp, #28]
 800913c:	4654      	mov	r4, sl
 800913e:	2000      	movs	r0, #0
 8009140:	f04f 0c0a 	mov.w	ip, #10
 8009144:	4621      	mov	r1, r4
 8009146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800914a:	3b30      	subs	r3, #48	@ 0x30
 800914c:	2b09      	cmp	r3, #9
 800914e:	d94b      	bls.n	80091e8 <_svfiprintf_r+0x17c>
 8009150:	b1b0      	cbz	r0, 8009180 <_svfiprintf_r+0x114>
 8009152:	9207      	str	r2, [sp, #28]
 8009154:	e014      	b.n	8009180 <_svfiprintf_r+0x114>
 8009156:	eba0 0308 	sub.w	r3, r0, r8
 800915a:	fa09 f303 	lsl.w	r3, r9, r3
 800915e:	4313      	orrs	r3, r2
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	46a2      	mov	sl, r4
 8009164:	e7d2      	b.n	800910c <_svfiprintf_r+0xa0>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	1d19      	adds	r1, r3, #4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	9103      	str	r1, [sp, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfbb      	ittet	lt
 8009172:	425b      	neglt	r3, r3
 8009174:	f042 0202 	orrlt.w	r2, r2, #2
 8009178:	9307      	strge	r3, [sp, #28]
 800917a:	9307      	strlt	r3, [sp, #28]
 800917c:	bfb8      	it	lt
 800917e:	9204      	strlt	r2, [sp, #16]
 8009180:	7823      	ldrb	r3, [r4, #0]
 8009182:	2b2e      	cmp	r3, #46	@ 0x2e
 8009184:	d10a      	bne.n	800919c <_svfiprintf_r+0x130>
 8009186:	7863      	ldrb	r3, [r4, #1]
 8009188:	2b2a      	cmp	r3, #42	@ 0x2a
 800918a:	d132      	bne.n	80091f2 <_svfiprintf_r+0x186>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	1d1a      	adds	r2, r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	9203      	str	r2, [sp, #12]
 8009194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009198:	3402      	adds	r4, #2
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009260 <_svfiprintf_r+0x1f4>
 80091a0:	7821      	ldrb	r1, [r4, #0]
 80091a2:	2203      	movs	r2, #3
 80091a4:	4650      	mov	r0, sl
 80091a6:	f7f7 f833 	bl	8000210 <memchr>
 80091aa:	b138      	cbz	r0, 80091bc <_svfiprintf_r+0x150>
 80091ac:	9b04      	ldr	r3, [sp, #16]
 80091ae:	eba0 000a 	sub.w	r0, r0, sl
 80091b2:	2240      	movs	r2, #64	@ 0x40
 80091b4:	4082      	lsls	r2, r0
 80091b6:	4313      	orrs	r3, r2
 80091b8:	3401      	adds	r4, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	4824      	ldr	r0, [pc, #144]	@ (8009254 <_svfiprintf_r+0x1e8>)
 80091c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091c6:	2206      	movs	r2, #6
 80091c8:	f7f7 f822 	bl	8000210 <memchr>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d036      	beq.n	800923e <_svfiprintf_r+0x1d2>
 80091d0:	4b21      	ldr	r3, [pc, #132]	@ (8009258 <_svfiprintf_r+0x1ec>)
 80091d2:	bb1b      	cbnz	r3, 800921c <_svfiprintf_r+0x1b0>
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	3307      	adds	r3, #7
 80091d8:	f023 0307 	bic.w	r3, r3, #7
 80091dc:	3308      	adds	r3, #8
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e2:	4433      	add	r3, r6
 80091e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e6:	e76a      	b.n	80090be <_svfiprintf_r+0x52>
 80091e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ec:	460c      	mov	r4, r1
 80091ee:	2001      	movs	r0, #1
 80091f0:	e7a8      	b.n	8009144 <_svfiprintf_r+0xd8>
 80091f2:	2300      	movs	r3, #0
 80091f4:	3401      	adds	r4, #1
 80091f6:	9305      	str	r3, [sp, #20]
 80091f8:	4619      	mov	r1, r3
 80091fa:	f04f 0c0a 	mov.w	ip, #10
 80091fe:	4620      	mov	r0, r4
 8009200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009204:	3a30      	subs	r2, #48	@ 0x30
 8009206:	2a09      	cmp	r2, #9
 8009208:	d903      	bls.n	8009212 <_svfiprintf_r+0x1a6>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0c6      	beq.n	800919c <_svfiprintf_r+0x130>
 800920e:	9105      	str	r1, [sp, #20]
 8009210:	e7c4      	b.n	800919c <_svfiprintf_r+0x130>
 8009212:	fb0c 2101 	mla	r1, ip, r1, r2
 8009216:	4604      	mov	r4, r0
 8009218:	2301      	movs	r3, #1
 800921a:	e7f0      	b.n	80091fe <_svfiprintf_r+0x192>
 800921c:	ab03      	add	r3, sp, #12
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	462a      	mov	r2, r5
 8009222:	4b0e      	ldr	r3, [pc, #56]	@ (800925c <_svfiprintf_r+0x1f0>)
 8009224:	a904      	add	r1, sp, #16
 8009226:	4638      	mov	r0, r7
 8009228:	f7fc fe90 	bl	8005f4c <_printf_float>
 800922c:	1c42      	adds	r2, r0, #1
 800922e:	4606      	mov	r6, r0
 8009230:	d1d6      	bne.n	80091e0 <_svfiprintf_r+0x174>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	065b      	lsls	r3, r3, #25
 8009236:	f53f af2d 	bmi.w	8009094 <_svfiprintf_r+0x28>
 800923a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800923c:	e72c      	b.n	8009098 <_svfiprintf_r+0x2c>
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	462a      	mov	r2, r5
 8009244:	4b05      	ldr	r3, [pc, #20]	@ (800925c <_svfiprintf_r+0x1f0>)
 8009246:	a904      	add	r1, sp, #16
 8009248:	4638      	mov	r0, r7
 800924a:	f7fd f917 	bl	800647c <_printf_i>
 800924e:	e7ed      	b.n	800922c <_svfiprintf_r+0x1c0>
 8009250:	0800a211 	.word	0x0800a211
 8009254:	0800a21b 	.word	0x0800a21b
 8009258:	08005f4d 	.word	0x08005f4d
 800925c:	08008fb7 	.word	0x08008fb7
 8009260:	0800a217 	.word	0x0800a217

08009264 <__sflush_r>:
 8009264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926c:	0716      	lsls	r6, r2, #28
 800926e:	4605      	mov	r5, r0
 8009270:	460c      	mov	r4, r1
 8009272:	d454      	bmi.n	800931e <__sflush_r+0xba>
 8009274:	684b      	ldr	r3, [r1, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	dc02      	bgt.n	8009280 <__sflush_r+0x1c>
 800927a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	dd48      	ble.n	8009312 <__sflush_r+0xae>
 8009280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009282:	2e00      	cmp	r6, #0
 8009284:	d045      	beq.n	8009312 <__sflush_r+0xae>
 8009286:	2300      	movs	r3, #0
 8009288:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800928c:	682f      	ldr	r7, [r5, #0]
 800928e:	6a21      	ldr	r1, [r4, #32]
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	d030      	beq.n	80092f6 <__sflush_r+0x92>
 8009294:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	0759      	lsls	r1, r3, #29
 800929a:	d505      	bpl.n	80092a8 <__sflush_r+0x44>
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	1ad2      	subs	r2, r2, r3
 80092a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092a2:	b10b      	cbz	r3, 80092a8 <__sflush_r+0x44>
 80092a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092a6:	1ad2      	subs	r2, r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092ac:	6a21      	ldr	r1, [r4, #32]
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b0      	blx	r6
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	d106      	bne.n	80092c6 <__sflush_r+0x62>
 80092b8:	6829      	ldr	r1, [r5, #0]
 80092ba:	291d      	cmp	r1, #29
 80092bc:	d82b      	bhi.n	8009316 <__sflush_r+0xb2>
 80092be:	4a2a      	ldr	r2, [pc, #168]	@ (8009368 <__sflush_r+0x104>)
 80092c0:	410a      	asrs	r2, r1
 80092c2:	07d6      	lsls	r6, r2, #31
 80092c4:	d427      	bmi.n	8009316 <__sflush_r+0xb2>
 80092c6:	2200      	movs	r2, #0
 80092c8:	6062      	str	r2, [r4, #4]
 80092ca:	04d9      	lsls	r1, r3, #19
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	6022      	str	r2, [r4, #0]
 80092d0:	d504      	bpl.n	80092dc <__sflush_r+0x78>
 80092d2:	1c42      	adds	r2, r0, #1
 80092d4:	d101      	bne.n	80092da <__sflush_r+0x76>
 80092d6:	682b      	ldr	r3, [r5, #0]
 80092d8:	b903      	cbnz	r3, 80092dc <__sflush_r+0x78>
 80092da:	6560      	str	r0, [r4, #84]	@ 0x54
 80092dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092de:	602f      	str	r7, [r5, #0]
 80092e0:	b1b9      	cbz	r1, 8009312 <__sflush_r+0xae>
 80092e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092e6:	4299      	cmp	r1, r3
 80092e8:	d002      	beq.n	80092f0 <__sflush_r+0x8c>
 80092ea:	4628      	mov	r0, r5
 80092ec:	f7fe fcdc 	bl	8007ca8 <_free_r>
 80092f0:	2300      	movs	r3, #0
 80092f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80092f4:	e00d      	b.n	8009312 <__sflush_r+0xae>
 80092f6:	2301      	movs	r3, #1
 80092f8:	4628      	mov	r0, r5
 80092fa:	47b0      	blx	r6
 80092fc:	4602      	mov	r2, r0
 80092fe:	1c50      	adds	r0, r2, #1
 8009300:	d1c9      	bne.n	8009296 <__sflush_r+0x32>
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0c6      	beq.n	8009296 <__sflush_r+0x32>
 8009308:	2b1d      	cmp	r3, #29
 800930a:	d001      	beq.n	8009310 <__sflush_r+0xac>
 800930c:	2b16      	cmp	r3, #22
 800930e:	d11e      	bne.n	800934e <__sflush_r+0xea>
 8009310:	602f      	str	r7, [r5, #0]
 8009312:	2000      	movs	r0, #0
 8009314:	e022      	b.n	800935c <__sflush_r+0xf8>
 8009316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931a:	b21b      	sxth	r3, r3
 800931c:	e01b      	b.n	8009356 <__sflush_r+0xf2>
 800931e:	690f      	ldr	r7, [r1, #16]
 8009320:	2f00      	cmp	r7, #0
 8009322:	d0f6      	beq.n	8009312 <__sflush_r+0xae>
 8009324:	0793      	lsls	r3, r2, #30
 8009326:	680e      	ldr	r6, [r1, #0]
 8009328:	bf08      	it	eq
 800932a:	694b      	ldreq	r3, [r1, #20]
 800932c:	600f      	str	r7, [r1, #0]
 800932e:	bf18      	it	ne
 8009330:	2300      	movne	r3, #0
 8009332:	eba6 0807 	sub.w	r8, r6, r7
 8009336:	608b      	str	r3, [r1, #8]
 8009338:	f1b8 0f00 	cmp.w	r8, #0
 800933c:	dde9      	ble.n	8009312 <__sflush_r+0xae>
 800933e:	6a21      	ldr	r1, [r4, #32]
 8009340:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009342:	4643      	mov	r3, r8
 8009344:	463a      	mov	r2, r7
 8009346:	4628      	mov	r0, r5
 8009348:	47b0      	blx	r6
 800934a:	2800      	cmp	r0, #0
 800934c:	dc08      	bgt.n	8009360 <__sflush_r+0xfc>
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009360:	4407      	add	r7, r0
 8009362:	eba8 0800 	sub.w	r8, r8, r0
 8009366:	e7e7      	b.n	8009338 <__sflush_r+0xd4>
 8009368:	dfbffffe 	.word	0xdfbffffe

0800936c <_fflush_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	690b      	ldr	r3, [r1, #16]
 8009370:	4605      	mov	r5, r0
 8009372:	460c      	mov	r4, r1
 8009374:	b913      	cbnz	r3, 800937c <_fflush_r+0x10>
 8009376:	2500      	movs	r5, #0
 8009378:	4628      	mov	r0, r5
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	b118      	cbz	r0, 8009386 <_fflush_r+0x1a>
 800937e:	6a03      	ldr	r3, [r0, #32]
 8009380:	b90b      	cbnz	r3, 8009386 <_fflush_r+0x1a>
 8009382:	f7fd fc3b 	bl	8006bfc <__sinit>
 8009386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0f3      	beq.n	8009376 <_fflush_r+0xa>
 800938e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009390:	07d0      	lsls	r0, r2, #31
 8009392:	d404      	bmi.n	800939e <_fflush_r+0x32>
 8009394:	0599      	lsls	r1, r3, #22
 8009396:	d402      	bmi.n	800939e <_fflush_r+0x32>
 8009398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800939a:	f7fd fdfa 	bl	8006f92 <__retarget_lock_acquire_recursive>
 800939e:	4628      	mov	r0, r5
 80093a0:	4621      	mov	r1, r4
 80093a2:	f7ff ff5f 	bl	8009264 <__sflush_r>
 80093a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093a8:	07da      	lsls	r2, r3, #31
 80093aa:	4605      	mov	r5, r0
 80093ac:	d4e4      	bmi.n	8009378 <_fflush_r+0xc>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	059b      	lsls	r3, r3, #22
 80093b2:	d4e1      	bmi.n	8009378 <_fflush_r+0xc>
 80093b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093b6:	f7fd fded 	bl	8006f94 <__retarget_lock_release_recursive>
 80093ba:	e7dd      	b.n	8009378 <_fflush_r+0xc>

080093bc <fiprintf>:
 80093bc:	b40e      	push	{r1, r2, r3}
 80093be:	b503      	push	{r0, r1, lr}
 80093c0:	4601      	mov	r1, r0
 80093c2:	ab03      	add	r3, sp, #12
 80093c4:	4805      	ldr	r0, [pc, #20]	@ (80093dc <fiprintf+0x20>)
 80093c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ca:	6800      	ldr	r0, [r0, #0]
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	f000 f8a3 	bl	8009518 <_vfiprintf_r>
 80093d2:	b002      	add	sp, #8
 80093d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093d8:	b003      	add	sp, #12
 80093da:	4770      	bx	lr
 80093dc:	200001c4 	.word	0x200001c4

080093e0 <memmove>:
 80093e0:	4288      	cmp	r0, r1
 80093e2:	b510      	push	{r4, lr}
 80093e4:	eb01 0402 	add.w	r4, r1, r2
 80093e8:	d902      	bls.n	80093f0 <memmove+0x10>
 80093ea:	4284      	cmp	r4, r0
 80093ec:	4623      	mov	r3, r4
 80093ee:	d807      	bhi.n	8009400 <memmove+0x20>
 80093f0:	1e43      	subs	r3, r0, #1
 80093f2:	42a1      	cmp	r1, r4
 80093f4:	d008      	beq.n	8009408 <memmove+0x28>
 80093f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093fe:	e7f8      	b.n	80093f2 <memmove+0x12>
 8009400:	4402      	add	r2, r0
 8009402:	4601      	mov	r1, r0
 8009404:	428a      	cmp	r2, r1
 8009406:	d100      	bne.n	800940a <memmove+0x2a>
 8009408:	bd10      	pop	{r4, pc}
 800940a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800940e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009412:	e7f7      	b.n	8009404 <memmove+0x24>

08009414 <_sbrk_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d06      	ldr	r5, [pc, #24]	@ (8009430 <_sbrk_r+0x1c>)
 8009418:	2300      	movs	r3, #0
 800941a:	4604      	mov	r4, r0
 800941c:	4608      	mov	r0, r1
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	f7f8 fde0 	bl	8001fe4 <_sbrk>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_sbrk_r+0x1a>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	b103      	cbz	r3, 800942e <_sbrk_r+0x1a>
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	20000538 	.word	0x20000538

08009434 <abort>:
 8009434:	b508      	push	{r3, lr}
 8009436:	2006      	movs	r0, #6
 8009438:	f000 fa42 	bl	80098c0 <raise>
 800943c:	2001      	movs	r0, #1
 800943e:	f7f8 fd59 	bl	8001ef4 <_exit>

08009442 <_calloc_r>:
 8009442:	b570      	push	{r4, r5, r6, lr}
 8009444:	fba1 5402 	umull	r5, r4, r1, r2
 8009448:	b93c      	cbnz	r4, 800945a <_calloc_r+0x18>
 800944a:	4629      	mov	r1, r5
 800944c:	f7fe ffda 	bl	8008404 <_malloc_r>
 8009450:	4606      	mov	r6, r0
 8009452:	b928      	cbnz	r0, 8009460 <_calloc_r+0x1e>
 8009454:	2600      	movs	r6, #0
 8009456:	4630      	mov	r0, r6
 8009458:	bd70      	pop	{r4, r5, r6, pc}
 800945a:	220c      	movs	r2, #12
 800945c:	6002      	str	r2, [r0, #0]
 800945e:	e7f9      	b.n	8009454 <_calloc_r+0x12>
 8009460:	462a      	mov	r2, r5
 8009462:	4621      	mov	r1, r4
 8009464:	f7fd fc97 	bl	8006d96 <memset>
 8009468:	e7f5      	b.n	8009456 <_calloc_r+0x14>

0800946a <_realloc_r>:
 800946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	4680      	mov	r8, r0
 8009470:	4615      	mov	r5, r2
 8009472:	460c      	mov	r4, r1
 8009474:	b921      	cbnz	r1, 8009480 <_realloc_r+0x16>
 8009476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	4611      	mov	r1, r2
 800947c:	f7fe bfc2 	b.w	8008404 <_malloc_r>
 8009480:	b92a      	cbnz	r2, 800948e <_realloc_r+0x24>
 8009482:	f7fe fc11 	bl	8007ca8 <_free_r>
 8009486:	2400      	movs	r4, #0
 8009488:	4620      	mov	r0, r4
 800948a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948e:	f000 fa33 	bl	80098f8 <_malloc_usable_size_r>
 8009492:	4285      	cmp	r5, r0
 8009494:	4606      	mov	r6, r0
 8009496:	d802      	bhi.n	800949e <_realloc_r+0x34>
 8009498:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800949c:	d8f4      	bhi.n	8009488 <_realloc_r+0x1e>
 800949e:	4629      	mov	r1, r5
 80094a0:	4640      	mov	r0, r8
 80094a2:	f7fe ffaf 	bl	8008404 <_malloc_r>
 80094a6:	4607      	mov	r7, r0
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d0ec      	beq.n	8009486 <_realloc_r+0x1c>
 80094ac:	42b5      	cmp	r5, r6
 80094ae:	462a      	mov	r2, r5
 80094b0:	4621      	mov	r1, r4
 80094b2:	bf28      	it	cs
 80094b4:	4632      	movcs	r2, r6
 80094b6:	f7fd fd6e 	bl	8006f96 <memcpy>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4640      	mov	r0, r8
 80094be:	f7fe fbf3 	bl	8007ca8 <_free_r>
 80094c2:	463c      	mov	r4, r7
 80094c4:	e7e0      	b.n	8009488 <_realloc_r+0x1e>

080094c6 <__sfputc_r>:
 80094c6:	6893      	ldr	r3, [r2, #8]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	b410      	push	{r4}
 80094ce:	6093      	str	r3, [r2, #8]
 80094d0:	da08      	bge.n	80094e4 <__sfputc_r+0x1e>
 80094d2:	6994      	ldr	r4, [r2, #24]
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	db01      	blt.n	80094dc <__sfputc_r+0x16>
 80094d8:	290a      	cmp	r1, #10
 80094da:	d103      	bne.n	80094e4 <__sfputc_r+0x1e>
 80094dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e0:	f000 b932 	b.w	8009748 <__swbuf_r>
 80094e4:	6813      	ldr	r3, [r2, #0]
 80094e6:	1c58      	adds	r0, r3, #1
 80094e8:	6010      	str	r0, [r2, #0]
 80094ea:	7019      	strb	r1, [r3, #0]
 80094ec:	4608      	mov	r0, r1
 80094ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <__sfputs_r>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	4606      	mov	r6, r0
 80094f8:	460f      	mov	r7, r1
 80094fa:	4614      	mov	r4, r2
 80094fc:	18d5      	adds	r5, r2, r3
 80094fe:	42ac      	cmp	r4, r5
 8009500:	d101      	bne.n	8009506 <__sfputs_r+0x12>
 8009502:	2000      	movs	r0, #0
 8009504:	e007      	b.n	8009516 <__sfputs_r+0x22>
 8009506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950a:	463a      	mov	r2, r7
 800950c:	4630      	mov	r0, r6
 800950e:	f7ff ffda 	bl	80094c6 <__sfputc_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	d1f3      	bne.n	80094fe <__sfputs_r+0xa>
 8009516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009518 <_vfiprintf_r>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	460d      	mov	r5, r1
 800951e:	b09d      	sub	sp, #116	@ 0x74
 8009520:	4614      	mov	r4, r2
 8009522:	4698      	mov	r8, r3
 8009524:	4606      	mov	r6, r0
 8009526:	b118      	cbz	r0, 8009530 <_vfiprintf_r+0x18>
 8009528:	6a03      	ldr	r3, [r0, #32]
 800952a:	b90b      	cbnz	r3, 8009530 <_vfiprintf_r+0x18>
 800952c:	f7fd fb66 	bl	8006bfc <__sinit>
 8009530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009532:	07d9      	lsls	r1, r3, #31
 8009534:	d405      	bmi.n	8009542 <_vfiprintf_r+0x2a>
 8009536:	89ab      	ldrh	r3, [r5, #12]
 8009538:	059a      	lsls	r2, r3, #22
 800953a:	d402      	bmi.n	8009542 <_vfiprintf_r+0x2a>
 800953c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800953e:	f7fd fd28 	bl	8006f92 <__retarget_lock_acquire_recursive>
 8009542:	89ab      	ldrh	r3, [r5, #12]
 8009544:	071b      	lsls	r3, r3, #28
 8009546:	d501      	bpl.n	800954c <_vfiprintf_r+0x34>
 8009548:	692b      	ldr	r3, [r5, #16]
 800954a:	b99b      	cbnz	r3, 8009574 <_vfiprintf_r+0x5c>
 800954c:	4629      	mov	r1, r5
 800954e:	4630      	mov	r0, r6
 8009550:	f000 f938 	bl	80097c4 <__swsetup_r>
 8009554:	b170      	cbz	r0, 8009574 <_vfiprintf_r+0x5c>
 8009556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009558:	07dc      	lsls	r4, r3, #31
 800955a:	d504      	bpl.n	8009566 <_vfiprintf_r+0x4e>
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	b01d      	add	sp, #116	@ 0x74
 8009562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	0598      	lsls	r0, r3, #22
 800956a:	d4f7      	bmi.n	800955c <_vfiprintf_r+0x44>
 800956c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800956e:	f7fd fd11 	bl	8006f94 <__retarget_lock_release_recursive>
 8009572:	e7f3      	b.n	800955c <_vfiprintf_r+0x44>
 8009574:	2300      	movs	r3, #0
 8009576:	9309      	str	r3, [sp, #36]	@ 0x24
 8009578:	2320      	movs	r3, #32
 800957a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800957e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009582:	2330      	movs	r3, #48	@ 0x30
 8009584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009734 <_vfiprintf_r+0x21c>
 8009588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800958c:	f04f 0901 	mov.w	r9, #1
 8009590:	4623      	mov	r3, r4
 8009592:	469a      	mov	sl, r3
 8009594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009598:	b10a      	cbz	r2, 800959e <_vfiprintf_r+0x86>
 800959a:	2a25      	cmp	r2, #37	@ 0x25
 800959c:	d1f9      	bne.n	8009592 <_vfiprintf_r+0x7a>
 800959e:	ebba 0b04 	subs.w	fp, sl, r4
 80095a2:	d00b      	beq.n	80095bc <_vfiprintf_r+0xa4>
 80095a4:	465b      	mov	r3, fp
 80095a6:	4622      	mov	r2, r4
 80095a8:	4629      	mov	r1, r5
 80095aa:	4630      	mov	r0, r6
 80095ac:	f7ff ffa2 	bl	80094f4 <__sfputs_r>
 80095b0:	3001      	adds	r0, #1
 80095b2:	f000 80a7 	beq.w	8009704 <_vfiprintf_r+0x1ec>
 80095b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095b8:	445a      	add	r2, fp
 80095ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80095bc:	f89a 3000 	ldrb.w	r3, [sl]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 809f 	beq.w	8009704 <_vfiprintf_r+0x1ec>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f04f 32ff 	mov.w	r2, #4294967295
 80095cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d0:	f10a 0a01 	add.w	sl, sl, #1
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	9307      	str	r3, [sp, #28]
 80095d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80095de:	4654      	mov	r4, sl
 80095e0:	2205      	movs	r2, #5
 80095e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e6:	4853      	ldr	r0, [pc, #332]	@ (8009734 <_vfiprintf_r+0x21c>)
 80095e8:	f7f6 fe12 	bl	8000210 <memchr>
 80095ec:	9a04      	ldr	r2, [sp, #16]
 80095ee:	b9d8      	cbnz	r0, 8009628 <_vfiprintf_r+0x110>
 80095f0:	06d1      	lsls	r1, r2, #27
 80095f2:	bf44      	itt	mi
 80095f4:	2320      	movmi	r3, #32
 80095f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095fa:	0713      	lsls	r3, r2, #28
 80095fc:	bf44      	itt	mi
 80095fe:	232b      	movmi	r3, #43	@ 0x2b
 8009600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009604:	f89a 3000 	ldrb.w	r3, [sl]
 8009608:	2b2a      	cmp	r3, #42	@ 0x2a
 800960a:	d015      	beq.n	8009638 <_vfiprintf_r+0x120>
 800960c:	9a07      	ldr	r2, [sp, #28]
 800960e:	4654      	mov	r4, sl
 8009610:	2000      	movs	r0, #0
 8009612:	f04f 0c0a 	mov.w	ip, #10
 8009616:	4621      	mov	r1, r4
 8009618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800961c:	3b30      	subs	r3, #48	@ 0x30
 800961e:	2b09      	cmp	r3, #9
 8009620:	d94b      	bls.n	80096ba <_vfiprintf_r+0x1a2>
 8009622:	b1b0      	cbz	r0, 8009652 <_vfiprintf_r+0x13a>
 8009624:	9207      	str	r2, [sp, #28]
 8009626:	e014      	b.n	8009652 <_vfiprintf_r+0x13a>
 8009628:	eba0 0308 	sub.w	r3, r0, r8
 800962c:	fa09 f303 	lsl.w	r3, r9, r3
 8009630:	4313      	orrs	r3, r2
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	46a2      	mov	sl, r4
 8009636:	e7d2      	b.n	80095de <_vfiprintf_r+0xc6>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1d19      	adds	r1, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9103      	str	r1, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	bfbb      	ittet	lt
 8009644:	425b      	neglt	r3, r3
 8009646:	f042 0202 	orrlt.w	r2, r2, #2
 800964a:	9307      	strge	r3, [sp, #28]
 800964c:	9307      	strlt	r3, [sp, #28]
 800964e:	bfb8      	it	lt
 8009650:	9204      	strlt	r2, [sp, #16]
 8009652:	7823      	ldrb	r3, [r4, #0]
 8009654:	2b2e      	cmp	r3, #46	@ 0x2e
 8009656:	d10a      	bne.n	800966e <_vfiprintf_r+0x156>
 8009658:	7863      	ldrb	r3, [r4, #1]
 800965a:	2b2a      	cmp	r3, #42	@ 0x2a
 800965c:	d132      	bne.n	80096c4 <_vfiprintf_r+0x1ac>
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	1d1a      	adds	r2, r3, #4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	9203      	str	r2, [sp, #12]
 8009666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800966a:	3402      	adds	r4, #2
 800966c:	9305      	str	r3, [sp, #20]
 800966e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009744 <_vfiprintf_r+0x22c>
 8009672:	7821      	ldrb	r1, [r4, #0]
 8009674:	2203      	movs	r2, #3
 8009676:	4650      	mov	r0, sl
 8009678:	f7f6 fdca 	bl	8000210 <memchr>
 800967c:	b138      	cbz	r0, 800968e <_vfiprintf_r+0x176>
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	eba0 000a 	sub.w	r0, r0, sl
 8009684:	2240      	movs	r2, #64	@ 0x40
 8009686:	4082      	lsls	r2, r0
 8009688:	4313      	orrs	r3, r2
 800968a:	3401      	adds	r4, #1
 800968c:	9304      	str	r3, [sp, #16]
 800968e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009692:	4829      	ldr	r0, [pc, #164]	@ (8009738 <_vfiprintf_r+0x220>)
 8009694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009698:	2206      	movs	r2, #6
 800969a:	f7f6 fdb9 	bl	8000210 <memchr>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d03f      	beq.n	8009722 <_vfiprintf_r+0x20a>
 80096a2:	4b26      	ldr	r3, [pc, #152]	@ (800973c <_vfiprintf_r+0x224>)
 80096a4:	bb1b      	cbnz	r3, 80096ee <_vfiprintf_r+0x1d6>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	3307      	adds	r3, #7
 80096aa:	f023 0307 	bic.w	r3, r3, #7
 80096ae:	3308      	adds	r3, #8
 80096b0:	9303      	str	r3, [sp, #12]
 80096b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b4:	443b      	add	r3, r7
 80096b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80096b8:	e76a      	b.n	8009590 <_vfiprintf_r+0x78>
 80096ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80096be:	460c      	mov	r4, r1
 80096c0:	2001      	movs	r0, #1
 80096c2:	e7a8      	b.n	8009616 <_vfiprintf_r+0xfe>
 80096c4:	2300      	movs	r3, #0
 80096c6:	3401      	adds	r4, #1
 80096c8:	9305      	str	r3, [sp, #20]
 80096ca:	4619      	mov	r1, r3
 80096cc:	f04f 0c0a 	mov.w	ip, #10
 80096d0:	4620      	mov	r0, r4
 80096d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d6:	3a30      	subs	r2, #48	@ 0x30
 80096d8:	2a09      	cmp	r2, #9
 80096da:	d903      	bls.n	80096e4 <_vfiprintf_r+0x1cc>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0c6      	beq.n	800966e <_vfiprintf_r+0x156>
 80096e0:	9105      	str	r1, [sp, #20]
 80096e2:	e7c4      	b.n	800966e <_vfiprintf_r+0x156>
 80096e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096e8:	4604      	mov	r4, r0
 80096ea:	2301      	movs	r3, #1
 80096ec:	e7f0      	b.n	80096d0 <_vfiprintf_r+0x1b8>
 80096ee:	ab03      	add	r3, sp, #12
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	462a      	mov	r2, r5
 80096f4:	4b12      	ldr	r3, [pc, #72]	@ (8009740 <_vfiprintf_r+0x228>)
 80096f6:	a904      	add	r1, sp, #16
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7fc fc27 	bl	8005f4c <_printf_float>
 80096fe:	4607      	mov	r7, r0
 8009700:	1c78      	adds	r0, r7, #1
 8009702:	d1d6      	bne.n	80096b2 <_vfiprintf_r+0x19a>
 8009704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009706:	07d9      	lsls	r1, r3, #31
 8009708:	d405      	bmi.n	8009716 <_vfiprintf_r+0x1fe>
 800970a:	89ab      	ldrh	r3, [r5, #12]
 800970c:	059a      	lsls	r2, r3, #22
 800970e:	d402      	bmi.n	8009716 <_vfiprintf_r+0x1fe>
 8009710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009712:	f7fd fc3f 	bl	8006f94 <__retarget_lock_release_recursive>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	065b      	lsls	r3, r3, #25
 800971a:	f53f af1f 	bmi.w	800955c <_vfiprintf_r+0x44>
 800971e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009720:	e71e      	b.n	8009560 <_vfiprintf_r+0x48>
 8009722:	ab03      	add	r3, sp, #12
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	462a      	mov	r2, r5
 8009728:	4b05      	ldr	r3, [pc, #20]	@ (8009740 <_vfiprintf_r+0x228>)
 800972a:	a904      	add	r1, sp, #16
 800972c:	4630      	mov	r0, r6
 800972e:	f7fc fea5 	bl	800647c <_printf_i>
 8009732:	e7e4      	b.n	80096fe <_vfiprintf_r+0x1e6>
 8009734:	0800a211 	.word	0x0800a211
 8009738:	0800a21b 	.word	0x0800a21b
 800973c:	08005f4d 	.word	0x08005f4d
 8009740:	080094f5 	.word	0x080094f5
 8009744:	0800a217 	.word	0x0800a217

08009748 <__swbuf_r>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	460e      	mov	r6, r1
 800974c:	4614      	mov	r4, r2
 800974e:	4605      	mov	r5, r0
 8009750:	b118      	cbz	r0, 800975a <__swbuf_r+0x12>
 8009752:	6a03      	ldr	r3, [r0, #32]
 8009754:	b90b      	cbnz	r3, 800975a <__swbuf_r+0x12>
 8009756:	f7fd fa51 	bl	8006bfc <__sinit>
 800975a:	69a3      	ldr	r3, [r4, #24]
 800975c:	60a3      	str	r3, [r4, #8]
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	071a      	lsls	r2, r3, #28
 8009762:	d501      	bpl.n	8009768 <__swbuf_r+0x20>
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	b943      	cbnz	r3, 800977a <__swbuf_r+0x32>
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f82a 	bl	80097c4 <__swsetup_r>
 8009770:	b118      	cbz	r0, 800977a <__swbuf_r+0x32>
 8009772:	f04f 37ff 	mov.w	r7, #4294967295
 8009776:	4638      	mov	r0, r7
 8009778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	6922      	ldr	r2, [r4, #16]
 800977e:	1a98      	subs	r0, r3, r2
 8009780:	6963      	ldr	r3, [r4, #20]
 8009782:	b2f6      	uxtb	r6, r6
 8009784:	4283      	cmp	r3, r0
 8009786:	4637      	mov	r7, r6
 8009788:	dc05      	bgt.n	8009796 <__swbuf_r+0x4e>
 800978a:	4621      	mov	r1, r4
 800978c:	4628      	mov	r0, r5
 800978e:	f7ff fded 	bl	800936c <_fflush_r>
 8009792:	2800      	cmp	r0, #0
 8009794:	d1ed      	bne.n	8009772 <__swbuf_r+0x2a>
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	3b01      	subs	r3, #1
 800979a:	60a3      	str	r3, [r4, #8]
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	701e      	strb	r6, [r3, #0]
 80097a4:	6962      	ldr	r2, [r4, #20]
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d004      	beq.n	80097b6 <__swbuf_r+0x6e>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	07db      	lsls	r3, r3, #31
 80097b0:	d5e1      	bpl.n	8009776 <__swbuf_r+0x2e>
 80097b2:	2e0a      	cmp	r6, #10
 80097b4:	d1df      	bne.n	8009776 <__swbuf_r+0x2e>
 80097b6:	4621      	mov	r1, r4
 80097b8:	4628      	mov	r0, r5
 80097ba:	f7ff fdd7 	bl	800936c <_fflush_r>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d0d9      	beq.n	8009776 <__swbuf_r+0x2e>
 80097c2:	e7d6      	b.n	8009772 <__swbuf_r+0x2a>

080097c4 <__swsetup_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4b29      	ldr	r3, [pc, #164]	@ (800986c <__swsetup_r+0xa8>)
 80097c8:	4605      	mov	r5, r0
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	460c      	mov	r4, r1
 80097ce:	b118      	cbz	r0, 80097d8 <__swsetup_r+0x14>
 80097d0:	6a03      	ldr	r3, [r0, #32]
 80097d2:	b90b      	cbnz	r3, 80097d8 <__swsetup_r+0x14>
 80097d4:	f7fd fa12 	bl	8006bfc <__sinit>
 80097d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097dc:	0719      	lsls	r1, r3, #28
 80097de:	d422      	bmi.n	8009826 <__swsetup_r+0x62>
 80097e0:	06da      	lsls	r2, r3, #27
 80097e2:	d407      	bmi.n	80097f4 <__swsetup_r+0x30>
 80097e4:	2209      	movs	r2, #9
 80097e6:	602a      	str	r2, [r5, #0]
 80097e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	f04f 30ff 	mov.w	r0, #4294967295
 80097f2:	e033      	b.n	800985c <__swsetup_r+0x98>
 80097f4:	0758      	lsls	r0, r3, #29
 80097f6:	d512      	bpl.n	800981e <__swsetup_r+0x5a>
 80097f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097fa:	b141      	cbz	r1, 800980e <__swsetup_r+0x4a>
 80097fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009800:	4299      	cmp	r1, r3
 8009802:	d002      	beq.n	800980a <__swsetup_r+0x46>
 8009804:	4628      	mov	r0, r5
 8009806:	f7fe fa4f 	bl	8007ca8 <_free_r>
 800980a:	2300      	movs	r3, #0
 800980c:	6363      	str	r3, [r4, #52]	@ 0x34
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	2300      	movs	r3, #0
 8009818:	6063      	str	r3, [r4, #4]
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	f043 0308 	orr.w	r3, r3, #8
 8009824:	81a3      	strh	r3, [r4, #12]
 8009826:	6923      	ldr	r3, [r4, #16]
 8009828:	b94b      	cbnz	r3, 800983e <__swsetup_r+0x7a>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009834:	d003      	beq.n	800983e <__swsetup_r+0x7a>
 8009836:	4621      	mov	r1, r4
 8009838:	4628      	mov	r0, r5
 800983a:	f000 f88b 	bl	8009954 <__smakebuf_r>
 800983e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009842:	f013 0201 	ands.w	r2, r3, #1
 8009846:	d00a      	beq.n	800985e <__swsetup_r+0x9a>
 8009848:	2200      	movs	r2, #0
 800984a:	60a2      	str	r2, [r4, #8]
 800984c:	6962      	ldr	r2, [r4, #20]
 800984e:	4252      	negs	r2, r2
 8009850:	61a2      	str	r2, [r4, #24]
 8009852:	6922      	ldr	r2, [r4, #16]
 8009854:	b942      	cbnz	r2, 8009868 <__swsetup_r+0xa4>
 8009856:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800985a:	d1c5      	bne.n	80097e8 <__swsetup_r+0x24>
 800985c:	bd38      	pop	{r3, r4, r5, pc}
 800985e:	0799      	lsls	r1, r3, #30
 8009860:	bf58      	it	pl
 8009862:	6962      	ldrpl	r2, [r4, #20]
 8009864:	60a2      	str	r2, [r4, #8]
 8009866:	e7f4      	b.n	8009852 <__swsetup_r+0x8e>
 8009868:	2000      	movs	r0, #0
 800986a:	e7f7      	b.n	800985c <__swsetup_r+0x98>
 800986c:	200001c4 	.word	0x200001c4

08009870 <_raise_r>:
 8009870:	291f      	cmp	r1, #31
 8009872:	b538      	push	{r3, r4, r5, lr}
 8009874:	4605      	mov	r5, r0
 8009876:	460c      	mov	r4, r1
 8009878:	d904      	bls.n	8009884 <_raise_r+0x14>
 800987a:	2316      	movs	r3, #22
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	f04f 30ff 	mov.w	r0, #4294967295
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009886:	b112      	cbz	r2, 800988e <_raise_r+0x1e>
 8009888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800988c:	b94b      	cbnz	r3, 80098a2 <_raise_r+0x32>
 800988e:	4628      	mov	r0, r5
 8009890:	f000 f830 	bl	80098f4 <_getpid_r>
 8009894:	4622      	mov	r2, r4
 8009896:	4601      	mov	r1, r0
 8009898:	4628      	mov	r0, r5
 800989a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989e:	f000 b817 	b.w	80098d0 <_kill_r>
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d00a      	beq.n	80098bc <_raise_r+0x4c>
 80098a6:	1c59      	adds	r1, r3, #1
 80098a8:	d103      	bne.n	80098b2 <_raise_r+0x42>
 80098aa:	2316      	movs	r3, #22
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	2001      	movs	r0, #1
 80098b0:	e7e7      	b.n	8009882 <_raise_r+0x12>
 80098b2:	2100      	movs	r1, #0
 80098b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098b8:	4620      	mov	r0, r4
 80098ba:	4798      	blx	r3
 80098bc:	2000      	movs	r0, #0
 80098be:	e7e0      	b.n	8009882 <_raise_r+0x12>

080098c0 <raise>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	@ (80098cc <raise+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f7ff bfd3 	b.w	8009870 <_raise_r>
 80098ca:	bf00      	nop
 80098cc:	200001c4 	.word	0x200001c4

080098d0 <_kill_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4d07      	ldr	r5, [pc, #28]	@ (80098f0 <_kill_r+0x20>)
 80098d4:	2300      	movs	r3, #0
 80098d6:	4604      	mov	r4, r0
 80098d8:	4608      	mov	r0, r1
 80098da:	4611      	mov	r1, r2
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	f7f8 faf9 	bl	8001ed4 <_kill>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	d102      	bne.n	80098ec <_kill_r+0x1c>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	b103      	cbz	r3, 80098ec <_kill_r+0x1c>
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	bd38      	pop	{r3, r4, r5, pc}
 80098ee:	bf00      	nop
 80098f0:	20000538 	.word	0x20000538

080098f4 <_getpid_r>:
 80098f4:	f7f8 bae6 	b.w	8001ec4 <_getpid>

080098f8 <_malloc_usable_size_r>:
 80098f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fc:	1f18      	subs	r0, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbc      	itt	lt
 8009902:	580b      	ldrlt	r3, [r1, r0]
 8009904:	18c0      	addlt	r0, r0, r3
 8009906:	4770      	bx	lr

08009908 <__swhatbuf_r>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	460c      	mov	r4, r1
 800990c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009910:	2900      	cmp	r1, #0
 8009912:	b096      	sub	sp, #88	@ 0x58
 8009914:	4615      	mov	r5, r2
 8009916:	461e      	mov	r6, r3
 8009918:	da0d      	bge.n	8009936 <__swhatbuf_r+0x2e>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009920:	f04f 0100 	mov.w	r1, #0
 8009924:	bf14      	ite	ne
 8009926:	2340      	movne	r3, #64	@ 0x40
 8009928:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800992c:	2000      	movs	r0, #0
 800992e:	6031      	str	r1, [r6, #0]
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	b016      	add	sp, #88	@ 0x58
 8009934:	bd70      	pop	{r4, r5, r6, pc}
 8009936:	466a      	mov	r2, sp
 8009938:	f000 f848 	bl	80099cc <_fstat_r>
 800993c:	2800      	cmp	r0, #0
 800993e:	dbec      	blt.n	800991a <__swhatbuf_r+0x12>
 8009940:	9901      	ldr	r1, [sp, #4]
 8009942:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009946:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800994a:	4259      	negs	r1, r3
 800994c:	4159      	adcs	r1, r3
 800994e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009952:	e7eb      	b.n	800992c <__swhatbuf_r+0x24>

08009954 <__smakebuf_r>:
 8009954:	898b      	ldrh	r3, [r1, #12]
 8009956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009958:	079d      	lsls	r5, r3, #30
 800995a:	4606      	mov	r6, r0
 800995c:	460c      	mov	r4, r1
 800995e:	d507      	bpl.n	8009970 <__smakebuf_r+0x1c>
 8009960:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	2301      	movs	r3, #1
 800996a:	6163      	str	r3, [r4, #20]
 800996c:	b003      	add	sp, #12
 800996e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009970:	ab01      	add	r3, sp, #4
 8009972:	466a      	mov	r2, sp
 8009974:	f7ff ffc8 	bl	8009908 <__swhatbuf_r>
 8009978:	9f00      	ldr	r7, [sp, #0]
 800997a:	4605      	mov	r5, r0
 800997c:	4639      	mov	r1, r7
 800997e:	4630      	mov	r0, r6
 8009980:	f7fe fd40 	bl	8008404 <_malloc_r>
 8009984:	b948      	cbnz	r0, 800999a <__smakebuf_r+0x46>
 8009986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998a:	059a      	lsls	r2, r3, #22
 800998c:	d4ee      	bmi.n	800996c <__smakebuf_r+0x18>
 800998e:	f023 0303 	bic.w	r3, r3, #3
 8009992:	f043 0302 	orr.w	r3, r3, #2
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	e7e2      	b.n	8009960 <__smakebuf_r+0xc>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	6020      	str	r0, [r4, #0]
 800999e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a2:	81a3      	strh	r3, [r4, #12]
 80099a4:	9b01      	ldr	r3, [sp, #4]
 80099a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099aa:	b15b      	cbz	r3, 80099c4 <__smakebuf_r+0x70>
 80099ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b0:	4630      	mov	r0, r6
 80099b2:	f000 f81d 	bl	80099f0 <_isatty_r>
 80099b6:	b128      	cbz	r0, 80099c4 <__smakebuf_r+0x70>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	f043 0301 	orr.w	r3, r3, #1
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	431d      	orrs	r5, r3
 80099c8:	81a5      	strh	r5, [r4, #12]
 80099ca:	e7cf      	b.n	800996c <__smakebuf_r+0x18>

080099cc <_fstat_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d07      	ldr	r5, [pc, #28]	@ (80099ec <_fstat_r+0x20>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	602b      	str	r3, [r5, #0]
 80099da:	f7f8 fadb 	bl	8001f94 <_fstat>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	d102      	bne.n	80099e8 <_fstat_r+0x1c>
 80099e2:	682b      	ldr	r3, [r5, #0]
 80099e4:	b103      	cbz	r3, 80099e8 <_fstat_r+0x1c>
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	bd38      	pop	{r3, r4, r5, pc}
 80099ea:	bf00      	nop
 80099ec:	20000538 	.word	0x20000538

080099f0 <_isatty_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d06      	ldr	r5, [pc, #24]	@ (8009a0c <_isatty_r+0x1c>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	f7f8 fada 	bl	8001fb4 <_isatty>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_isatty_r+0x1a>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_isatty_r+0x1a>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	20000538 	.word	0x20000538

08009a10 <_init>:
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a12:	bf00      	nop
 8009a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a16:	bc08      	pop	{r3}
 8009a18:	469e      	mov	lr, r3
 8009a1a:	4770      	bx	lr

08009a1c <_fini>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	bf00      	nop
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr
